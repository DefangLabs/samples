[
  {
    "id": 1,
    "text": "Website\nInstallation\nLocal Development\nBuild\nDeployment\nThis website is built using Docusaurus 2, a modern static website generator.\nThis command starts a local development server and opens up a browser window. \nThis command generates static content into the build directory and can be served using any static contents hosting service.\nUsing SSH:\nNot using SSH:\nIf you are using GitHub pages for hosting, this command is a convenient way to build the website and push to the gh-pages branch.\n$ npm\n\n$ npm serve\n\n$ npm build\n\nbuild\n$ USE_SSH=true yarn deploy\n\n$ GIT_USER=<Your GitHub username> yarn deploy\n\ngh-pages"
  },
  {
    "id": 2,
    "text": "Samples\ntitle: Samples\ndescription: Sample projects to help you launch services faster with Defang.\nsidebar_position: 500\nimport {Button, ButtonGroup, FormGroup, FormLabel} from \"@mui/material\"\nCheck out our sample projects here to get some inspiration and get a sense of how defang works.\nimport Samples from \"../src/components/Samples\";\n"
  },
  {
    "id": 3,
    "text": "What is Defang?\nFeatures\nsidebar_position: 100\ntitle: Overview\ndescription: Overview of Defang, a radically simpler way to build, deploy, and optimize production-ready cloud apps.\nDefang is a radically simpler way for developers to build, deploy their apps to the cloud. Defang enables you to easily author cloud application in any language, build and deploy to the cloud with a single command, and iterate quickly.\nDefang provides a streamlined experience to develop, deploy, observe, and update your cloud applications. Defang includes the following features:\nThe Defang CLI includes an AI-driven assistant that translates natural language prompts to an outline for your project that you can then refine.\nDefang can automatically build and deploy your project with a single command.\nIf you’re new to Defang, you can try deploying to the Defang Playground, a hosted environment to learn to use Defang with non-production workloads.\nOnce you’re ready, you can deploy it to your own cloud account - we call this Defang BYOC. Defang takes care of all the heavy lifting such as configuring networking, security, observability and all the other details that usually slow down the average cloud developer.\n\n\nIf you’re new to Defang, you can try deploying to the Defang Playground, a hosted environment to learn to use Defang with non-production workloads.\nOnce you’re ready, you can deploy it to your own cloud account - we call this Defang BYOC. Defang takes care of all the heavy lifting such as configuring networking, security, observability and all the other details that usually slow down the average cloud developer.\nYou can also use Defang to easily publish updates to your deployed application with zero downtime.\nIf you’re new to Defang, you can try deploying to the Defang Playground, a hosted environment to learn to use Defang with non-production workloads.\nOnce you’re ready, you can deploy it to your own cloud account - we call this Defang BYOC. Defang takes care of all the heavy lifting such as configuring networking, security, observability and all the other details that usually slow down the average cloud developer.\nSupport for various types of applications: Web services and APIs, mobile app backends, ML services, hosting LLMs, etc.\nSupport for your programming language of choice: Node.js, Python, Golang, or anything else you can package in a Dockerfile.\nBuilt-in AI assistant to go from natural language prompt to an outline project\nAutomated Dockerfile builds\nSupport for pre-built Docker containers, from public or private image registries\nAbility to express your project configuration using a Docker Compose YAML file\nAbility to manage encrypted configuration values\nPre-configured environments with built-in security, networking, and observability\nOne-command deployments\nSupport for GPUs\nSupport for Infra-as-Code via the Defang Pulumi provider"
  },
  {
    "id": 4,
    "text": "FAQ\nWhich cloud/region is the app being deployed to?\nCan I bring my own AWS or other cloud account?\nOn AWS, can I deploy to services such as EC2, EKS, or Lambda?\nCan I access AWS storage services such as S3 or database services such as RDS? How?\nDo you plan to support other clouds?\nCan I run production apps with Defang?\nI'm having trouble running the binary on my Mac. What should I do?\nWarnings\n\"The folder is not empty. Files may be overwritten.\"\n\"environment variable not found\"\n\"Unsupported platform\"\n\"not logged in\"\n\"No port mode was specified; assuming 'host'\"\n\"Published ports are not supported in ingress mode; assuming 'host'\"\n\"TCP ingress is not supported; assuming HTTP\"\n\"unsupported compose directive\"\n\"no reservations specified; using limits as reservations\"\n\"ingress port without healthcheck defaults to GET / HTTP/1.1\"\n\"missing memory reservation; specify deploy.resources.reservations.memory to avoid out-of-memory errors\"\n\"The build context contains more than 10 files\"\n\"AWS provider was selected, but AWS environment variables are not set\"\n\"Using Defang provider, but AWS environment variables were detected\"\n\"secret … is not defined in the top-level secrets section\"\n\"unsupported secret …: not marked external:true\"\nErrors\n\"Stack:… is in UPDATE_COMPLETE_CLEANUP_IN_PROGRESS state and cannot be updated\"\nsidebar_position: 600\ntitle: FAQ\ndescription: Frequently asked questions about Defang.\nIn the Defang Playground the app is deployed to AWS us-west-2. In the Defang BYOC model, the region is determined by your Defang BYOC Provider settings.\nYes! Please check out the Defang BYOC documentation for more information.\nThe current release includes support for containers only, deployed to ECS. We are still exploring how to support additional execution models such as VMs and functions-as-a-service. However, using our Pulumi provider, it is possible to combine Defang services with other native AWS resources.\nYes, you can access whatever other resources exist in the cloud account you are using as a Defang BYOC Provider.\nWhile we currently support AWS as a Defang BYOC Provider, we plan to support other clouds in future releases, such as Azure and GCP.\nThe Defang Playground is meant for testing and trial purposes only. Deployment of productions apps with Defang BYOC is not yet supported and disallowed by the Terms of Service. If you are interested in running production apps, please contact us.\nMacOS users will need to allow the binary to run due to security settings:\nAttempt to run the binary. You'll see a security prompt preventing you from running it.\nGo to System Preferences > Privacy & Security > General.\nIn the 'Allow applications downloaded from:' section, you should see a message about Defang being blocked. Click 'Open Anyway'.\nAlternatively, select the option \"App Store and identified developers\" to allow all applications from the App Store and identified developers to run.\n\n\nAttempt to run the binary. You'll see a security prompt preventing you from running it.\nGo to System Preferences > Privacy & Security > General.\nIn the 'Allow applications downloaded from:' section, you should see a message about Defang being blocked. Click 'Open Anyway'.\nAlternatively, select the option \"App Store and identified developers\" to allow all applications from the App Store and identified developers to run.\nAttempt to run the binary. You'll see a security prompt preventing you from running it.\nGo to System Preferences > Privacy & Security > General.\nIn the 'Allow applications downloaded from:' section, you should see a message about Defang being blocked. Click 'Open Anyway'.\nAlternatively, select the option \"App Store and identified developers\" to allow all applications from the App Store and identified developers to run.\nThis message is displayed when you run defang generate and the target folder is not empty. If you proceed, Defang will overwrite any existing files with the same name. If you want to keep the existing files, you should move them to a different folder before running defang generate or pick a different target folder.\nThis message is displayed when you run defang compose up and the Compose file references an environment variable that is not set. If you proceed, the environment variable will be empty in the container. If you want to set the environment variable, you should set it in the environment where you run defang compose up.\nThis message is displayed when you run defang compose up and the Compose file references a platform that is not supported by Defang. Defang Beta only supports Linux operating systems.\nThis message is displayed when you run defang compose config but you are not logged in. The displayed configuration will be incomplete. If you want to see the complete configuration, you should log in first using defang login.\nThis message is displayed when you run defang compose up and the Compose file declares a port that does not specify a port mode. By default, Defang will keep the port private. If you want to expose the port to the public internet, you should specify the mode as ingress:\nThis message is displayed when you run defang compose up and the Compose file declares a port with mode set to ingress and published set to a port number. Defang does not support published ports in ingress mode. If you want to expose the port to the public internet, you should specify the mode as ingress and remove the published setting.\nThis message is displayed when you run defang compose up and the Compose file declares a port with mode set to ingress and protocol set to tcp. Defang does not support arbitrary TCP ingress and will assume the port is used for HTTP traffic. To silence the warning, remove the protocol setting.\nThis message is displayed when you run defang compose up and the Compose file declares a directive that is not supported by Defang. The deployment will continue, but the unsupported directive will be ignored, which may cause unexpected behavior.\nThis message is displayed when you run defang compose up and the Compose file declares a resource with limits but no reservations. Defang will use the limits as reservations to ensure the container has enough resources. Specify reservations if you want to silence the warning or reserve a different amount of resources:\nThis message is displayed when you run defang compose up and the Compose file declares an ingress with a port but no healthcheck. Defang will assume the default healthcheck of GET / HTTP/1.1 to ensure the port is healthy. Specify a healthcheck if you want to silence the warning or use a different healthcheck:\nThis message is displayed when you run defang compose up and the Compose file doesn't specify a memory reservation. If available, Defang will use the memory limit as the memory reservation. Specify a memory reservation if you want to silence the warning or reserve a different amount of memory:\nThis message is displayed when you run defang compose up and the Compose file declares a build with a context that contains more than 10 files. Ensure the context refers to the correct folder. Defang will use the context as is, but you may experience slow build times. If you want to speed up the build, you should reduce the number of files in the context.\nThis message is displayed when you run defang compose up with the --provider=aws but none of the AWS environment variables were not set. If you proceed, the deployment might fail.\nThis message is displayed when you run defang compose up with the --provider=defang but AWS environment variables were detected. The AWS environment variables will be ignored.\nThis message is displayed when you run defang compose up and the Compose file declares a secret that is not defined in the top-level secrets section. To silence the warning, define the secret in the top-level secrets section:\nThis message is displayed when you run defang compose up and the Compose file declares a secret that is not marked external:true. Defang only supports external secrets, managed by the defang config command. To silence the warning, mark the secret as external:true in the top-level secrets section:\nThis happens if different version of the Defang CLI are used with the same AWS account. Each version one will try to update the CD stack to its version, back and forth. Make sure that all users have the same version of the CLI. Check the CLI version using defang version.\nus-west-2\ndefang generate\ndefang generate\ndefang compose up\ndefang compose up\ndefang compose up\ndefang compose config\ndefang login\ndefang compose up\nport\nmode\nmode\ningress\nservices:\n  service1:\n    …\n    ports:\n      - target: 80\n        mode: ingress\n\ndefang compose up\nport\nmode\ningress\npublished\nmode\ningress\npublished\ndefang compose up\nport\nmode\ningress\nprotocol\ntcp\nprotocol\ndefang compose up\ndefang compose up\nresource\nlimits\nreservations\nlimits\nreservations\nreservations\nservices:\n  service1:\n    …\n    deploy:\n      resources:\n        reservations:\n          cpus: 0.5\n          memory: 512MB\n\ndefang compose up\ningress\nport\nhealthcheck\nGET / HTTP/1.1\nhealthcheck\nservices:\n  service1:\n    …\n    deploy:\n      healthcheck:\n        test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:80/health\"]\n\ndefang compose up\nmemory\nmemory\nmemory\nmemory\nservices:\n  service1:\n    …\n    deploy:\n      resources:\n        reservations:\n          memory: 512MB\n\ndefang compose up\nbuild\ncontext\ncontext\ncontext\ndefang compose up\n--provider=aws\ndefang compose up\n--provider=defang\ndefang compose up\nsecret\nsecrets\nsecrets\nservices:\n  service1:\n    …\n    secrets:\n      - my_secret\nsecrets:\n  my_secret:\n    external: true\n\ndefang compose up\nsecret\nexternal:true\ndefang config\nexternal:true\nsecrets\n…\nsecrets:\n  my_secret:\n    external: true\n\ndefang version"
  },
  {
    "id": 5,
    "text": "GCP\ntitle: GCP\ndescription: Defang will allow you to easily create and manage full, scalable applications with GCP.\nsidebar_position: 200\n:::info\nWe will be working on GCP support in the future. If you are interested in GCP support, please vote on this issue.\n:::"
  },
  {
    "id": 6,
    "text": "AWS\nGetting Started\nRegion\nArchitecture\nSecrets\nDeployment\nRuntime\ntitle: AWS\ndescription: Defang allows you to easily create and manage full, scalable applications with AWS.\nsidebar_position: 000\n:::info\nPublic Beta of the v1 Defang BYOC AWS Provider is released as of Feb 1 2024.\n:::\nWhy should you use Defang with AWS? Defang allows you to easily create and manage full, scalable applications with AWS. Defang aims to make it easier to deploy your services to the cloud. Don't waste your time learning the ins and outs of AWS, deciding which of the 200+ services to use, and then writing the infrastructure code to deploy your services, and making sure they are properly secured. Defang does all of that for you.\nGetting started with the Defang BYOC AWS Provider is easy. First, make sure you install the latest version of the Defang CLI. Then, make sure you have properly authenticated your AWS account. The Defang CLI will automatically check for environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. If they are set, the CLI will automatically use the Defang BYOC AWS Provider using the appropriate credentials. If you have credentials in the ~/.aws/credentials file, but nothing configured in environment variables, you can use the --provider=aws flag to tell the Defang CLI to use the AWS Provider.\n:::tip\nIf you have the aws CLI installed, you should be able to successfully run aws sts get-caller-identity and see your account ID.\n:::\n:::warning\nThe Defang CLI does not depend on the AWS CLI. It uses the AWS SDK for Go to interact with your AWS account. In most cases, if you can run the aws sts get-caller-identity from the tip above, you should be good to go. However, due to a difference between the AWS CLI and the AWS SDK for Go, there is at least one case where they behave differently: if you are using aws sso login and have clashing profiles in your .aws/config and .aws/credentials files, the AWS CLI will prioritize SSO profiles and caches over regular profiles, but the AWS SDK for Go will prioritize the credentials file, and it may fail.\n:::\nThe Defang BYOC AWS Provider will use the region specified in the AWS_REGION environment variable, or a profile in the ~/.aws/config file exactly as the AWS CLI would.\nDefang uses resources that are native to the cloud provider you are using. The following describes the current state of Defang's support for AWS, the specific resources that Defang uses, and the roadmap for future support.\nDefang allows you to configure your services with sensitive config values. Sensitive values are stored in AWS Systems Manager Parameter Store, and are encrypted.\nTo deploy your services, the Defang CLI packages your code and uploads it to an S3 bucket in your account. The CLI then deploys an ECS task that uses Pulumi to build your container image and run your service.\nThe provider runs your workloads using ECS using Fargate. It provisions a VPC with public and private subnets, and deploys your services to the private subnets. It then provisions an Application Load Balancer (ALB) and routes traffic to your services.\nAWS_PROFILE\nAWS_REGION\nAWS_ACCESS_KEY_ID\nAWS_SECRET_ACCESS_KEY\n~/.aws/credentials\n--provider=aws\naws sts get-caller-identity\naws sts get-caller-identity\naws sso login\n.aws/config\n.aws/credentials\nAWS_REGION\n~/.aws/config"
  },
  {
    "id": 7,
    "text": "Azure\ntitle: Azure\ndescription: Defang will allow you to easily create and manage full, scalable applications with Azure.\nsidebar_position: 100\n:::info\nWe will be working on Azure support in the future. If you are interested in Azure support, please vote on this issue.\n:::"
  },
  {
    "id": 8,
    "text": "Use Cases\nWeb Services and APIs\nMobile App Backends\nHosting LLMs\nAnti-patterns\nStateful Services\nData Stores\nsidebar_position: 100\ntitle: Use Cases\ndescription: Use cases for Defang.\nDefang can be used for a wide variety of use cases, generally in line with the 12 Factor architecture. In this section we'll document some examples. At the end of this section we will also cover use cases that are not supported by Defang.\nDefang can be used to deploy web services and APIs. You can use any programming language you like, and you can use the built-in AI assistant to help you get started.\nDefang is a great choice for stateless web services and APIs because it takes care of all the heavy lifting such as configuring networking, security, and observability, and will give you a nice, horizontally scalable deployment.\nIf you are using Defang BYOC, you can easily connect to databases, storage, and other services that you have running in your cloud account.\nA mobile app backend is a web service or API that is used by a mobile app. Defang is a great choice for mobile app backends because it helps you deploy horizontally scalable web services and APIs. It's also particularly useful for mobile app developers who aren't familiar with cloud infrastructure: you don't need to be a cloud expert, or even a web expert to use Defang and properly provision all the necessary infrastructure for your app's backend.\nLLMs (Large Language Models) are a type of AI model that can be used for a wide variety of tasks such as text generation, translation, summarization, and more. Defang can be used to host LLMs and provide an API for them. Configuring cloud providers like AWS to easily run containerized workloads that depend on GPUs can be quite challenging, but Defang makes it easy.\nWhile Defang is great for a wide variety of use cases, there are some use cases that are not a good fit for Defang. Generally, the use-cases that are Defang anti-patterns are the same as the ones that are 12 Factor anti-patterns. Here are some examples:\nSome applications are designed to run in stateful environments. For example, a CMS like WordPress can be coerced to work in a stateless environment, but most of the tooling for it expects to have a long-lived filesystem and a database. Defang is not a good fit for these types of applications, because containers are ephemeral and can be replaced at any time.\nDefang is not a good fit for data stores like databases, caches, and message queues. These types of services are designed to be long-lived and to store data. Defang is primarily designed for stateless workloads, and it's not a good fit for stateful workloads: if a container is replaced, all the data in it is lost. You could probably coerce a data store to work in a stateless environment with certain replication strategies, but it's not a good fit."
  },
  {
    "id": 9,
    "text": "Installing\nUsing Homebrew\nUsing a Bash Script\nUsing Winget\nDirect Download\nsidebar_position: 100\ntitle: Installing\ndescription: How to install Defang.\nDefang doesn't require installing anything in your cloud, but you will need to install the open source Defang command line interface (CLI) to interact with your Defang resources and account.\nWe offer a few different ways to install the Defang CLI. You can use Homebrew, a bash script, Winget, or download the binary directly.\nYou can easily install the Defang CLI using Homebrew. Run the following command in your terminal:\nYou can install the Defang CLI using a bash script. Run the following command in your terminal:\nThe script will try to download the appropriate binary for your operating system and architecture, add it to ~/.local/bin, and add ~/.local/bin to your PATH if it's not already there, with your permission. If you do not provide permission it will print an appropriate instruction for you to follow to add it manually. You can also customize the installation directory by setting the INSTALL_DIR environment variable before running the script.\nOn Windows, you can install the Defang CLI using winget. Run the following command in your terminal:\nYou can find the latest version of the Defang CLI on the releases page. Just download the appropriate binary for your operating system and architecture, and put it somewhere in your PATH.\nbrew install DefangLabs/defang/defang\n\n. <(curl -Ls s.defang.io/install)\n\n~/.local/bin\n~/.local/bin\nPATH\nINSTALL_DIR\nwinget\nwinget install defang\n\nPATH"
  },
  {
    "id": 10,
    "text": "Getting Started\nInstall the CLI\nAuthenticate with Defang\nAgree to the terms of service\nBuild and Deploy Services\nMonitor Services\nUpdate Services\nsidebar_position: 200\ntitle: Getting Started\ndescription: Get started with Defang.\nFirst, you'll need to install the Defang CLI. The CLI is the primary way to interact with Defang. It allows you to create, deploy, and manage your services. You can find the different installation methods here.\nTo do pretty much anything with Defang, you'll need to authenticate with the platform. You can do this by running the following command:\n:::info\nTo learn more about how authentication works in defang, check out the authenticating page.\n:::\nBefore you can deploy code you should read and agree to our the terms of service. You can do this by running:\nDefang supports various ways of creating and deploying services to the cloud. The following tutorials dive into each one in more detail:\nBy default, all the output (stdout and stderr) from your app is logged. You can view these logs in real-time. You can view logs for all your services, one service, or even one specific deployment of a service.\nFrom the CLI:\ntsx\ndefang tail --name service1\nFrom the Defang Portal:\nhttps://portal.defang.dev/ \n:::info\n* To learn more about observability in Defang, check out the observability page.\n* Note that the Defang Portal only displays services deployed to Defang Playground.\n:::\nTo update your app (for example, updating the base image of your container, or making changes to your code) you can run the defang compose up command and it will build and deploy a new version with zero downtime. Your current version of the service will keep running and handling traffic while the new version is being built and deployed. Only after the new version passes the health checks and accepts traffic will the older version be stopped.\n:::info\nIf you are using compose files to define your services, you can add/remove services, make changes to code, etc. When you run defang compose up, the update will be diffed against the current state and any necessary changes will be applied to make the current state match the desired state.\n:::\nDeploy an outline using AI\nBuild and deploy your code\nDeploy existing containers\nDeploy using Pulumi\n\nFrom the CLI:\ntsx\ndefang tail --name service1\n\n\nFrom the Defang Portal:\nhttps://portal.defang.dev/ \n\ndefang login\n\ndefang terms\n\ntsx\ndefang tail --name service1\ndefang compose up\ndefang compose up"
  },
  {
    "id": 11,
    "text": "Monitor a Service\nsidebar_position: 400\ntitle: Monitor Services\ndescription: Monitor services with Defang.\nBy default, all the output (stdout and stderr) from your app is logged. You can view these logs in real-time. You can view logs for all your services, one service, or even one specific deployment of a service.\nFrom the CLI:\ntsx\ndefang tail --name service1\nFrom the Defang Portal:\nhttps://portal.defang.dev/ \n:::info\n* To learn more about observability in Defang, check out the observability page.\n* Note that the Defang Portal only displays services deployed to Defang Playground.\n:::\n\nFrom the CLI:\ntsx\ndefang tail --name service1\n\n\nFrom the Defang Portal:\nhttps://portal.defang.dev/ \n\ntsx\ndefang tail --name service1"
  },
  {
    "id": 12,
    "text": "Authenticating\nsidebar_position: 200\ntitle: Authenticating\ndescription: Authenticate with Defang.\nTo do pretty much anything with Defang, you'll need to authenticate with the platform. You can do this by running the following command:\nThis will prompt you to open a browser and log into your Defang account. For now, the only way to login is with GitHub, though we will offer other providers to authenticate in the future. Once you've logged in, you can close the browser and return to the terminal. You should see a message that you've successfully logged in.\n:::warning\nKeep in mind that your Defang account is separate from your cloud provider account. You will need to authenticate with your cloud provider account separately to deploy services to your own cloud account.\n:::\ndefang login\n"
  },
  {
    "id": 13,
    "text": "Update Services\nsidebar_position: 500\ntitle: Update Services\ndescription: Update services with Defang.\nTo update your app (for example, updating the base image of your container, or making changes to your code) you can run the defang compose up command and it will build and deploy a new version with zero downtime. Your current version of the service will keep running and handling traffic while the new version is being built and deployed. Only after the new version passes the health checks and accepts traffic will the older version be stopped.\n:::info\nIf you are using compose files to define your services, you can add/remove services, make changes to code, etc. When you run defang compose up, the update will be diffed against the current state and any necessary changes will be applied to make the current state match the desired state.\n:::\ndefang compose up\ndefang compose up"
  },
  {
    "id": 14,
    "text": "Build and Deploy Services\nsidebar_position: 300\ntitle: Build & Deploy Services\ndescription: Build and deploy services with Defang.\nDefang supports various ways of creating and deploying services to the cloud. The following tutorials dive into each one in more detail:\nCreate an outline using AI\nBuild and deploy your code\nDeploy an existing container\nDeploy using Pulumi"
  },
  {
    "id": 15,
    "text": "Resources\nExamples\nDocker Compose\nPulumi\ntitle: Resources\ndescription: Customize the resources your Defang services use.\nsidebar_position: 350\nYou can configure the resources available to your Defang services as required. You can configure the CPU, memory, and disk space allocated to your services as well as the number of replicas and whether or not your services requires access to GPUs.\n:::info GPUs\nIf you require access to GPUs, you can specify this in the deploy.resources.reservations.devices[0].capabilities section of your service as in the examples above. You can learn more about this in the docker-compose documentation. This is the only supported value in the deploy.resources.reservations.devices section.\n:::\nservices:\n  gpu-service:\n    deploy:\n      replicas: 3\n      resources:\n        reservations:\n          cpus: '1.0'\n          memory: 2048M\n          devices:\n            - capabilities: [\"gpu\"]\n\nconst service = new defang.DefangService(\"gpu-service\", {\n  deploy: {\n    replicas: 3,\n    resources: {\n        reservations: {\n            cpu: 1.0,\n            memory: 2048,\n            devices: [{capabilities: ['gpu']}]\n        }\n    }\n  }\n});\n\ndeploy.resources.reservations.devices[0].capabilities\ndeploy.resources.reservations.devices"
  },
  {
    "id": 16,
    "text": "Deployment\nDeploying Updates\nInstance Types\ntitle: Deployment\ndescription: Defang will build your services in the cloud and manage the deployment process for you.\nsidebar_position: 500\nWhen you deploy using Defang, whether it's with defang compose up with a compose file or using a Pulumi program, Defang will build your services in the cloud and manage the deployment process for you. If you provide a Dockerfile and build context, Defang will upload the files found within the build context to the cloud (either yours in Defang BYOC or ours in Defang Playground), build the image, and store it in the cloud provider's container registry. \nWhen you run a deployment to update one or more services, Defang will also make sure to get your new services up and running before deprovisioning any old services so you don't have to worry about downtime.\n:::info\nIn Defang BYOC, Defang will use your cloud provider account to build and store your images. In Defang Playground we will build and store your images for you.\n:::\n:::warning\nWorkloads with GPUs do not support zero downtime deployments. If you have a workload with a GPU, you will experience downtime during updates.\n:::\nDefang defaults to \"spot\" instances. This is a cost-effective way to run your workloads, but it does mean that your workloads can be interrupted at any time. This is consistent with the 12 Factor principle of disposability. \n:::info\nIn the future, we may provide a way to use \"on-demand\" instances for workloads that require more stability.\n:::\ndefang compose up"
  },
  {
    "id": 17,
    "text": "Pulumi\nDefang Pulumi Provider\nSample\ntitle: Pulumi\ndescription: Define your Defang services with Pulumi to integrate with other cloud resources.\nsidebar_position: 175\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n:::warning\nPulumi support is currently only available for Defang Playground. We are working on support for Defang BYOC.\n:::\nYou can use Pulumi to define your Defang services. This allows you to integrate your Defang services with other cloud resources.\nFor example, you might define an Aiven PostgreSQL database in your Pulumi code and then use the outputs of that resource to configure the secrets to connect to the database in your Defang service.\nIt also allows you to manage configuration for different environments using Pulumi's config system.\nTo get started with Pulumi and Defang you will need to install the Defang provider in your Pulumi project:\n\n\n\n\n\n\n\n\nThe following is a minimal example of a Pulumi program that defines a Defang service:\nnpm i @defang-io/pulumi-defang\n\npnpm i @defang-io/pulumi-defang\n\nyarn add @defang-io/pulumi-defang\n\nimport * as defang from \"@defang-io/pulumi-defang/lib\";\n\nconst service = new defang.DefangService(\"my-service\", {\n    image: \"strm/helloworld-http:latest\",\n    ports: [{\n        target: 80,\n        mode: \"ingress\",\n        protocol: \"http\",\n    }],\n});\n"
  },
  {
    "id": 18,
    "text": "Networking\nInternal Communication\nSample Configuration\nInternal DNS\ntitle: Networking  \ndescription: Defang helps you safely configure your services' networking.\nsidebar_position: 300\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nDefang configures Security Groups, deploys applications to a private subnet and uses an Application Load Balancer to route traffic to your services from the public internet only when required.\n:::tip\nThis page is about internal networking only. If you want to configure your services to be accessible from the public internet, check the domains page.\n:::\nYou can expose ports in your service definition to allow other services to communicate with it. Similar to public communication, you can use the ports section of your service definition, but set the mode to host instead of ingress to allow other services to communicate with it through the internal network.\n\n\n\n\n\n\nInternal communication is handled slightly differently between the Defang Playground and Defang BYOC.\n\n\nInternal communication between services in the Defang Playground follows the following pattern:\n\n\nInternal communication between services in Defang BYOC follows the following pattern:\n\n\nports\nmode\nhost\ningress\nservices:\n    # [...]\n    service1:\n        ports:\n        - mode: host\n          target: 3000  \n          protocol: http\n\nconst service = new defang.DefangService(\"service1\", {\n    // [...]\n    ports: [{\n        target: 3000,\n        mode: \"host\",\n        protocol: \"http\",\n    }],\n});\n\nhttp://<username>-<service-name>:<port>\n\nhttp://<service-name>:<port>\n"
  },
  {
    "id": 19,
    "text": "Domains\nDefang-hosted Domains\nStructure\nSample Configuration\nBring Your Own Domain\nSample Configuration\ntitle: Domains  \ndescription: Defang helps you provision SSL certificates and expose your services to the internet.\nsidebar_position: 280\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nDefang helps you provision SSL certificates and expose your services to the internet. You can expose your services using Defang-hosted domains or bring your own custom domain with Defang BYOC. This page explains how to configure your services to be accessible from the public internet. \nTo make your service accessible from the public internet with Defang-hosted domains (under defang.app), you simply expose ports in your service definition. \nDefang-hosted domains use a structure that is based on your username and service name. \n\n\nIf you have a publicly accessible service, you will automatically receive a domain to access it. If you're deploying to the Defang Playground, your domain will be structured as follows:\n\n\nIf you're using Defang BYOC, your domain will be:\n\n\n\n\n\n\n:::warning\nAs of now, the Pulumi provider does not support Defang BYOC.\n:::\n\n\nIf you are using Defang BYOC, you can bring your own custom domain to use with your services. \nThere are two main limitations to keep in mind when using Defang BYOC:\n  1. You can only use one domain per service.\n  2. Currently you must host your domain's DNS with the provider you are using.\n      * AWS documentation on public hosted zones\n:::tip NS Records\nIf you want to use your existing DNS provider for other aspects of your system, you can do so and just point a subdomain to your provider's nameservers using NS records.\n:::\n\n\n\n\n:::warning\nAs of now, the Pulumi provider does not support Defang BYOC and the Defang Playground does not support bringing your own domain, since it is not for production use.\n:::\n  \n\ndefang.app\nhttps://<username>-<service-name>--<port>.defang.dev\n\nhttps://<service-name>--<port>.username.defang.app\n\nservices:\n    # [...]\n    serviceName:\n        ports:\n        // highlight-start\n        - mode: ingress\n          target: 3000  \n          protocol: http\n        // highlight-end\n\nconst service = new defang.DefangService(\"serviceName\", {\n    // [...]\n    ports: [{\n        target: 3000,\n        mode: \"ingress\",\n        protocol: \"http\",\n    }],\n});\n\nservices:\n    # [...]\n    serviceName:\n        // highlight-next-line\n        domainname: example.com\n        ports:\n        // highlight-start\n        - mode: ingress\n          target: 3000  \n          protocol: http\n        // highlight-end\n"
  },
  {
    "id": 20,
    "text": "Portal\ntitle: Portal\ndescription: You can log into the Defang portal to view the state of your defang services.\nsidebar_position: 700\nYou can log into the Defang portal at portal.defang.dev using your Defang account to view the state of your Defang services running in the Defang Playground for non-production applications.\nYou can use the portal to get an overview of your services, view the logs for each service, quickly access exposed ports, view environment variables, and more.\n:::info\nWe will make sure you have access to the tools required to debug your services in production. At the moment we're not entirely sure what that will look like, beyond defang tail to view logs, but we're working on it!\n:::\ndefang tail"
  },
  {
    "id": 21,
    "text": "Accounts\nCreating an Account\nStructure\ntitle: Accounts\ndescription: How accounts are organized in Defang.\nsidebar_position: 100\nIn this section, we'll be talking about a couple different topics related to accounts in Defang. First we'll cover authentication and how to create an account, and then we'll talk about how resources are organized within a cloud environment using your account info.\n:::tip Why do I need an account?\nDefang requires an account so we can organize your resources and provide you with a way to manage them. We also use your account to authenticate you when you interact with Defang Playground and the Defang Portal.\nEventually, billing and payment information will be associated with your account.\n:::\nTo create an account, simply login to Defang and accept the terms of service using the CLI.\nAt the moment, the only way to authenticate with Defang is through GitHub. We plan to offer other authentication providers in the future.\nYour GitHub username will be used as your Defang username and your Defang username is used to group all your services and to generate domains for your services with the following structure:\n:::warning\nKeep in mind that your Defang account is separate from your cloud provider account. You will need to authenticate with your cloud provider account separately to deploy services to your own cloud account.\n:::\n:::info\nWe plan to introduce a more robust system for managing accounts, permissions, service groups, etc. in the future.\n:::\n<username>-<servicename>--<port>.prod1.defang.dev\n"
  },
  {
    "id": 22,
    "text": "Compose\nHow it works\nService Name Resolution\nConfiguration\ntitle: Compose\ndescription: Defang allows you to use the compose.yaml specification to deploy your application to the cloud.\nsidebar_position: 150\nYou might be familiar with docker-compose.yml files, now known as the Compose specification and compose.yaml files. It's a simple way to define and run multi-container Docker applications. Defang allows you to use compose.yaml files to deploy your application to the cloud.\nYou can define your services using a compose.yaml file in the root of your project, or use the defang generate command to generate one (along with other resources). This file is used to define your application's services and how they run. You can edit this file to add more services or change the configuration of existing services.\nWhen you run defang compose up, Defang will read your compose.yaml file and deploy the services named in that file to the cloud.\nOne thing to keep in mind is that, at the time of this writing, Defang identifies services by the user/account name and the service name (as defined in the compose.yaml file). This means that if you have multiple Defang projects with the same service name, they will conflict with each other. We plan to provide a more robust system for managing service names and protecting against conflicts in the future.\nIf you have a service that depends on a secret like an api key, you can set that secret using the CLI:\nand then connect it to the service by specifying it in the compose.yaml:\n:::info Configuration & Secrets\nRead more about configuration in the configuration page and about secrets in the secrets page.\n:::\ndocker-compose.yml\ncompose.yaml\ncompose.yaml\ncompose.yaml\ndefang generate\ndefang compose up\ncompose.yaml\ncompose.yaml\ndefang config set --name MY_API_KEY\n\ncompose.yaml\nservices:\n  my-service:\n    secrets:\n      - MY_API_KEY\n\nsecrets:\n  MY_API_KEY:\n    external: true\n"
  },
  {
    "id": 23,
    "text": "Configuration\nSensitive Config aka Secrets\nConnecting Services\nProviders\ntitle: Configuration\ndescription: Configuring your Defang application, including sensitive config values like API keys, passwords, and other credentials.\nsidebar_position: 225\nDefang allows you to configure your application using environment variables. You can set environment variables in your compose.yaml file, or in your Pulumi program. Using Pulumi gives you the advantage of being able to manage your environment variables across different environments using Pulumi stacks.\n:::tip Sample\nYou can find a sample of how to set environment variables with Pulumi here.\n:::\nThe Defang CLI allows you to securely store sensitive information such as API keys, passwords, and other credentials.\nYou can use sensitive config by specifying them in the environment section of a service in a compose.yaml file without any value, or by specifying an environment key with a null value in your Pulumi code.\nUse the defang config command of the Defang CLI to manage the values.\nIf you have created a service before a secret you can connect it by running the defang compose start command if using the defang compose workflow. If you are using the Pulumi-based workflow you will need to redeploy using Pulumi.\n:::tip Sample\nYou can find a sample of how to set sensitive config values here.\n:::\nHere are the different ways sensitive config values are stored depending on the provider you are using:\ncompose.yaml\nenvironment\ncompose.yaml\nnull\nservices:\n  service1:\n    image: image1:latest\n    environment:\n      - API_KEY\n\ndefang config\ndefang compose start\ndefang compose\n* [AWS](../providers/aws.md#secrets)\n"
  },
  {
    "id": 24,
    "text": "Defang Playground\nLimitations\nNo Custom Domain Support\nMax Resources\ntitle: Defang Playground\ndescription: Defang Playground allows you to get a feel for how Defang works without running production workloads in your own cloud accounts.\nsidebar_position: 00\nDefang aims to make it easier to deploy your services to the cloud. Specifically, Defang's goal is to make it easier to deploy your workloads to your own cloud accounts. We refer to this as bring-your-own-cloud (BYOC) which you can read about in more depth here. We also provide Defang Playground, but it is only intended for non-production workloads so you can get a feel for how Defang works. \nDefang Playground is a free tier that allows you to deploy services to a Defang-hosted cloud account without needing to manage your own. It is intended for non-production workloads only.\n:::warning\nPlease note that the Defang Playground is intended for testing/learning purposes only. The environment may be reset at any time. Do not run production workloads in Defang Playground.\n:::\nThere are a few limitations to Defang Playground. These limitations are in place to ensure that Defang Playground is only used for non-production workloads. If you are interested in running production workloads, you should use Defang BYOC.\nWhen you deploy a service to Defang Playground, it will be assigned a domain under the defang.dev domain. We do not support pointing your own domains to Defang Playground services.\nServices: 5\nCPUs: 2\nMemory: 8GB\nReplicas: 2\ndefang.dev"
  },
  {
    "id": 25,
    "text": "Services\ntitle: Services\ndescription: Defang allows you deploy services, defined as containers, to the cloud.\nsidebar_position: 200\nDefang allows you deploy services defined as containers. You can define your services using a compose file or a Pulumi program. Services can be exposed to the internet or kept private, and can communicate between themselves using the following conventions for hostnames:\n<username>-<service-name>\nYou can learn more about accounts and usernames in the accounts page.\n:::tip Service Names\nService names are defined in your compose file or your Pulumi program.\n:::\nYou can learn more about about how to define services with compose files here and services with Pulumi here. You can learn more about how services are deployed in the deployment page.\n:::info\nWhile this is the current state of the Defang model, we plan to add support for other types of services in the future, including serverless functions.\n:::\n<username>-<service-name>"
  },
  {
    "id": 26,
    "text": "Defang BYOC\nAWS\nAzure\nGCP\ntitle: Defang BYOC\ndescription: Defang allows you deploy services, defined as containers, to your own cloud accounts.\nsidebar_position: 50\nDefang aims to make it easier to deploy your services to the cloud. Specifically, Defang's goal is to make it easier to deploy your workloads to your own cloud accounts. We refer to this as bring-your-own-cloud (BYOC). We also provide Defang Playground, but it is only intended for non-production workloads so you can get a feel for how Defang works.\nDefang provisions and configures the necessary native managed services from your cloud provider to get your services up and running. For example, on AWS, Defang will configure an ALB, setup ECR, configure CloudWatch, and run your service on ECS and more. The following lists the existing and planned support for cloud providers.\n:::info\nDefang does not install or run any Defang or third party services at runtime.\nDefang does run the Defang build service to build your container images, which terminates after every build.\n:::\n:::info\nPublic Beta of the v1 Defang BYOC AWS Provider is released as of Feb 1 2024.\n:::\nPlease read the AWS Provider documentation for more details about how the AWS provider works and how to get started.\n:::info\nWe will be working on Azure support in the future. If you are interested in Azure support, please vote on this issue.\n:::\n:::info\nWe will be working on GCP support in the future. If you are interested in GCP support, please vote on this issue.\n:::"
  },
  {
    "id": 27,
    "text": "Observability\nTail\nArchitecture\ntitle: Observability\ndescription: Monitor and debug your Defang services with the Defang CLI and portal.\nsidebar_position: 600\nYou can easily monitor and debug your Defang services at build and runtime using the Defang CLI and portal.\nWhen you deploy a service using the defang compose up the CLI will automatically start tailing the build and runtime logs for your service. You can also view the logs for your service in the portal, or by using the defang tail command.\n:::warning\nKeep in mind that the Defang Portal only displays services deployed to Defang Playground.\n:::\nThe defang tail command will tail the logs for all your services by default. You can also specify a service --name to tail the logs for a specific service. If you specify the --etag the CLI will only tail the logs for a specific build of a service.\nIn BYOC, output is logged to the native logging tools within your cloud provider. The CLI then tails the output as needed.\ndefang compose up\ndefang tail\ndefang tail\n--name\n--etag\ndefang tail --name my-service\ndefang tail --etag ua119053ehi2\n"
  },
  {
    "id": 28,
    "text": "Security\nRoles & Permissions\nNetworking\nTLS\nSecrets\ntitle: Security  \ndescription: Defang configures your cloud applications and services with security best practices.\nsidebar_position: 275\nDefang's philosophy is to operate on a principle of \"least-privilege\". This means that we only give your services the permissions they need to operate.\nBecause Defang creates roles, you need to have the appropriate permissions to create roles in your cloud provider account, typically the AdministratorAccess policy in AWS.\n:::tip\nBest practice is to run the Defang CLI in a CI/CD environment and to restrict deployment permissions at that level.\n:::\nDefang creates roles for your services to use, and attaches policies to those roles. This means that your services only have the permissions they need to operate, and nothing more.\nDefang configures Security Groups, deploys applictions to a private subnet and uses an Application Load Balancer to route traffic to your services from the public internet only when required. \nDefang automates the process of obtaining and renewing TLS certificates for your services using AWS Certificate Manager.\nSecrets are stored in AWS Systems Manager Parameter Store, and are encrypted using a key stored in AWS Key Management Service (KMS).\nAdministratorAccess"
  },
  {
    "id": 29,
    "text": "AI\nExample Prompts\ntitle: AI\ndescription: How Defang uses AI to help you build and deploy your cloud applications.\nsidebar_position: 100\nDefang includes an AI-driven assistant that translates natural language prompts to an outline for your project that you can then refine. The AI assistant is available through the Defang CLI.\n:::info\nThe AI assistant is currently in beta and only supports a limited set of prompts. We plan to expand the capabilities of the AI assistant in the future.\n:::\nWe are working on expanding the range of supported prompts and improving the accuracy of the AI assistant. If you have any feedback or suggestions, please let us know by opening an issue.\nHere are some example prompts that the AI assistant can help you with:\nA basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { \"status\": \"OK\" }. The /echo endpoint will echo back all request parameters in the response.\n\nA simple service that runs in the cloud and serves a web page\n\nA simple flask app with one route that responds with a json object\n\nA simple next.js app that serves a static page\n\nA simple api with a single route built on express\n"
  },
  {
    "id": 30,
    "text": "Deploy using Pulumi\nInstalling Dependencies\nProject Directory Setup\nInitialize the Project\nInstall the Defang Provider\nWrite the Pulumi Code\nDeploy to Defang\nMonitor the Deployment\nLogging Into Minio\nClean Up\ntitle: Build and deploy using Pulumi\nsidebar_position: 400\nMake sure to install the Pulumi CLI and the Defang CLI.\nMake sure you are logged into the Defang CLI. Don't worry about the Pulumi CLI for now.\nCreate a new directory for your project and navigate to it.\nIf you're familiar with Pulumi and/or are already logged in with the Pulumi CLI, you can skip the next step.\nIf you are new to pulumi and/or don't have an account, you can \"login\" to the filesystem by running the following command:\nThis will make the Pulumi CLI store the state of your infrastructure in the current directory.\nRun the following command to set your encryption passphrase for this terminal session:\nNow let's initialize the Pulumi project:\nThis will create a new Pulumi project in the current directory and will create a Pulumi stack called dev by default. We use the --force flag because the directory isn't empty (we created a folder when we logged in with the Pulumi CLI).\nRun the following command to add to the .gitignore file:\nRun the following command to install the Defang provider:\nYour index.ts file should look like this:\n:::warning\nAt the time of writing, the Defang Pulumi Provider only works with Defang Playground. We are working on BYOC support.\n:::\nRun the following command to deploy your service:\nYou can monitor the deployment by running the following command:\nThe Defang Playground will give you a domain, which you can obtain by running the following command:\nIf you navigate to the domain in your browser, you will be prompted to log in. Use the username minio and the password minio123.\nTo clean up the deployment, run the following command:\nmkdir project && cd project\n\npulumi login file://./\n\nexport PULUMI_CONFIG_PASSPHRASE=\"super-secure-passphrase\"\n\npulumi new typescript -y --force\n\ndev\n--force\n.gitignore\necho \".pulumi\" >> .gitignore\n\nnpm install @defang-io/pulumi-defang\n\nindex.ts\nimport * as defang from '@defang-io/pulumi-defang/lib';\n\nexport const service = new defang.DefangService('minio', {\n    name: 'minio',\n    image: 'quay.io/minio/minio',\n    // starts the server with the console address set to :9001\n    command: ['server', '--console-address', ':9001', '/data'],\n    // Set the root username\n    environment: {\n        MINIO_ROOT_USER: 'minio',\n    },\n    secrets: [\n        // Set the root password as a secret which will be encrypted at rest\n        {\n            source: 'MINIO_ROOT_PASSWORD',\n            value: 'minio123',\n        },\n    ],\n    // Run a healthcheck every 30 seconds\n    healthcheck: {\n        test: ['CMD', 'curl', 'http://localhost:9000/minio/health/live'],\n        interval: 30,\n        timeout: 5,\n        retries: 3,\n    },\n    // Expose the server on port 9000 and the console on port 9001\n    ports: [\n        {\n            target: 9000,\n            protocol: 'http',\n            mode: 'ingress',\n        },\n        {\n            target: 9001,\n            protocol: 'http',\n            mode: 'ingress',\n        },\n    ],\n});\n\npulumi up --stack=dev\n\ndefang tail --name minio\n\ndefang ls | grep 'minio.*9001'\n\nminio\nminio123\npulumi destroy --stack=dev\n"
  },
  {
    "id": 31,
    "text": "Deploy Code Using a Docker Compose File\nStep 1 - Create main.js\nStep 2 - Create Dockerfile\nStep 3 - Create compose.yaml\nStep 4 - Deploy\ntitle: Build and deploy code\nsidebar_position: 100\nThis tutorial assumes that the code normally gets built into a container and has a Dockerfile file in the current folder.\nIf you already have a Docker Compose file for your service(s) you can use it directly. Here is a tutorial that shows you a simple example of how to deploy a node.js service using a Docker Compose file and a single js file.\nLet's create a simple node.js service which listens on port 3000 and returns a welcome message. Create a file called main.js with the following content:\nLet's create a Dockerfile to build the node.js service. We'll use the official Node runtime based on Alpine as a parent image. Create a file called Dockerfile with the following content:\nLet's create a Compose file to deploy the node.js service. We'll call the service minimal and expose port 3000. Create a file called compose.yaml with the following content:\nNow that we have the code and the Docker Compose file, we can deploy the service using the defang compose up command. This will bundle the code into a container and deploy it with Defang. If you have cloud credentials configured, the service will be deployed to AWS. If you don't have AWS credentials set up, the service will be deployed to Defang Playground.\nmain.js\nconst http = require('http');\n\nconst server = http.createServer((req, res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain');\n    res.end('Welcome to Defang\\n');\n});\n\nserver.listen(3000, '0.0.0.0', () => {\n    console.log('Server running at http://127.0.0.1:3000/');\n});\n\nDockerfile\n# Use an official Node runtime based on Alpine as a parent image\nFROM node:18-alpine\n\n# Set the working directory to /app\nWORKDIR /app\n\n# Copy the current directory contents into the container at /app\nCOPY . .\n\n# Run the app when the container launches\nENTRYPOINT [ \"node\", \"main.js\" ]\n\ncompose.yaml\nversion: '3.9'\nservices:\n  minimal:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - mode: ingress\n        target: 3000        \n\ndefang compose up\ndefang compose up\n"
  },
  {
    "id": 32,
    "text": "Deploy a GPU-powered application with Defang\nPrerequisites\nAWS Account with GPU Access\nHuggingFace Token\nStep 1: Clone the sample project\nStep 2: Check your Defang BYOC settings\nStep 2: Prepare your Environment\nStep 3: Explore the Compose File\nThe Mistral Service\nThe UI Service\nStep 4: Deploy to Your Own AWS Account with Defang\ntitle: Deploy a GPU-powered application\nsidebar_position: 500\nThis tutorial guides you to create and deploy a GPU-powered application on AWS using Defang and Mistral. We will walk you through the whole deployment process based on this Deploying Mistral with vLLM sample.\nFor any of this to work, you'll need to have access to GPU instances in your AWS account. To do that you'll need to go to the \"Service Quotas\" console in your AWS account. From there you can request access to spot GPU instances. You'll need to request 8 or more because the value is per vCPU and the smallest GPU instance has 8 vCPUs. The instance types you're requesting are \"All G and VT spot instances\".\n:::warning Timing\nThis process can take a few days for AWS to approve.\n:::\n\nThis sample requires a HugoingFace token to download the model. You can get a token by signing up at HuggingFace and then going to your settings to get your token.\nYou'll need to clone this sample to go through this tutorial.\nIf you use the AWS CLI, you can verify that your are authenticated against AWS using the following command (note that the AWS CLI itself is not required to use the defang cli in BYOC mode):\nConfiguration stores your sensitive information such as API keys, passwords, and other credentials for you.\nThe compose.yml file is where you define your services and their configurations.\nIn there you'll see the configuration we're using to deploy the Mistral model. We've highlighted some of the key aspects.\nLet's break it down.\nWe start with the latest vLLM docker image provided by Mistral AI.\nWe specify that we require a GPU to run our application.\nThe Mistral model will be downloaded from HuggingFace. We need to have a HuggingFace Token to enable the installation, so we specify that we need to get the HF_TOKEN configuration value from Defang.\nSpecifying the HF_TOKEN in the environment section of the service in the compose.yml file tells Defang to fetch the value from the encrypted configuration store.\nIn this sample we also provide a simple UI to interact with the endpoint created by vLLM. The UI service is a Next.js application that runs on port 3000.\n:::tip Networking\nYou can see here how Defang's networking works. The mistral service is available at http://mistral:8000, exactly as it would be in a local docker-compose environment.\n:::\nRun the following command to deploy your service:\nMake sure you install the latest version of the Defang CLI\nThen, make sure you have properly authenticated your AWS account. The Defang CLI makes use of AWS environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY, so make sure the correct values are set for those.\nLog into your Defang account\nSet the HuggingFace token using the defang config command\nAWS_PROFILE\nAWS_REGION\nAWS_ACCESS_KEY_ID\nAWS_SECRET_ACCESS_KEY\naws sts get-caller-identity\n\ndefang login\n\ndefang config\ndefang config set --name HF_TOKEN\n\ncompose.yml\nservices:\n    mistral:\n        // highlight-next-line\n        image: ghcr.io/mistralai/mistral-src/vllm:latest\n        ports:\n            - mode: host\n              target: 8000\n        // highlight-next-line\n        command: [\"--host\",\"0.0.0.0\",\"--model\",\"TheBloke/Mistral-7B-Instruct-v0.2-AWQ\",\"--quantization\",\"awq\",\"--dtype\",\"auto\",\"--tensor-parallel-size\",\"1\",\"--gpu-memory-utilization\",\".95\",\"--max-model-len\",\"8000\"]\n        deploy:\n            resources:\n                reservations:\n                    cpus: '2.0'\n                    memory: 8192M\n                    devices:\n                    // highlight-next-line\n                        - capabilities: [\"gpu\"]\n            healthcheck:\n                test: [\"CMD\",\"curl\",\"http://localhost:8000/v1/models\"]\n                interval: 5m\n                timeout: 30s\n                retries: 10\n            // highlight-start\n            environment:\n              - HF_TOKEN\n            // highlight-end\n\nmistral:\n    image: ghcr.io/mistralai/mistral-src/vllm:latest\n\ndeploy:\n    resources:\n        reservations:\n            cpus: '2.0'\n            memory: 8192M\n            devices:\n                - capabilities: [\"gpu\"]\n\nHF_TOKEN\nHF_TOKEN\nenvironment\ncompose.yml\nenvironment:\n    - HF_TOKEN\n\nmistral\nhttp://mistral:8000\ndocker-compose\n  ui:\n    restart: unless-stopped\n    build:\n      context: ui\n      dockerfile: Dockerfile\n    ports:\n      - mode: ingress\n        target: 3000\n    deploy:\n      resources:\n        reservations:\n          memory: 256M\n    healthcheck:\n      test: [\"CMD\",\"wget\",\"--spider\",\"http://localhost:3000\"]\n      interval: 10s\n      timeout: 2s\n      retries: 10\n    environment:\n      // highlight-next-line\n      - OPENAI_BASE_URL=http://mistral:8000/v1/\n\ndefang compose up\n"
  },
  {
    "id": 33,
    "text": "Defang with Codespaces and GitPod\nGetting Started with Github Codespaces and Defang\nStep 1: Clone the Defang Codespace Project\nStep 2: Create a Codespace\nStep 3: Open in VS Code Desktop\nStep 4: Run Defang Login\nStep 5: Verify Running Services\nGetting Started with GitPod Workspace with Defang\nStep 1: Clone the Defang GitPod Workspace Project\nStep 2: Initialize GitPod Workspace\nStep 3: Lauch VS Code from GitPod\nStep 4: Run Defang Login\nStep 5: Verify Running Services\ntitle: Using Codespaces and Gitpod\nsidebar_position: 700\nThis tutorial will guide you to set up Defang in both Codespaces and Gitpod.\nStart by cloning the Defang Github-Codespace repo and pushing it to your own account. This repository is configured with a Codespace that has Defang pre-installed.\nOnce you've pushed to your own GitHub repo, you'll be able to create a Codespace by clicking the Code button, selecting the Codespaces tab, and clicking the + icon. This will set up a development environment with Defang already installed, which might take a few minutes.\n\nFor the defang login command to work correctly, you must open the Codespace in VS Code desktop. This is required because the login process is designed to run on localhost.\n\nWithin a VS Code desktop terminal, execute the following command.\nAlthough it may initially refuse to connect on your localhost, going back will show a \"successfully logged in\" message, confirming that you're logged into Defang.\nNow that you're logged in, you can use Defang commands. You can test that everything is working properly by running defang ls to list your running services.\nStart by cloning the Defang Gitpod-Workspace repo and pushing it to your own GitHub, GitLab, or BitBucket account. This repository includes a Workspace configuration that pre-installs Defang.\nNavigate https://gitpod.io/#<your-repo-url> to create your new workspace.\nIn the repository, we have a yaml file indicating that we are using a pre-built dockerfile which installs Defang CLI for you.\nOpen VS Code from GitPod, you will likely need to have the GitPod VS Code extension installed.\n\n\nWithin a VS Code desktop terminal, execute the following command.\nNow that you're logged in, you can use Defang commands. You can test that everything is working properly by running defang ls to list your running services.\ndefang login\ndefang login\n\ndefang ls\nhttps://gitpod.io/#<your-repo-url>\ndefang login\n\ndefang ls"
  },
  {
    "id": 34,
    "text": "Deploy container using the CLI\nStep 1 - Docker Compose\nStep 2 - Deploy\ntitle: Deploy pre-built container\nsidebar_position: 200\nThis example is useful if you already have a Docker container built manually or through a CI/CD system and have that the resulting image is available in a public or private repository accessible by Defang.\nIf you already have a Docker Compose file for your service(s) you can use it directly. Else you can create one like this:\nversion: '3.9'\nservices:\n  service1:\n    # This is just an example, replace with the image you want\n    image: \"docker.io/nginx:latest\"\n    ports:\n      - mode: ingress\n        target: 3000        \n\ndefang compose up\n"
  },
  {
    "id": 35,
    "text": "Deploy an outline using AI\nStep 1 - Use the CLI generate command\nStep 2 - Review the Code\nStep 3 - Build and Deploy\ntitle: Deploy an outline using AI\nsidebar_position: 50\nDefang supports generating new project outlines using integration with an AI model. Using this feature, you can describe what you would like the service to do and the CLI will then generate a project outline with all the files required to make it work.\nIn this tutorial we'll use the following prompt:\nA basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { \"status\": \"OK\" }. The /echo endpoint will echo back all request parameters in the response.\nThis will generate the different files required to start your project based on your prompt and the language selected.\nChange into the new project folder:\nYou can open the files in a code editor to review or make changes as needed before deploying the service.\n{ \"status\": \"OK\" }\ndefang generate\n\n? Choose the language you'd like to use:  [Use arrows to move, type to filter, ? for more help]\n> Nodejs\n  Golang\n  Python\n\n? Choose a sample service:\nGenerate with AI\n\n? Please describe the service you'd like to build: [? for help] \nA basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { \"status\": \"OK\" }. The /echo endpoint will echo back all request parameters in the response.\n\n? What folder would you like to create the service in? [? for help] (service1)\nproject1\n\ncd project1\n\ndefang compose up\n"
  },
  {
    "id": 36,
    "text": "How to Use Your Own Domain\nStep 1 : Check your Defang BYOC settings\nStep 2: Setup a Hosted Zone in AWS Route 53\nStep 3: Configure your DNS settings in your domain registrar\nStep 4: Set up Your Compose File\nStep 5: Deploy\ntitle: How to use your own domain\nsidebar_position: 600\nIn our latest version of Defang BYOC (Bring Your Own Cloud), you can now use your own domain name. (Currently, this new feature is not applicable to Defang Playground)\nIf you use the AWS CLI, you can verify that your are authenticated against AWS using the following command (note that the AWS CLI itself is not required to use the defang cli in BYOC mode):\n:::info\nIf you purchased your domain with AWS, you can skip this step.\n:::\nFor Defang to be able to manage your domain, you need to create a public hosted zone in AWS Route 53. It should list four AWS nameservers and should look like this:\n\n:::info\nIf you purchased your domain with AWS, you can skip this step.\n:::\nYou'll need to create NS records in your domain registrar that point to the AWS Route 53 name servers which we got in the previous step. For example, in CloudFlare, the NS records would look like this:\n\nIn your compose file, specify the domain name you want to use, for example\nRun the following command to deploy your service:\nThis will deploy your service and set up the necessary DNS records in Route 53 as seen in the screenshot below as well as provision SSL certificates. You can now access your service at the domain you specified in your compose file.\n\nMake sure you install the latest version of the Defang CLI\nThen, make sure you have properly authenticated your AWS account. The Defang CLI makes use of AWS environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY, so make sure the correct values are set for those.\nAWS_PROFILE\nAWS_REGION\nAWS_ACCESS_KEY_ID\nAWS_SECRET_ACCESS_KEY\naws sts get-caller-identity\n\nservices:\n    web:\n        domainname: nextjs.defang.chewydemos.com\n        build:\n            context: ./web\n            dockerfile: Dockerfile\n        ports:\n            target: 3000\n            mode: ingress\n\ndefang compose up\n"
  },
  {
    "id": 37,
    "text": "Windows Experience Improvements\nOne-click Deploy\nManaged Redis Updates\nUpdated Samples\nCLI Updates\nOther Updates\nslug: july-2024-product-update\ntitle: July 2024 Product Update \ntags: [Cloud, NoDevOps, BYOC, Windows, Managed Redis, CLI]\nauthor: Defang Team\nHey folks! We've got another batch of updates to share with you about what the Defang team has been working on over the past month. We're committed to improving your deployment experience, so let's take a look at what's new.\nFor our Windows users out there, we've made some changes to make your Defang experience even smoother:\nDeploying your apps from Windows just got a little bit nicer.\nWe've added a new feature that will make it even easier to get started with Defang. We've created a flow where each sample provides a button that allows you to immediately deploy a template with a GitHub action which will automatically deploy the sample to the Defang Playground. That means you can easily make changes by committing them to your brand new repo, and everything automatically updates in the Playground. It's a great way to get started with Defang and start experimenting with your own projects.\nTry it now from our portal!\n\nWe first introduced this last month, but we've since rolled it out to everyone. We also added a sample that showcases the power of managed Redis: BullMQ with Redis. It demonstrates how you can use BullMQ and BullBoard with a managed Redis instance to create a powerful job queue system so you can easily build robust, scalable applications in AWS with Defang.\nWe've updated our sample projects to showcase how to use them with Defang, including:\nCheck them out if you're looking for some inspiration or a starting point for your own projects.\nWe're always looking for ways to enhance the CLI experience. Here's what's new:\nIt's the small refinements that can make a big difference in your workflow.\nHere are a few more things that didn't quite fit with the rest:\nKeep an eye out for these updates in the near future.\nAs always, we'd love your help shaping the future of Defang, so let us know what you'd like to see next. Happy deploying! 🚀\nYou can now install Defang using winget, the Windows Package Manager, for a streamlined setup\nWe've introduced a signed binary for added security and peace of mind\nASP.NET Core\nFeathers.js\nFlask & LangChain\nBullMQ with Redis\nnpx defang automatically checks to always have the latest version of the CLI\nThe output during defang compose up has been streamlined to focus on the most important information\ndefang tail now supports listening to specific services, making it easier to troubleshoot issues\nWe've improved hints and error messages to better guide you when something goes wrong\nThe CLI now has improved color support for light theme terminals, making it easier on the eyes\nVisibility into ECS deployment events in BYOC tail logs\nImprovements to ACME certificate generation\nwinget\nnpx defang\ndefang compose up\ndefang tail"
  },
  {
    "id": 38,
    "text": "Samples, samples, samples!\nStart from a sample in seconds\nSample templates\nACME for BYOD\nWarnings for Stateful Services\nManaged Redis!\nLoad Testing\nUpgraded Kaniko\nUpcoming Features\nManaged Postgres\nBYOC ECS Lifecycle Events\nslug: june-2024-product-update\ntitle: June 2024 Product Update\ntags: [Cloud, NoDevOps, BYOC, Playground, Load Testing, ACME, Managed Redis, Kaniko, Postgres, ECS]\nauthor: Defang Team\nHey folks! We’re back with another exciting update about Defang. Our team has been working hard to bring you new features and improvements so you can get deploying faster. Here’s a rundown of what we’ve been up to this month:\nWe've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the Defang homepage. Check out our video about all the new samples and functionality.\nWith all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run defang generate you'll be able to filter through the samples and choose one. You can also filter through the samples on the Defang homepage and clone any of them with a simple command like defang new sveltekit.\nIf you look through our GitHub organization, you'll start seeing loads of repos with the structure sample-<sample_name>-template. If you open them, you can create a new repo by clicking this button:\n\nNot only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately.\nWe’re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy.\nTo help you avoid potential pitfalls, we’ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like postgres:<version>, redis:<version>, minio:<version>, etc. \nIn the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which...\nRedis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your compose.yaml file and indicate that you want it managed by your cloud provider using x-defang-redis: true in your service definition. \nTo make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly.\nWe’ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications.\nWe’re not stopping here! Here’s a sneak peek at what’s coming soon:\nBuilding on the momentum of Managed Redis, we’re introducing Managed Postgres. Soon you’ll be able to easily integrate a managed Postgres database into your deployment!\nDefang runs your services with ECS, and we're working on making it clearer what's happening under the hood. \nStay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! 🚀\ndefang generate\ndefang new sveltekit\nsample-<sample_name>-template\npostgres:<version>\nredis:<version>\nminio:<version>\ncompose.yaml\nx-defang-redis: true"
  },
  {
    "id": 39,
    "text": "slug: announcing-defang-public-beta\ntitle: Announcing the Defang Public Beta\ntags: [Cloud, GenerativeAI, NoDevOps, BYOC, AWS]\nAnnouncing the Defang Public Beta\nA radically simpler way for developers to create, deploy, and manage cloud applications.\nEver since we shipped our Private Beta in the summer of 2023, we have been working with early adopters and listening to their feedback. While these early customers loved the ease with which they could create, deploy, and manage a cloud application, they had one big request - to deploy their applications to their own cloud (e.g. AWS) account. This was important to them for a number of reasons - to leverage their cloud credits, to enforce their IAM roles and security settings, to integrate new application components with their existing deployments, and more.\nAnd so, today with our Public Beta, we are addressing this request. With today’s release of Defang BYOC (Bring-your-own-Cloud), you can now enjoy all the benefits of Defang and deploy applications to your own AWS account! Our Private Beta experience is still available as Defang Playground for you to quickly and easily prototype applications and deploy them to our hosted environment.\nYou can learn more about Defang here. Also check out our tutorials, samples, and FAQ to know more.\nTry the Public Beta!\nTo try the Public Beta, please go to defang.io and click on Download to download the CLI and get started. We would love to have you kick the tires and give us your feedback! Once you sign up you’ll receive an invitation to our Slack support channel in email. You are also welcome to file Github issues here.\nStay Tuned for More\nWhile the Public Beta is an important step forward, we have already heard requests for additional features - from support for additional cloud platforms such as Azure and GCP, to the ability to easily write cloud-agnostic applications while leveraging the best of each cloud platform. We are already working on these items and shall have more to share in the coming months - stay tuned!"
  },
  {
    "id": 40,
    "text": "slug: announcement\ntitle: \"Announcing the Private Beta for the Defang Opinionated Platform\"\ntags: [Cloud, GenerativeAI, NoDevOps]\nAnnouncing the Private Beta for the Defang Opinionated Platform: Radically Simplifying and Cloud Application Development, Deployment, and Optimization\nWe're thrilled to announce the release of our Private Beta for the Defang Opinionated Platform (DOP). We started Defang because, as practitioners with experience in both building cloud apps and building cloud platforms, we were unhappy with the state of the art. It was, and remains, too difficult to develop, deploy, and optimize cloud applications. In architecting and building a cloud app, developers need to consider a variety of factors such as performance, scalability, cost, security, flexibility, simplicity, etc. At the same time, they face a bewildering array of choices - from app architecture to choice of cloud platforms and services, to configuration and deployment, CI-CD, security setting, etc. - in topics that they are not experts in. Clearly, we need a better way.\nWe realize that improving on this state of affairs is a long journey. Today, we are taking an initial step with the release of the Private Beta of the DOP. The DOP enables AI-assisted development, with the ability to specify a high-level prompt and get back an initial version of your cloud service code, which can then be refined further. The DOP simplifies CI-CD by automatically building and deploying new artifacts to your target environments when you push new code to your source repository, taking care of all dependency management and build tasks. And the DOP pre-provisions properly secured and configured staging and production environments for your application, optimized for security, scaling, and cost.\nTry the Private Beta!\nTo try the Private Beta, please go to portal.defang.dev and register. We would love to have you kick the tires and give us your feedback! You can also check out our documentation, samples, and our Github repository.\nStay Tuned for More\nWhile the Private Beta is a start, we have already heard requests for additional features from some of our early adopters and have a lot more in the pipeline! Top of the list is the ability to bring your own cloud accounts (AWS, Azure, GCP). Another frequent request is the ability to access a variety of compute and storage services native to the underlying platform while still maintaining app portability. And we also hear about the need to be able to monitor and optimize an app once deployed. We are already working on all these items and hope to have more to share in the coming months - stay tuned!"
  },
  {
    "id": 41,
    "text": "npx defang\n(coming soon) Bring Your Own Domain with Let's Encrypt\nWindows Support\nImproved CLI\nStability and Reliability\nslug: may-2024-product-update\ntitle: May 2024 Product Update\ntags: [Cloud, NoDevOps, BYOC, AWS ECS, defang compose up]\nauthor: Defang Team\nHey folks! There is a lot going on at Defang and we're excited to share our latest product updates with you. Over the last month, we've been working hard to improve the Defang system and make it even easier for you to deploy your applications. Here's a quick overview of what we've been up to:\nWe know a lot of you are using Defang for the first time. To make it easier to get started, we've added a new way to install the Defang CLI. Now you can use npx to run the CLI without installing it globally. Just run:\nThis will download the latest version of the Defang CLI and run it for you. No need to worry about installing or updating the CLI manually!\nPreviously you could bring your own domain with Defang BYOC... but you had to host the DNS records with AWS Route 53 in the AWS account you were deploying to. Now you can point domains hosted anywhere to your Defang deployment and we'll take care of the rest. We'll help generate a Let's Encrypt certificate for your domain and automatically renew it for you.\nSome of you use Defang from a Windows PC and previously a few features didn't work correctly on Windows. Some stuff we've fixed:\n* ansi color codes in logs\n* handle ctrl-c when tailing logs\nWe've made a variety of small tweaks and improvements to the CLI which should make things a little bit cleaner and more stable.\n* log messages have been made more clear\n* adding more progress information during compose up\nDefang is still in Beta and we know we've got to be rock solid by the time we release V1, so we've been working hard to improve the stability and reliability of the Defang architecture. We've been battle-testing different technologies to see how they hold up and have mad a few changes that should make things even better:\n* capacity improvements in build queues\n* improvements in log availability\nnpx defang@latest\n"
  },
  {
    "id": 42,
    "text": "slug: about-my-journey-deploying-my-first-web-application\ntitle: About my Journey Deploying my First Web Application\ntags: [Cloud, NoDevOps, BYOC, AWS ECS, defang compose up]\n\nAs a student at University of British Columbia, new to the area of web development, I needed to develop and deploy a web application as a course project. It was already a huge challenge to complete the coding part. I could not believe that an even bigger challenge awaited. Picking the right platform and services is tough to start with. Do you know that AWS offers 200 different services? Lucky for me my professors’ instructed us to use ECS. Otherwise, I would have been totally lost.\nStarting my project, honestly, it felt like I was hitting a brick wall. Diving into AWS with little to no clue was tough. Terms like \"ECS clusters,\" \"task definitions,\" and \"IAM roles\" were flying over my head. I was scared of messing something up, especially when it came to setting up things like ECR and load balancers.\nIt was overwhelming when all these unfamiliar concepts came at me at once. I searched them up on the internet and went straight to a top-rated YouTube tutorial. I spent an hour and a half going through the whole video series. Those tutorials, as helpful as they were, couldn't fully prepare me for the hands-on challenges of real-life implementation. It's one thing to follow along with a guide when everything goes right; it's another to adapt when things don't quite match up to the tutorial’s scenarios.\n\nI ran into so many problems with configuring services. Sometimes it is caused by carelessly selecting the wrong options; sometimes it is due to the fact that I have no idea what the buttons mean; sometimes it is just a bug with my code. Those errors triple the time it took to deploy my project. It was indeed extremely frustrating.\n\nThen I found Defang (www.defang.io), and it was like someone flipped a switch. Suddenly, all that complicated stuff became way easier. All I needed to do is to install Defang, build a compose.yaml file to describe my application, and run a single command - defang compose up. And Defang even has a Gen-AI assistant to help you write the code and compose file for your application. Defang automatically does all the heavy-lifting behind the scenes - configuring all the necessary services in a secure and optimal way, and automatically building and deploying my application components. No more late nights trying to figure out AWS docs or stressing about getting everything right. Deploying my Django Restaurant Homepage went from being my biggest worry to one of the smoothest parts of my project.\n\nWith Defang, I could chill a bit and actually enjoy working on my project, focusing on the cool parts without getting bogged down by all the technical stuff. It made cloud deployment feel doable and fun, even for someone like me who was pretty much a beginner. Give it a try yourself - go to www.defang.io to get started.\n\nTry it yourself!\nSample Code: Restaurant Homepage\nDefang Docs: Docs"
  },
  {
    "id": 43,
    "text": "Codespaces\nDev Containers\nGitPod\nslug: dev-environments\ntitle: Add Defang to your developer environments instantly\ntags: [Cloud, NoDevOps, BYOC, AWS ECS, defang compose up, developer environments, Cloud IDEs, CDE]\nDefang is aiming to reduce the barriers to entry to cloud application development. With our tooling, we make it really easy to deploy multi-service containerized applications to your own cloud with a single command.\nWe want it to be easy for you to try Defang with as little friction as possible, though, so we have done the work so you can easily get started in a GitHub Codespaces environment, a GitPod Workspace, or even a local Dev Container.\nIf you want to get started with Codespaces, you can just fork this repo. It comes with the Defang CLI pre-installed so you can start playing with it immediately. It's setup using the Defang CLI Dev Container Feature.\nDev Containers are a cool way to provision and configure development environments and share that configuration with other people you are working with. It's a spec that is supported by VS Code, Visual Studio, the JetBrains IDEs like IntelliJ and PyCharm, DevPod and others.\nGitPod is another Cloud IDE, a bit like GitHub Codespaces. If prefer GitPod, you can try Defang in a GitPod environment by using this repo."
  },
  {
    "id": 44,
    "text": "Prerequisites\nDeployment Steps\nUsage\nTakeaways\nslug: slackbot-sample\ntitle: Deploy a Go-powered slackbot with Defang\ntags: [Cloud, NoDevOps, BYOC, AWS ECS, defang compose up, Slack API]\nauthor: Raphaël Titsworth-Morin\nHey folks! Today, I'm going to share one of our code samples that will show you how to deploy a simple Slack bot. If you're looking to connect a cloud service to Slack to publish status updates, or something else like that, this should help you get started. We'll walk through a step-by-step process of writing a Go program using the github.com/slack-go/slack library to interact with the Slack API and easily deploy it using Defang.\nBefore we dive into the details, let's make sure you have everything you need to get started:\nInstall Defang CLI: Simplify your deployment process by installing the Defang CLI tool. Follow the instructions here to get it up and running quickly.\nSlack API Token: Create a Slack App at https://api.slack.com/apps, granting it the necessary permissions, including the bot chat:write scope.\n\nInstall the app in your workspace: You'll need to install the app in your workspace for it to work. Click the \"Install to Workspace\" button in the Slack admin UI to do this. Mine says \"Reinstall\" because I've already installed it.\n\nCopy the Bot User OAuth Access Token: This token will authenticate your Slackbot with the Slack API.\n\nInvite the Bot to a Channel: To enable your Slackbot, invite it to the desired channel using the @<botname> command. In the screenshot below, my bot's name actually starts with the word invite, but if your bot is called mycoolbot you would invite it with @mycoolbot. This ensures your Slackbot has the required permissions to interact with the channel.\n\nClone the Sample Code: Clone the Defang repository and navigate to the samples/golang/slackbot directory. This directory contains the sample code for the Slackbot.\nNow that we have everything set up, let's dive into the deployment process. Follow these steps to deploy your Slackbot effortlessly:\nSet Up Secrets: Prioritize security by configuring environment variables as sensitive config. Use the Defang CLI's defang config set command to set the SLACK_TOKEN and SLACK_CHANNEL_ID configs.\n    Replace your_slack_token and your_slack_channel_id with the respective values:\nbash\ndefang config set --name SLACK_TOKEN --value your_slack_token\ndefang config set --name SLACK_CHANNEL_ID --value your_slack_channel_id\nDeploy the Slackbot:  Use the Defang CLI's defang compose up command to deploy.\nWith your Slackbot up and running, let's explore how to make the most of it. Simply send a POST request to the / endpoint with a JSON body containing the message you want to post to the Slack channel. Popular tools like cURL or Postman can help you send the request:\nCongratulations! You've successfully deployed a Slackbot using Defang. If you deployed this as an internal service, you could use it to send status updates, alerts, or other important messages to your team. The possibilities are endless!\n\nInstall Defang CLI: Simplify your deployment process by installing the Defang CLI tool. Follow the instructions here to get it up and running quickly.\n\n\nSlack API Token: Create a Slack App at https://api.slack.com/apps, granting it the necessary permissions, including the bot chat:write scope.\n\n\n\nInstall the app in your workspace: You'll need to install the app in your workspace for it to work. Click the \"Install to Workspace\" button in the Slack admin UI to do this. Mine says \"Reinstall\" because I've already installed it.\n\n\n\nCopy the Bot User OAuth Access Token: This token will authenticate your Slackbot with the Slack API.\n\n\n\nInvite the Bot to a Channel: To enable your Slackbot, invite it to the desired channel using the @<botname> command. In the screenshot below, my bot's name actually starts with the word invite, but if your bot is called mycoolbot you would invite it with @mycoolbot. This ensures your Slackbot has the required permissions to interact with the channel.\n\n\n\nClone the Sample Code: Clone the Defang repository and navigate to the samples/golang/slackbot directory. This directory contains the sample code for the Slackbot.\n\n\nSet Up Secrets: Prioritize security by configuring environment variables as sensitive config. Use the Defang CLI's defang config set command to set the SLACK_TOKEN and SLACK_CHANNEL_ID configs.\n    Replace your_slack_token and your_slack_channel_id with the respective values:\nbash\ndefang config set --name SLACK_TOKEN --value your_slack_token\ndefang config set --name SLACK_CHANNEL_ID --value your_slack_channel_id\n\n\nDeploy the Slackbot:  Use the Defang CLI's defang compose up command to deploy.\n\nchat:write\n@<botname>\nmycoolbot\n@mycoolbot\nsamples/golang/slackbot\ngit clone https://github.com/DefangLabs/defang\ncd defang/samples/golang/slackbot\n\ndefang config set\nSLACK_TOKEN\nSLACK_CHANNEL_ID\nyour_slack_token\nyour_slack_channel_id\nbash\ndefang config set --name SLACK_TOKEN --value your_slack_token\ndefang config set --name SLACK_CHANNEL_ID --value your_slack_channel_id\ndefang compose up\n/\ncurl 'https://raphaeltm-bot--8080.prod1.defang.dev/' \\\n  -H 'content-type: application/json' \\\n  --data-raw $'{\"message\":\"This is your bot speaking. We\\'ll be landing in 10 minutes. Please fasten your seatbelts.\"}'\n"
  }
]
