[
  {
    "id": 1,
    "text": "Hey folks! We've got another batch of updates to share with you about what the Defang team has been working on over the past month. We're committed to improving your deployment experience, so let's take a look at what's new. For our Windows users out there, we've made some changes to make your Defang experience even smoother: Deploying your apps from Windows just got a little bit nicer. We've added a new feature that will make it even easier to get started with Defang. We've created a flow where each sample provides a button that allows you to immediately deploy a template with a GitHub action which will automatically deploy the sample to the Defang Playground. That means you can easily make changes by committing them to your brand new repo, and everything automatically updates in the Playground. It's a great way to get started with Defang and start experimenting with your own projects. Try it now from our portal!  We first introduced this last month, but we've since rolled it out to everyone. We also added a sample that showcases the power of managed Redis: BullMQ with Redis. It demonstrates how you can use BullMQ and BullBoard with a managed Redis instance to create a powerful job queue system so you can easily build robust, scalable applications in AWS with Defang. We've updated our sample projects to showcase how to use them with Defang, including: Check them out if you're looking for some inspiration or a starting point for your own projects. We're always looking for ways to enhance the CLI experience. Here's what's new: It's the small refinements that can make a big difference in your workflow. Here are a few more things that didn't quite fit with the rest: Keep an eye out for these updates in the near future. As always, we'd love your help shaping the future of Defang, so let us know what you'd like to see next. Happy deploying! \ud83d\ude80 Hey folks! We\u2019re back with another exciting update about Defang. Our team has been working hard to bring you new features and improvements so you can get deploying faster. Here\u2019s a rundown of what we\u2019ve been up to this month: We've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the Defang homepage. Check out our video about all the new samples and functionality. With all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run defang generate you'll be able to filter through the samples and choose one. You can also filter through the samples on the Defang homepage and clone any of them with a simple command like defang new sveltekit. If you look through our GitHub organization, you'll start seeing loads of repos with the structure sample-<sample_name>-template. If you open them, you can create a new repo by clicking this button:  Not only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately. We\u2019re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy. To help you avoid potential pitfalls, we\u2019ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like postgres:<version>, redis:<version>, minio:<version>, etc. In the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which... Redis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your compose.yaml file and indicate that you want it managed by your cloud provider using x-defang-redis: true in your service definition. To make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly. We\u2019ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications. We\u2019re not stopping here! Here\u2019s a sneak peek at what\u2019s coming soon: Building on the momentum of Managed Redis, we\u2019re introducing Managed Postgres. Soon you\u2019ll be able to easily integrate a managed Postgres database into your deployment! Defang runs your services with ECS, and we're working on making it clearer what's happening under the hood. Stay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! \ud83d\ude80 Hey folks! There is a lot going on at Defang and we're excited to share our latest product updates with you. Over the last month, we've been working hard to improve the Defang system and make it even easier for you to deploy your applications. Here's a quick overview of what we've been up to: We know a lot of you are using Defang for the first time. To make it easier to get started, we've added a new way to install the Defang CLI. Now you can use npx to run the CLI without installing it globally. Just run: This will download the latest version of the Defang CLI and run it for you. No need to worry about installing or updating the CLI manually! Previously you could bring your own domain with Defang BYOC... but you had to host the DNS records with AWS Route 53 in the AWS account you were deploying to. Now you can point domains hosted anywhere to your Defang deployment and we'll take care of the rest. We'll help generate a Let's Encrypt certificate for your domain and automatically renew it for you. Some of you use Defang from a Windows PC and previously a few features didn't work correctly on Windows. Some stuff we've fixed: We've made a variety of small tweaks and improvements to the CLI which should make things a little bit cleaner and more stable. Defang is still in Beta and we know we've got to be rock solid by the time we release V1, so we've been working hard to improve the stability and reliability of the Defang architecture. We've been battle-testing different technologies to see how they hold up and have mad a few changes that should make things even better: Hey folks! Today, I'm going to share one of our code samples that will show you how to deploy a simple Slack bot. If you're looking to connect a cloud service to Slack to publish status updates, or something else like that, this should help you get started. We'll walk through a step-by-step process of writing a Go program using the github.com/slack-go/slack library to interact with the Slack API and easily deploy it using Defang. Before we dive into the details, let's make sure you have everything you need to get started: Install Defang CLI: Simplify your deployment process by installing the Defang CLI tool. Follow the instructions here to get it up and running quickly. Slack API Token: Create a Slack App at https://api.slack.com/apps, granting it the necessary permissions, including the\u00a0bot chat:write\u00a0scope.\n Install the app in your workspace: You'll need to install the app in your workspace for it to work. Click the \"Install to Workspace\" button in the Slack admin UI to do this. Mine says \"Reinstall\" because I've already installed it.\n Copy the Bot User OAuth Access Token: This token will authenticate your Slackbot with the Slack API.\n Invite the Bot to a Channel: To enable your Slackbot, invite it to the desired channel using the\u00a0@<botname>\u00a0command. In the screenshot below, my bot's name actually starts with the word invite, but if your bot is called mycoolbot you would invite it with @mycoolbot. This ensures your Slackbot has the required permissions to interact with the channel.\n Clone the Sample Code: Clone the Defang repository and navigate to the\u00a0samples/golang/slackbot\u00a0directory. This directory contains the sample code for the Slackbot. Now that we have everything set up, let's dive into the deployment process. Follow these steps to deploy your Slackbot effortlessly: Set Up Secrets: Prioritize security by configuring environment variables as sensitive config. Use the Defang CLI's\u00a0defang config set\u00a0command to set the\u00a0SLACK_TOKEN\u00a0and SLACK_CHANNEL_ID\u00a0configs.\nReplace\u00a0your_slack_token\u00a0and\u00a0your_slack_channel_id\u00a0with the respective values: Deploy the Slackbot:  Use the Defang CLI's\u00a0defang compose up\u00a0command to deploy. With your Slackbot up and running, let's explore how to make the most of it. Simply send a POST request to the\u00a0/\u00a0endpoint with a JSON body containing the message you want to post to the Slack channel. Popular tools like cURL or Postman can help you send the request: Congratulations! You've successfully deployed a Slackbot using Defang. If you deployed this as an internal service, you could use it to send status updates, alerts, or other important messages to your team. The possibilities are endless! Defang is aiming to reduce the barriers to entry to cloud application development. With our tooling, we make it really easy to deploy multi-service containerized applications to your own cloud with a single command. We want it to be easy for you to try Defang with as little friction as possible, though, so we have done the work so you can easily get started in a GitHub Codespaces environment, a GitPod Workspace, or even a local Dev Container. If you want to get started with Codespaces, you can just fork this repo. It comes with the Defang CLI pre-installed so you can start playing with it immediately. It's setup using the Defang CLI Dev Container Feature. Dev Containers are a cool way to provision and configure development environments and share that configuration with other people you are working with. It's a spec that is supported by VS Code, Visual Studio, the JetBrains IDEs like IntelliJ and PyCharm, DevPod and others. GitPod is another Cloud IDE, a bit like GitHub Codespaces. If prefer GitPod, you can try Defang in a GitPod environment by using this repo. As a student at University of British Columbia, new to the area of web development, I needed to develop and deploy a web application as a course project. It was already a huge challenge to complete the coding part. I could not believe that an even bigger challenge awaited. Picking the right platform and services is tough to start with. Do you know that AWS offers 200 different services? Lucky for me my professors\u2019 instructed us to use ECS. Otherwise, I would have been totally lost. Starting my project, honestly, it felt like I was hitting a brick wall. Diving into AWS with little to no clue was tough. Terms like \"ECS clusters,\" \"task definitions,\" and \"IAM roles\" were flying over my head. I was scared of messing something up, especially when it came to setting up things like ECR and load balancers. It was overwhelming when all these unfamiliar concepts came at me at once. I searched them up on the internet and went straight to a top-rated YouTube tutorial. I spent an hour and a half going through the whole video series. Those tutorials, as helpful as they were, couldn't fully prepare me for the hands-on challenges of real-life implementation. It's one thing to follow along with a guide when everything goes right; it's another to adapt when things don't quite match up to the tutorial\u2019s scenarios. I ran into so many problems with configuring services. Sometimes it is caused by carelessly selecting the wrong options; sometimes it is due to the fact that I have no idea what the buttons mean; sometimes it is just a bug with my code. Those errors triple the time it took to deploy my project. It was indeed extremely frustrating. Then I found Defang (www.defang.io), and it was like someone flipped a switch. Suddenly, all that complicated stuff became way easier. All I needed to do is to install Defang, build a compose.yaml file to describe my application, and run a single command - defang compose up. And Defang even has a Gen-AI assistant to help you write the code and compose file for your application. Defang automatically does all the heavy-lifting behind the scenes - configuring all the necessary services in a secure and optimal way, and automatically building and deploying my application components. No more late nights trying to figure out AWS docs or stressing about getting everything right. Deploying my Django Restaurant Homepage went from being my biggest worry to one of the smoothest parts of my project. With Defang, I could chill a bit and actually enjoy working on my project, focusing on the cool parts without getting bogged down by all the technical stuff. It made cloud deployment feel doable and fun, even for someone like me who was pretty much a beginner. Give it a try yourself - go to www.defang.io to get started. Try it yourself! Sample Code: Restaurant Homepage Defang Docs: Docs Announcing the Defang Public Beta A radically simpler way for developers to create, deploy, and manage cloud applications. Ever since we shipped our Private Beta in the summer of 2023, we have been working with early adopters and listening to their feedback. While these early customers loved the ease with which they could create, deploy, and manage a cloud application, they had one big request - to deploy their applications to their own cloud (e.g. AWS) account. This was important to them for a number of reasons - to leverage their cloud credits, to enforce their IAM roles and security settings, to integrate new application components with their existing deployments, and more. And so, today with our Public Beta, we are addressing this request. With today\u2019s release of Defang BYOC (Bring-your-own-Cloud), you can now enjoy all the benefits of Defang and deploy applications to your own AWS account! Our Private Beta experience is still available as Defang Playground for you to quickly and easily prototype applications and deploy them to our hosted environment. You can learn more about Defang here. Also check out our tutorials, samples, and FAQ to know more. Try the Public Beta! To try the Public Beta, please go to defang.io and click on Download to download the CLI and get started. We would love to have you kick the tires and give us your feedback! Once you sign up you\u2019ll receive an invitation to our Slack support channel in email. You are also welcome to file Github issues here. Stay Tuned for More While the Public Beta is an important step forward, we have already heard requests for additional features - from support for additional cloud platforms such as Azure and GCP, to the ability to easily write cloud-agnostic applications while leveraging the best of each cloud platform. We are already working on these items and shall have more to share in the coming months - stay tuned! Announcing the Private Beta for the Defang Opinionated Platform: Radically Simplifying and Cloud Application Development, Deployment, and Optimization We're thrilled to announce the release of our Private Beta for the Defang Opinionated Platform (DOP). We started Defang because, as practitioners with experience in both building cloud apps and building cloud platforms, we were unhappy with the state of the art. It was, and remains, too difficult to develop, deploy, and optimize cloud applications. In architecting and building a cloud app, developers need to consider a variety of factors such as performance, scalability, cost, security, flexibility, simplicity, etc. At the same time, they face a bewildering array of choices - from app architecture to choice of cloud platforms and services, to configuration and deployment, CI-CD, security setting, etc. - in topics that they are not experts in. Clearly, we need a better way. We realize that improving on this state of affairs is a long journey. Today, we are taking an initial step with the release of the Private Beta of the DOP. The DOP enables AI-assisted development, with the ability to specify a high-level prompt and get back an initial version of your cloud service code, which can then be refined further. The DOP simplifies CI-CD by automatically building and deploying new artifacts to your target environments when you push new code to your source repository, taking care of all dependency management and build tasks. And the DOP pre-provisions properly secured and configured staging and production environments for your application, optimized for security, scaling, and cost. Try the Private Beta! To try the Private Beta, please go to portal.defang.dev and register. We would love to have you kick the tires and give us your feedback! You can also check out our documentation, samples, and our Github repository. Stay Tuned for More While the Private Beta is a start, we have already heard requests for additional features from some of our early adopters and have a lot more in the pipeline! Top of the list is the ability to bring your own cloud accounts (AWS, Azure, GCP). Another frequent request is the ability to access a variety of compute and storage services native to the underlying platform while still maintaining app portability. And we also hear about the need to be able to monitor and optimize an app once deployed. We are already working on all these items and hope to have more to share in the coming months - stay tuned!"
  },
  {
    "id": 2,
    "text": "As a student at University of British Columbia, new to the area of web development, I needed to develop and deploy a web application as a course project. It was already a huge challenge to complete the coding part. I could not believe that an even bigger challenge awaited. Picking the right platform and services is tough to start with. Do you know that AWS offers 200 different services? Lucky for me my professors\u2019 instructed us to use ECS. Otherwise, I would have been totally lost. Starting my project, honestly, it felt like I was hitting a brick wall. Diving into AWS with little to no clue was tough. Terms like \"ECS clusters,\" \"task definitions,\" and \"IAM roles\" were flying over my head. I was scared of messing something up, especially when it came to setting up things like ECR and load balancers. It was overwhelming when all these unfamiliar concepts came at me at once. I searched them up on the internet and went straight to a top-rated YouTube tutorial. I spent an hour and a half going through the whole video series. Those tutorials, as helpful as they were, couldn't fully prepare me for the hands-on challenges of real-life implementation. It's one thing to follow along with a guide when everything goes right; it's another to adapt when things don't quite match up to the tutorial\u2019s scenarios. I ran into so many problems with configuring services. Sometimes it is caused by carelessly selecting the wrong options; sometimes it is due to the fact that I have no idea what the buttons mean; sometimes it is just a bug with my code. Those errors triple the time it took to deploy my project. It was indeed extremely frustrating. Then I found Defang (www.defang.io), and it was like someone flipped a switch. Suddenly, all that complicated stuff became way easier. All I needed to do is to install Defang, build a compose.yaml file to describe my application, and run a single command - defang compose up. And Defang even has a Gen-AI assistant to help you write the code and compose file for your application. Defang automatically does all the heavy-lifting behind the scenes - configuring all the necessary services in a secure and optimal way, and automatically building and deploying my application components. No more late nights trying to figure out AWS docs or stressing about getting everything right. Deploying my Django Restaurant Homepage went from being my biggest worry to one of the smoothest parts of my project. With Defang, I could chill a bit and actually enjoy working on my project, focusing on the cool parts without getting bogged down by all the technical stuff. It made cloud deployment feel doable and fun, even for someone like me who was pretty much a beginner. Give it a try yourself - go to www.defang.io to get started. Try it yourself! Sample Code: Restaurant Homepage Defang Docs: Docs"
  },
  {
    "id": 3,
    "text": "Announcing the Private Beta for the Defang Opinionated Platform: Radically Simplifying and Cloud Application Development, Deployment, and Optimization We're thrilled to announce the release of our Private Beta for the Defang Opinionated Platform (DOP). We started Defang because, as practitioners with experience in both building cloud apps and building cloud platforms, we were unhappy with the state of the art. It was, and remains, too difficult to develop, deploy, and optimize cloud applications. In architecting and building a cloud app, developers need to consider a variety of factors such as performance, scalability, cost, security, flexibility, simplicity, etc. At the same time, they face a bewildering array of choices - from app architecture to choice of cloud platforms and services, to configuration and deployment, CI-CD, security setting, etc. - in topics that they are not experts in. Clearly, we need a better way. We realize that improving on this state of affairs is a long journey. Today, we are taking an initial step with the release of the Private Beta of the DOP. The DOP enables AI-assisted development, with the ability to specify a high-level prompt and get back an initial version of your cloud service code, which can then be refined further. The DOP simplifies CI-CD by automatically building and deploying new artifacts to your target environments when you push new code to your source repository, taking care of all dependency management and build tasks. And the DOP pre-provisions properly secured and configured staging and production environments for your application, optimized for security, scaling, and cost. Try the Private Beta! To try the Private Beta, please go to portal.defang.dev and register. We would love to have you kick the tires and give us your feedback! You can also check out our documentation, samples, and our Github repository. Stay Tuned for More While the Private Beta is a start, we have already heard requests for additional features from some of our early adopters and have a lot more in the pipeline! Top of the list is the ability to bring your own cloud accounts (AWS, Azure, GCP). Another frequent request is the ability to access a variety of compute and storage services native to the underlying platform while still maintaining app portability. And we also hear about the need to be able to monitor and optimize an app once deployed. We are already working on all these items and hope to have more to share in the coming months - stay tuned!"
  },
  {
    "id": 4,
    "text": "Announcing the Defang Public Beta A radically simpler way for developers to create, deploy, and manage cloud applications. Ever since we shipped our Private Beta in the summer of 2023, we have been working with early adopters and listening to their feedback. While these early customers loved the ease with which they could create, deploy, and manage a cloud application, they had one big request - to deploy their applications to their own cloud (e.g. AWS) account. This was important to them for a number of reasons - to leverage their cloud credits, to enforce their IAM roles and security settings, to integrate new application components with their existing deployments, and more. And so, today with our Public Beta, we are addressing this request. With today\u2019s release of Defang BYOC (Bring-your-own-Cloud), you can now enjoy all the benefits of Defang and deploy applications to your own AWS account! Our Private Beta experience is still available as Defang Playground for you to quickly and easily prototype applications and deploy them to our hosted environment. You can learn more about Defang here. Also check out our tutorials, samples, and FAQ to know more. Try the Public Beta! To try the Public Beta, please go to defang.io and click on Download to download the CLI and get started. We would love to have you kick the tires and give us your feedback! Once you sign up you\u2019ll receive an invitation to our Slack support channel in email. You are also welcome to file Github issues here. Stay Tuned for More While the Public Beta is an important step forward, we have already heard requests for additional features - from support for additional cloud platforms such as Azure and GCP, to the ability to easily write cloud-agnostic applications while leveraging the best of each cloud platform. We are already working on these items and shall have more to share in the coming months - stay tuned!"
  },
  {
    "id": 5,
    "text": "Archive"
  },
  {
    "id": 6,
    "text": "Defang is aiming to reduce the barriers to entry to cloud application development. With our tooling, we make it really easy to deploy multi-service containerized applications to your own cloud with a single command. We want it to be easy for you to try Defang with as little friction as possible, though, so we have done the work so you can easily get started in a GitHub Codespaces environment, a GitPod Workspace, or even a local Dev Container. If you want to get started with Codespaces, you can just fork this repo. It comes with the Defang CLI pre-installed so you can start playing with it immediately. It's setup using the Defang CLI Dev Container Feature. Dev Containers are a cool way to provision and configure development environments and share that configuration with other people you are working with. It's a spec that is supported by VS Code, Visual Studio, the JetBrains IDEs like IntelliJ and PyCharm, DevPod and others. GitPod is another Cloud IDE, a bit like GitHub Codespaces. If prefer GitPod, you can try Defang in a GitPod environment by using this repo."
  },
  {
    "id": 7,
    "text": "Hey folks! We've got another batch of updates to share with you about what the Defang team has been working on over the past month. We're committed to improving your deployment experience, so let's take a look at what's new. For our Windows users out there, we've made some changes to make your Defang experience even smoother: Deploying your apps from Windows just got a little bit nicer. We've added a new feature that will make it even easier to get started with Defang. We've created a flow where each sample provides a button that allows you to immediately deploy a template with a GitHub action which will automatically deploy the sample to the Defang Playground. That means you can easily make changes by committing them to your brand new repo, and everything automatically updates in the Playground. It's a great way to get started with Defang and start experimenting with your own projects. Try it now from our portal!  We first introduced this last month, but we've since rolled it out to everyone. We also added a sample that showcases the power of managed Redis: BullMQ with Redis. It demonstrates how you can use BullMQ and BullBoard with a managed Redis instance to create a powerful job queue system so you can easily build robust, scalable applications in AWS with Defang. We've updated our sample projects to showcase how to use them with Defang, including: Check them out if you're looking for some inspiration or a starting point for your own projects. We're always looking for ways to enhance the CLI experience. Here's what's new: It's the small refinements that can make a big difference in your workflow. Here are a few more things that didn't quite fit with the rest: Keep an eye out for these updates in the near future. As always, we'd love your help shaping the future of Defang, so let us know what you'd like to see next. Happy deploying! \ud83d\ude80"
  },
  {
    "id": 8,
    "text": "Hey folks! We\u2019re back with another exciting update about Defang. Our team has been working hard to bring you new features and improvements so you can get deploying faster. Here\u2019s a rundown of what we\u2019ve been up to this month: We've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the Defang homepage. Check out our video about all the new samples and functionality. With all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run defang generate you'll be able to filter through the samples and choose one. You can also filter through the samples on the Defang homepage and clone any of them with a simple command like defang new sveltekit. If you look through our GitHub organization, you'll start seeing loads of repos with the structure sample-<sample_name>-template. If you open them, you can create a new repo by clicking this button:  Not only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately. We\u2019re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy. To help you avoid potential pitfalls, we\u2019ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like postgres:<version>, redis:<version>, minio:<version>, etc. In the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which... Redis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your compose.yaml file and indicate that you want it managed by your cloud provider using x-defang-redis: true in your service definition. To make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly. We\u2019ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications. We\u2019re not stopping here! Here\u2019s a sneak peek at what\u2019s coming soon: Building on the momentum of Managed Redis, we\u2019re introducing Managed Postgres. Soon you\u2019ll be able to easily integrate a managed Postgres database into your deployment! Defang runs your services with ECS, and we're working on making it clearer what's happening under the hood. Stay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! \ud83d\ude80"
  },
  {
    "id": 9,
    "text": "Hey folks! There is a lot going on at Defang and we're excited to share our latest product updates with you. Over the last month, we've been working hard to improve the Defang system and make it even easier for you to deploy your applications. Here's a quick overview of what we've been up to: We know a lot of you are using Defang for the first time. To make it easier to get started, we've added a new way to install the Defang CLI. Now you can use npx to run the CLI without installing it globally. Just run: This will download the latest version of the Defang CLI and run it for you. No need to worry about installing or updating the CLI manually! Previously you could bring your own domain with Defang BYOC... but you had to host the DNS records with AWS Route 53 in the AWS account you were deploying to. Now you can point domains hosted anywhere to your Defang deployment and we'll take care of the rest. We'll help generate a Let's Encrypt certificate for your domain and automatically renew it for you. Some of you use Defang from a Windows PC and previously a few features didn't work correctly on Windows. Some stuff we've fixed: We've made a variety of small tweaks and improvements to the CLI which should make things a little bit cleaner and more stable. Defang is still in Beta and we know we've got to be rock solid by the time we release V1, so we've been working hard to improve the stability and reliability of the Defang architecture. We've been battle-testing different technologies to see how they hold up and have mad a few changes that should make things even better:"
  },
  {
    "id": 10,
    "text": "Hey folks! Today, I'm going to share one of our code samples that will show you how to deploy a simple Slack bot. If you're looking to connect a cloud service to Slack to publish status updates, or something else like that, this should help you get started. We'll walk through a step-by-step process of writing a Go program using the github.com/slack-go/slack library to interact with the Slack API and easily deploy it using Defang. Before we dive into the details, let's make sure you have everything you need to get started: Install Defang CLI: Simplify your deployment process by installing the Defang CLI tool. Follow the instructions here to get it up and running quickly. Slack API Token: Create a Slack App at https://api.slack.com/apps, granting it the necessary permissions, including the\u00a0bot chat:write\u00a0scope.\n Install the app in your workspace: You'll need to install the app in your workspace for it to work. Click the \"Install to Workspace\" button in the Slack admin UI to do this. Mine says \"Reinstall\" because I've already installed it.\n Copy the Bot User OAuth Access Token: This token will authenticate your Slackbot with the Slack API.\n Invite the Bot to a Channel: To enable your Slackbot, invite it to the desired channel using the\u00a0@<botname>\u00a0command. In the screenshot below, my bot's name actually starts with the word invite, but if your bot is called mycoolbot you would invite it with @mycoolbot. This ensures your Slackbot has the required permissions to interact with the channel.\n Clone the Sample Code: Clone the Defang repository and navigate to the\u00a0samples/golang/slackbot\u00a0directory. This directory contains the sample code for the Slackbot. Now that we have everything set up, let's dive into the deployment process. Follow these steps to deploy your Slackbot effortlessly: Set Up Secrets: Prioritize security by configuring environment variables as sensitive config. Use the Defang CLI's\u00a0defang config set\u00a0command to set the\u00a0SLACK_TOKEN\u00a0and SLACK_CHANNEL_ID\u00a0configs.\nReplace\u00a0your_slack_token\u00a0and\u00a0your_slack_channel_id\u00a0with the respective values: Deploy the Slackbot:  Use the Defang CLI's\u00a0defang compose up\u00a0command to deploy. With your Slackbot up and running, let's explore how to make the most of it. Simply send a POST request to the\u00a0/\u00a0endpoint with a JSON body containing the message you want to post to the Slack channel. Popular tools like cURL or Postman can help you send the request: Congratulations! You've successfully deployed a Slackbot using Defang. If you deployed this as an internal service, you could use it to send status updates, alerts, or other important messages to your team. The possibilities are endless!"
  },
  {
    "id": 11,
    "text": ""
  },
  {
    "id": 12,
    "text": "Hey folks! We\u2019re back with another exciting update about Defang. Our team has been working hard to bring you new features and improvements so you can get deploying faster. Here\u2019s a rundown of what we\u2019ve been up to this month: We've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the Defang homepage. Check out our video about all the new samples and functionality. With all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run defang generate you'll be able to filter through the samples and choose one. You can also filter through the samples on the Defang homepage and clone any of them with a simple command like defang new sveltekit. If you look through our GitHub organization, you'll start seeing loads of repos with the structure sample-<sample_name>-template. If you open them, you can create a new repo by clicking this button:  Not only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately. We\u2019re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy. To help you avoid potential pitfalls, we\u2019ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like postgres:<version>, redis:<version>, minio:<version>, etc. In the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which... Redis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your compose.yaml file and indicate that you want it managed by your cloud provider using x-defang-redis: true in your service definition. To make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly. We\u2019ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications. We\u2019re not stopping here! Here\u2019s a sneak peek at what\u2019s coming soon: Building on the momentum of Managed Redis, we\u2019re introducing Managed Postgres. Soon you\u2019ll be able to easily integrate a managed Postgres database into your deployment! Defang runs your services with ECS, and we're working on making it clearer what's happening under the hood. Stay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! \ud83d\ude80"
  },
  {
    "id": 13,
    "text": "Announcing the Defang Public Beta A radically simpler way for developers to create, deploy, and manage cloud applications. Ever since we shipped our Private Beta in the summer of 2023, we have been working with early adopters and listening to their feedback. While these early customers loved the ease with which they could create, deploy, and manage a cloud application, they had one big request - to deploy their applications to their own cloud (e.g. AWS) account. This was important to them for a number of reasons - to leverage their cloud credits, to enforce their IAM roles and security settings, to integrate new application components with their existing deployments, and more. And so, today with our Public Beta, we are addressing this request. With today\u2019s release of Defang BYOC (Bring-your-own-Cloud), you can now enjoy all the benefits of Defang and deploy applications to your own AWS account! Our Private Beta experience is still available as Defang Playground for you to quickly and easily prototype applications and deploy them to our hosted environment. You can learn more about Defang here. Also check out our tutorials, samples, and FAQ to know more. Try the Public Beta! To try the Public Beta, please go to defang.io and click on Download to download the CLI and get started. We would love to have you kick the tires and give us your feedback! Once you sign up you\u2019ll receive an invitation to our Slack support channel in email. You are also welcome to file Github issues here. Stay Tuned for More While the Public Beta is an important step forward, we have already heard requests for additional features - from support for additional cloud platforms such as Azure and GCP, to the ability to easily write cloud-agnostic applications while leveraging the best of each cloud platform. We are already working on these items and shall have more to share in the coming months - stay tuned!"
  },
  {
    "id": 14,
    "text": "Hey folks! There is a lot going on at Defang and we're excited to share our latest product updates with you. Over the last month, we've been working hard to improve the Defang system and make it even easier for you to deploy your applications. Here's a quick overview of what we've been up to: We know a lot of you are using Defang for the first time. To make it easier to get started, we've added a new way to install the Defang CLI. Now you can use npx to run the CLI without installing it globally. Just run: This will download the latest version of the Defang CLI and run it for you. No need to worry about installing or updating the CLI manually! Previously you could bring your own domain with Defang BYOC... but you had to host the DNS records with AWS Route 53 in the AWS account you were deploying to. Now you can point domains hosted anywhere to your Defang deployment and we'll take care of the rest. We'll help generate a Let's Encrypt certificate for your domain and automatically renew it for you. Some of you use Defang from a Windows PC and previously a few features didn't work correctly on Windows. Some stuff we've fixed: We've made a variety of small tweaks and improvements to the CLI which should make things a little bit cleaner and more stable. Defang is still in Beta and we know we've got to be rock solid by the time we release V1, so we've been working hard to improve the stability and reliability of the Defang architecture. We've been battle-testing different technologies to see how they hold up and have mad a few changes that should make things even better: Hey folks! Today, I'm going to share one of our code samples that will show you how to deploy a simple Slack bot. If you're looking to connect a cloud service to Slack to publish status updates, or something else like that, this should help you get started. We'll walk through a step-by-step process of writing a Go program using the github.com/slack-go/slack library to interact with the Slack API and easily deploy it using Defang. Before we dive into the details, let's make sure you have everything you need to get started: Install Defang CLI: Simplify your deployment process by installing the Defang CLI tool. Follow the instructions here to get it up and running quickly. Slack API Token: Create a Slack App at https://api.slack.com/apps, granting it the necessary permissions, including the\u00a0bot chat:write\u00a0scope.\n Install the app in your workspace: You'll need to install the app in your workspace for it to work. Click the \"Install to Workspace\" button in the Slack admin UI to do this. Mine says \"Reinstall\" because I've already installed it.\n Copy the Bot User OAuth Access Token: This token will authenticate your Slackbot with the Slack API.\n Invite the Bot to a Channel: To enable your Slackbot, invite it to the desired channel using the\u00a0@<botname>\u00a0command. In the screenshot below, my bot's name actually starts with the word invite, but if your bot is called mycoolbot you would invite it with @mycoolbot. This ensures your Slackbot has the required permissions to interact with the channel.\n Clone the Sample Code: Clone the Defang repository and navigate to the\u00a0samples/golang/slackbot\u00a0directory. This directory contains the sample code for the Slackbot. Now that we have everything set up, let's dive into the deployment process. Follow these steps to deploy your Slackbot effortlessly: Set Up Secrets: Prioritize security by configuring environment variables as sensitive config. Use the Defang CLI's\u00a0defang config set\u00a0command to set the\u00a0SLACK_TOKEN\u00a0and SLACK_CHANNEL_ID\u00a0configs.\nReplace\u00a0your_slack_token\u00a0and\u00a0your_slack_channel_id\u00a0with the respective values: Deploy the Slackbot:  Use the Defang CLI's\u00a0defang compose up\u00a0command to deploy. With your Slackbot up and running, let's explore how to make the most of it. Simply send a POST request to the\u00a0/\u00a0endpoint with a JSON body containing the message you want to post to the Slack channel. Popular tools like cURL or Postman can help you send the request: Congratulations! You've successfully deployed a Slackbot using Defang. If you deployed this as an internal service, you could use it to send status updates, alerts, or other important messages to your team. The possibilities are endless! Defang is aiming to reduce the barriers to entry to cloud application development. With our tooling, we make it really easy to deploy multi-service containerized applications to your own cloud with a single command. We want it to be easy for you to try Defang with as little friction as possible, though, so we have done the work so you can easily get started in a GitHub Codespaces environment, a GitPod Workspace, or even a local Dev Container. If you want to get started with Codespaces, you can just fork this repo. It comes with the Defang CLI pre-installed so you can start playing with it immediately. It's setup using the Defang CLI Dev Container Feature. Dev Containers are a cool way to provision and configure development environments and share that configuration with other people you are working with. It's a spec that is supported by VS Code, Visual Studio, the JetBrains IDEs like IntelliJ and PyCharm, DevPod and others. GitPod is another Cloud IDE, a bit like GitHub Codespaces. If prefer GitPod, you can try Defang in a GitPod environment by using this repo. As a student at University of British Columbia, new to the area of web development, I needed to develop and deploy a web application as a course project. It was already a huge challenge to complete the coding part. I could not believe that an even bigger challenge awaited. Picking the right platform and services is tough to start with. Do you know that AWS offers 200 different services? Lucky for me my professors\u2019 instructed us to use ECS. Otherwise, I would have been totally lost. Starting my project, honestly, it felt like I was hitting a brick wall. Diving into AWS with little to no clue was tough. Terms like \"ECS clusters,\" \"task definitions,\" and \"IAM roles\" were flying over my head. I was scared of messing something up, especially when it came to setting up things like ECR and load balancers. It was overwhelming when all these unfamiliar concepts came at me at once. I searched them up on the internet and went straight to a top-rated YouTube tutorial. I spent an hour and a half going through the whole video series. Those tutorials, as helpful as they were, couldn't fully prepare me for the hands-on challenges of real-life implementation. It's one thing to follow along with a guide when everything goes right; it's another to adapt when things don't quite match up to the tutorial\u2019s scenarios. I ran into so many problems with configuring services. Sometimes it is caused by carelessly selecting the wrong options; sometimes it is due to the fact that I have no idea what the buttons mean; sometimes it is just a bug with my code. Those errors triple the time it took to deploy my project. It was indeed extremely frustrating. Then I found Defang (www.defang.io), and it was like someone flipped a switch. Suddenly, all that complicated stuff became way easier. All I needed to do is to install Defang, build a compose.yaml file to describe my application, and run a single command - defang compose up. And Defang even has a Gen-AI assistant to help you write the code and compose file for your application. Defang automatically does all the heavy-lifting behind the scenes - configuring all the necessary services in a secure and optimal way, and automatically building and deploying my application components. No more late nights trying to figure out AWS docs or stressing about getting everything right. Deploying my Django Restaurant Homepage went from being my biggest worry to one of the smoothest parts of my project. With Defang, I could chill a bit and actually enjoy working on my project, focusing on the cool parts without getting bogged down by all the technical stuff. It made cloud deployment feel doable and fun, even for someone like me who was pretty much a beginner. Give it a try yourself - go to www.defang.io to get started. Try it yourself! Sample Code: Restaurant Homepage Defang Docs: Docs"
  },
  {
    "id": 15,
    "text": "Hey folks! We've got another batch of updates to share with you about what the Defang team has been working on over the past month. We're committed to improving your deployment experience, so let's take a look at what's new. For our Windows users out there, we've made some changes to make your Defang experience even smoother: Deploying your apps from Windows just got a little bit nicer. We've added a new feature that will make it even easier to get started with Defang. We've created a flow where each sample provides a button that allows you to immediately deploy a template with a GitHub action which will automatically deploy the sample to the Defang Playground. That means you can easily make changes by committing them to your brand new repo, and everything automatically updates in the Playground. It's a great way to get started with Defang and start experimenting with your own projects. Try it now from our portal!  We first introduced this last month, but we've since rolled it out to everyone. We also added a sample that showcases the power of managed Redis: BullMQ with Redis. It demonstrates how you can use BullMQ and BullBoard with a managed Redis instance to create a powerful job queue system so you can easily build robust, scalable applications in AWS with Defang. We've updated our sample projects to showcase how to use them with Defang, including: Check them out if you're looking for some inspiration or a starting point for your own projects. We're always looking for ways to enhance the CLI experience. Here's what's new: It's the small refinements that can make a big difference in your workflow. Here are a few more things that didn't quite fit with the rest: Keep an eye out for these updates in the near future. As always, we'd love your help shaping the future of Defang, so let us know what you'd like to see next. Happy deploying! \ud83d\ude80 Hey folks! We\u2019re back with another exciting update about Defang. Our team has been working hard to bring you new features and improvements so you can get deploying faster. Here\u2019s a rundown of what we\u2019ve been up to this month: We've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the Defang homepage. Check out our video about all the new samples and functionality. With all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run defang generate you'll be able to filter through the samples and choose one. You can also filter through the samples on the Defang homepage and clone any of them with a simple command like defang new sveltekit. If you look through our GitHub organization, you'll start seeing loads of repos with the structure sample-<sample_name>-template. If you open them, you can create a new repo by clicking this button:  Not only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately. We\u2019re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy. To help you avoid potential pitfalls, we\u2019ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like postgres:<version>, redis:<version>, minio:<version>, etc. In the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which... Redis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your compose.yaml file and indicate that you want it managed by your cloud provider using x-defang-redis: true in your service definition. To make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly. We\u2019ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications. We\u2019re not stopping here! Here\u2019s a sneak peek at what\u2019s coming soon: Building on the momentum of Managed Redis, we\u2019re introducing Managed Postgres. Soon you\u2019ll be able to easily integrate a managed Postgres database into your deployment! Defang runs your services with ECS, and we're working on making it clearer what's happening under the hood. Stay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! \ud83d\ude80 Hey folks! There is a lot going on at Defang and we're excited to share our latest product updates with you. Over the last month, we've been working hard to improve the Defang system and make it even easier for you to deploy your applications. Here's a quick overview of what we've been up to: We know a lot of you are using Defang for the first time. To make it easier to get started, we've added a new way to install the Defang CLI. Now you can use npx to run the CLI without installing it globally. Just run: This will download the latest version of the Defang CLI and run it for you. No need to worry about installing or updating the CLI manually! Previously you could bring your own domain with Defang BYOC... but you had to host the DNS records with AWS Route 53 in the AWS account you were deploying to. Now you can point domains hosted anywhere to your Defang deployment and we'll take care of the rest. We'll help generate a Let's Encrypt certificate for your domain and automatically renew it for you. Some of you use Defang from a Windows PC and previously a few features didn't work correctly on Windows. Some stuff we've fixed: We've made a variety of small tweaks and improvements to the CLI which should make things a little bit cleaner and more stable. Defang is still in Beta and we know we've got to be rock solid by the time we release V1, so we've been working hard to improve the stability and reliability of the Defang architecture. We've been battle-testing different technologies to see how they hold up and have mad a few changes that should make things even better: Hey folks! Today, I'm going to share one of our code samples that will show you how to deploy a simple Slack bot. If you're looking to connect a cloud service to Slack to publish status updates, or something else like that, this should help you get started. We'll walk through a step-by-step process of writing a Go program using the github.com/slack-go/slack library to interact with the Slack API and easily deploy it using Defang. Before we dive into the details, let's make sure you have everything you need to get started: Install Defang CLI: Simplify your deployment process by installing the Defang CLI tool. Follow the instructions here to get it up and running quickly. Slack API Token: Create a Slack App at https://api.slack.com/apps, granting it the necessary permissions, including the\u00a0bot chat:write\u00a0scope.\n Install the app in your workspace: You'll need to install the app in your workspace for it to work. Click the \"Install to Workspace\" button in the Slack admin UI to do this. Mine says \"Reinstall\" because I've already installed it.\n Copy the Bot User OAuth Access Token: This token will authenticate your Slackbot with the Slack API.\n Invite the Bot to a Channel: To enable your Slackbot, invite it to the desired channel using the\u00a0@<botname>\u00a0command. In the screenshot below, my bot's name actually starts with the word invite, but if your bot is called mycoolbot you would invite it with @mycoolbot. This ensures your Slackbot has the required permissions to interact with the channel.\n Clone the Sample Code: Clone the Defang repository and navigate to the\u00a0samples/golang/slackbot\u00a0directory. This directory contains the sample code for the Slackbot. Now that we have everything set up, let's dive into the deployment process. Follow these steps to deploy your Slackbot effortlessly: Set Up Secrets: Prioritize security by configuring environment variables as sensitive config. Use the Defang CLI's\u00a0defang config set\u00a0command to set the\u00a0SLACK_TOKEN\u00a0and SLACK_CHANNEL_ID\u00a0configs.\nReplace\u00a0your_slack_token\u00a0and\u00a0your_slack_channel_id\u00a0with the respective values: Deploy the Slackbot:  Use the Defang CLI's\u00a0defang compose up\u00a0command to deploy. With your Slackbot up and running, let's explore how to make the most of it. Simply send a POST request to the\u00a0/\u00a0endpoint with a JSON body containing the message you want to post to the Slack channel. Popular tools like cURL or Postman can help you send the request: Congratulations! You've successfully deployed a Slackbot using Defang. If you deployed this as an internal service, you could use it to send status updates, alerts, or other important messages to your team. The possibilities are endless! Defang is aiming to reduce the barriers to entry to cloud application development. With our tooling, we make it really easy to deploy multi-service containerized applications to your own cloud with a single command. We want it to be easy for you to try Defang with as little friction as possible, though, so we have done the work so you can easily get started in a GitHub Codespaces environment, a GitPod Workspace, or even a local Dev Container. If you want to get started with Codespaces, you can just fork this repo. It comes with the Defang CLI pre-installed so you can start playing with it immediately. It's setup using the Defang CLI Dev Container Feature. Dev Containers are a cool way to provision and configure development environments and share that configuration with other people you are working with. It's a spec that is supported by VS Code, Visual Studio, the JetBrains IDEs like IntelliJ and PyCharm, DevPod and others. GitPod is another Cloud IDE, a bit like GitHub Codespaces. If prefer GitPod, you can try Defang in a GitPod environment by using this repo. As a student at University of British Columbia, new to the area of web development, I needed to develop and deploy a web application as a course project. It was already a huge challenge to complete the coding part. I could not believe that an even bigger challenge awaited. Picking the right platform and services is tough to start with. Do you know that AWS offers 200 different services? Lucky for me my professors\u2019 instructed us to use ECS. Otherwise, I would have been totally lost. Starting my project, honestly, it felt like I was hitting a brick wall. Diving into AWS with little to no clue was tough. Terms like \"ECS clusters,\" \"task definitions,\" and \"IAM roles\" were flying over my head. I was scared of messing something up, especially when it came to setting up things like ECR and load balancers. It was overwhelming when all these unfamiliar concepts came at me at once. I searched them up on the internet and went straight to a top-rated YouTube tutorial. I spent an hour and a half going through the whole video series. Those tutorials, as helpful as they were, couldn't fully prepare me for the hands-on challenges of real-life implementation. It's one thing to follow along with a guide when everything goes right; it's another to adapt when things don't quite match up to the tutorial\u2019s scenarios. I ran into so many problems with configuring services. Sometimes it is caused by carelessly selecting the wrong options; sometimes it is due to the fact that I have no idea what the buttons mean; sometimes it is just a bug with my code. Those errors triple the time it took to deploy my project. It was indeed extremely frustrating. Then I found Defang (www.defang.io), and it was like someone flipped a switch. Suddenly, all that complicated stuff became way easier. All I needed to do is to install Defang, build a compose.yaml file to describe my application, and run a single command - defang compose up. And Defang even has a Gen-AI assistant to help you write the code and compose file for your application. Defang automatically does all the heavy-lifting behind the scenes - configuring all the necessary services in a secure and optimal way, and automatically building and deploying my application components. No more late nights trying to figure out AWS docs or stressing about getting everything right. Deploying my Django Restaurant Homepage went from being my biggest worry to one of the smoothest parts of my project. With Defang, I could chill a bit and actually enjoy working on my project, focusing on the cool parts without getting bogged down by all the technical stuff. It made cloud deployment feel doable and fun, even for someone like me who was pretty much a beginner. Give it a try yourself - go to www.defang.io to get started. Try it yourself! Sample Code: Restaurant Homepage Defang Docs: Docs Announcing the Defang Public Beta A radically simpler way for developers to create, deploy, and manage cloud applications. Ever since we shipped our Private Beta in the summer of 2023, we have been working with early adopters and listening to their feedback. While these early customers loved the ease with which they could create, deploy, and manage a cloud application, they had one big request - to deploy their applications to their own cloud (e.g. AWS) account. This was important to them for a number of reasons - to leverage their cloud credits, to enforce their IAM roles and security settings, to integrate new application components with their existing deployments, and more. And so, today with our Public Beta, we are addressing this request. With today\u2019s release of Defang BYOC (Bring-your-own-Cloud), you can now enjoy all the benefits of Defang and deploy applications to your own AWS account! Our Private Beta experience is still available as Defang Playground for you to quickly and easily prototype applications and deploy them to our hosted environment. You can learn more about Defang here. Also check out our tutorials, samples, and FAQ to know more. Try the Public Beta! To try the Public Beta, please go to defang.io and click on Download to download the CLI and get started. We would love to have you kick the tires and give us your feedback! Once you sign up you\u2019ll receive an invitation to our Slack support channel in email. You are also welcome to file Github issues here. Stay Tuned for More While the Public Beta is an important step forward, we have already heard requests for additional features - from support for additional cloud platforms such as Azure and GCP, to the ability to easily write cloud-agnostic applications while leveraging the best of each cloud platform. We are already working on these items and shall have more to share in the coming months - stay tuned!"
  },
  {
    "id": 16,
    "text": "Defang is aiming to reduce the barriers to entry to cloud application development. With our tooling, we make it really easy to deploy multi-service containerized applications to your own cloud with a single command. We want it to be easy for you to try Defang with as little friction as possible, though, so we have done the work so you can easily get started in a GitHub Codespaces environment, a GitPod Workspace, or even a local Dev Container. If you want to get started with Codespaces, you can just fork this repo. It comes with the Defang CLI pre-installed so you can start playing with it immediately. It's setup using the Defang CLI Dev Container Feature. Dev Containers are a cool way to provision and configure development environments and share that configuration with other people you are working with. It's a spec that is supported by VS Code, Visual Studio, the JetBrains IDEs like IntelliJ and PyCharm, DevPod and others. GitPod is another Cloud IDE, a bit like GitHub Codespaces. If prefer GitPod, you can try Defang in a GitPod environment by using this repo."
  },
  {
    "id": 17,
    "text": "Hey folks! We've got another batch of updates to share with you about what the Defang team has been working on over the past month. We're committed to improving your deployment experience, so let's take a look at what's new. For our Windows users out there, we've made some changes to make your Defang experience even smoother: Deploying your apps from Windows just got a little bit nicer. We've added a new feature that will make it even easier to get started with Defang. We've created a flow where each sample provides a button that allows you to immediately deploy a template with a GitHub action which will automatically deploy the sample to the Defang Playground. That means you can easily make changes by committing them to your brand new repo, and everything automatically updates in the Playground. It's a great way to get started with Defang and start experimenting with your own projects. Try it now from our portal!  We first introduced this last month, but we've since rolled it out to everyone. We also added a sample that showcases the power of managed Redis: BullMQ with Redis. It demonstrates how you can use BullMQ and BullBoard with a managed Redis instance to create a powerful job queue system so you can easily build robust, scalable applications in AWS with Defang. We've updated our sample projects to showcase how to use them with Defang, including: Check them out if you're looking for some inspiration or a starting point for your own projects. We're always looking for ways to enhance the CLI experience. Here's what's new: It's the small refinements that can make a big difference in your workflow. Here are a few more things that didn't quite fit with the rest: Keep an eye out for these updates in the near future. As always, we'd love your help shaping the future of Defang, so let us know what you'd like to see next. Happy deploying! \ud83d\ude80"
  },
  {
    "id": 18,
    "text": "Hey folks! We've got another batch of updates to share with you about what the Defang team has been working on over the past month. We're committed to improving your deployment experience, so let's take a look at what's new. For our Windows users out there, we've made some changes to make your Defang experience even smoother: Deploying your apps from Windows just got a little bit nicer. We've added a new feature that will make it even easier to get started with Defang. We've created a flow where each sample provides a button that allows you to immediately deploy a template with a GitHub action which will automatically deploy the sample to the Defang Playground. That means you can easily make changes by committing them to your brand new repo, and everything automatically updates in the Playground. It's a great way to get started with Defang and start experimenting with your own projects. Try it now from our portal!  We first introduced this last month, but we've since rolled it out to everyone. We also added a sample that showcases the power of managed Redis: BullMQ with Redis. It demonstrates how you can use BullMQ and BullBoard with a managed Redis instance to create a powerful job queue system so you can easily build robust, scalable applications in AWS with Defang. We've updated our sample projects to showcase how to use them with Defang, including: Check them out if you're looking for some inspiration or a starting point for your own projects. We're always looking for ways to enhance the CLI experience. Here's what's new: It's the small refinements that can make a big difference in your workflow. Here are a few more things that didn't quite fit with the rest: Keep an eye out for these updates in the near future. As always, we'd love your help shaping the future of Defang, so let us know what you'd like to see next. Happy deploying! \ud83d\ude80 Hey folks! We\u2019re back with another exciting update about Defang. Our team has been working hard to bring you new features and improvements so you can get deploying faster. Here\u2019s a rundown of what we\u2019ve been up to this month: We've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the Defang homepage. Check out our video about all the new samples and functionality. With all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run defang generate you'll be able to filter through the samples and choose one. You can also filter through the samples on the Defang homepage and clone any of them with a simple command like defang new sveltekit. If you look through our GitHub organization, you'll start seeing loads of repos with the structure sample-<sample_name>-template. If you open them, you can create a new repo by clicking this button:  Not only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately. We\u2019re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy. To help you avoid potential pitfalls, we\u2019ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like postgres:<version>, redis:<version>, minio:<version>, etc. In the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which... Redis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your compose.yaml file and indicate that you want it managed by your cloud provider using x-defang-redis: true in your service definition. To make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly. We\u2019ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications. We\u2019re not stopping here! Here\u2019s a sneak peek at what\u2019s coming soon: Building on the momentum of Managed Redis, we\u2019re introducing Managed Postgres. Soon you\u2019ll be able to easily integrate a managed Postgres database into your deployment! Defang runs your services with ECS, and we're working on making it clearer what's happening under the hood. Stay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! \ud83d\ude80 Hey folks! There is a lot going on at Defang and we're excited to share our latest product updates with you. Over the last month, we've been working hard to improve the Defang system and make it even easier for you to deploy your applications. Here's a quick overview of what we've been up to: We know a lot of you are using Defang for the first time. To make it easier to get started, we've added a new way to install the Defang CLI. Now you can use npx to run the CLI without installing it globally. Just run: This will download the latest version of the Defang CLI and run it for you. No need to worry about installing or updating the CLI manually! Previously you could bring your own domain with Defang BYOC... but you had to host the DNS records with AWS Route 53 in the AWS account you were deploying to. Now you can point domains hosted anywhere to your Defang deployment and we'll take care of the rest. We'll help generate a Let's Encrypt certificate for your domain and automatically renew it for you. Some of you use Defang from a Windows PC and previously a few features didn't work correctly on Windows. Some stuff we've fixed: We've made a variety of small tweaks and improvements to the CLI which should make things a little bit cleaner and more stable. Defang is still in Beta and we know we've got to be rock solid by the time we release V1, so we've been working hard to improve the stability and reliability of the Defang architecture. We've been battle-testing different technologies to see how they hold up and have mad a few changes that should make things even better: Hey folks! Today, I'm going to share one of our code samples that will show you how to deploy a simple Slack bot. If you're looking to connect a cloud service to Slack to publish status updates, or something else like that, this should help you get started. We'll walk through a step-by-step process of writing a Go program using the github.com/slack-go/slack library to interact with the Slack API and easily deploy it using Defang. Before we dive into the details, let's make sure you have everything you need to get started: Install Defang CLI: Simplify your deployment process by installing the Defang CLI tool. Follow the instructions here to get it up and running quickly. Slack API Token: Create a Slack App at https://api.slack.com/apps, granting it the necessary permissions, including the\u00a0bot chat:write\u00a0scope.\n Install the app in your workspace: You'll need to install the app in your workspace for it to work. Click the \"Install to Workspace\" button in the Slack admin UI to do this. Mine says \"Reinstall\" because I've already installed it.\n Copy the Bot User OAuth Access Token: This token will authenticate your Slackbot with the Slack API.\n Invite the Bot to a Channel: To enable your Slackbot, invite it to the desired channel using the\u00a0@<botname>\u00a0command. In the screenshot below, my bot's name actually starts with the word invite, but if your bot is called mycoolbot you would invite it with @mycoolbot. This ensures your Slackbot has the required permissions to interact with the channel.\n Clone the Sample Code: Clone the Defang repository and navigate to the\u00a0samples/golang/slackbot\u00a0directory. This directory contains the sample code for the Slackbot. Now that we have everything set up, let's dive into the deployment process. Follow these steps to deploy your Slackbot effortlessly: Set Up Secrets: Prioritize security by configuring environment variables as sensitive config. Use the Defang CLI's\u00a0defang config set\u00a0command to set the\u00a0SLACK_TOKEN\u00a0and SLACK_CHANNEL_ID\u00a0configs.\nReplace\u00a0your_slack_token\u00a0and\u00a0your_slack_channel_id\u00a0with the respective values: Deploy the Slackbot:  Use the Defang CLI's\u00a0defang compose up\u00a0command to deploy. With your Slackbot up and running, let's explore how to make the most of it. Simply send a POST request to the\u00a0/\u00a0endpoint with a JSON body containing the message you want to post to the Slack channel. Popular tools like cURL or Postman can help you send the request: Congratulations! You've successfully deployed a Slackbot using Defang. If you deployed this as an internal service, you could use it to send status updates, alerts, or other important messages to your team. The possibilities are endless! Defang is aiming to reduce the barriers to entry to cloud application development. With our tooling, we make it really easy to deploy multi-service containerized applications to your own cloud with a single command. We want it to be easy for you to try Defang with as little friction as possible, though, so we have done the work so you can easily get started in a GitHub Codespaces environment, a GitPod Workspace, or even a local Dev Container. If you want to get started with Codespaces, you can just fork this repo. It comes with the Defang CLI pre-installed so you can start playing with it immediately. It's setup using the Defang CLI Dev Container Feature. Dev Containers are a cool way to provision and configure development environments and share that configuration with other people you are working with. It's a spec that is supported by VS Code, Visual Studio, the JetBrains IDEs like IntelliJ and PyCharm, DevPod and others. GitPod is another Cloud IDE, a bit like GitHub Codespaces. If prefer GitPod, you can try Defang in a GitPod environment by using this repo. As a student at University of British Columbia, new to the area of web development, I needed to develop and deploy a web application as a course project. It was already a huge challenge to complete the coding part. I could not believe that an even bigger challenge awaited. Picking the right platform and services is tough to start with. Do you know that AWS offers 200 different services? Lucky for me my professors\u2019 instructed us to use ECS. Otherwise, I would have been totally lost. Starting my project, honestly, it felt like I was hitting a brick wall. Diving into AWS with little to no clue was tough. Terms like \"ECS clusters,\" \"task definitions,\" and \"IAM roles\" were flying over my head. I was scared of messing something up, especially when it came to setting up things like ECR and load balancers. It was overwhelming when all these unfamiliar concepts came at me at once. I searched them up on the internet and went straight to a top-rated YouTube tutorial. I spent an hour and a half going through the whole video series. Those tutorials, as helpful as they were, couldn't fully prepare me for the hands-on challenges of real-life implementation. It's one thing to follow along with a guide when everything goes right; it's another to adapt when things don't quite match up to the tutorial\u2019s scenarios. I ran into so many problems with configuring services. Sometimes it is caused by carelessly selecting the wrong options; sometimes it is due to the fact that I have no idea what the buttons mean; sometimes it is just a bug with my code. Those errors triple the time it took to deploy my project. It was indeed extremely frustrating. Then I found Defang (www.defang.io), and it was like someone flipped a switch. Suddenly, all that complicated stuff became way easier. All I needed to do is to install Defang, build a compose.yaml file to describe my application, and run a single command - defang compose up. And Defang even has a Gen-AI assistant to help you write the code and compose file for your application. Defang automatically does all the heavy-lifting behind the scenes - configuring all the necessary services in a secure and optimal way, and automatically building and deploying my application components. No more late nights trying to figure out AWS docs or stressing about getting everything right. Deploying my Django Restaurant Homepage went from being my biggest worry to one of the smoothest parts of my project. With Defang, I could chill a bit and actually enjoy working on my project, focusing on the cool parts without getting bogged down by all the technical stuff. It made cloud deployment feel doable and fun, even for someone like me who was pretty much a beginner. Give it a try yourself - go to www.defang.io to get started. Try it yourself! Sample Code: Restaurant Homepage Defang Docs: Docs Announcing the Defang Public Beta A radically simpler way for developers to create, deploy, and manage cloud applications. Ever since we shipped our Private Beta in the summer of 2023, we have been working with early adopters and listening to their feedback. While these early customers loved the ease with which they could create, deploy, and manage a cloud application, they had one big request - to deploy their applications to their own cloud (e.g. AWS) account. This was important to them for a number of reasons - to leverage their cloud credits, to enforce their IAM roles and security settings, to integrate new application components with their existing deployments, and more. And so, today with our Public Beta, we are addressing this request. With today\u2019s release of Defang BYOC (Bring-your-own-Cloud), you can now enjoy all the benefits of Defang and deploy applications to your own AWS account! Our Private Beta experience is still available as Defang Playground for you to quickly and easily prototype applications and deploy them to our hosted environment. You can learn more about Defang here. Also check out our tutorials, samples, and FAQ to know more. Try the Public Beta! To try the Public Beta, please go to defang.io and click on Download to download the CLI and get started. We would love to have you kick the tires and give us your feedback! Once you sign up you\u2019ll receive an invitation to our Slack support channel in email. You are also welcome to file Github issues here. Stay Tuned for More While the Public Beta is an important step forward, we have already heard requests for additional features - from support for additional cloud platforms such as Azure and GCP, to the ability to easily write cloud-agnostic applications while leveraging the best of each cloud platform. We are already working on these items and shall have more to share in the coming months - stay tuned! Announcing the Private Beta for the Defang Opinionated Platform: Radically Simplifying and Cloud Application Development, Deployment, and Optimization We're thrilled to announce the release of our Private Beta for the Defang Opinionated Platform (DOP). We started Defang because, as practitioners with experience in both building cloud apps and building cloud platforms, we were unhappy with the state of the art. It was, and remains, too difficult to develop, deploy, and optimize cloud applications. In architecting and building a cloud app, developers need to consider a variety of factors such as performance, scalability, cost, security, flexibility, simplicity, etc. At the same time, they face a bewildering array of choices - from app architecture to choice of cloud platforms and services, to configuration and deployment, CI-CD, security setting, etc. - in topics that they are not experts in. Clearly, we need a better way. We realize that improving on this state of affairs is a long journey. Today, we are taking an initial step with the release of the Private Beta of the DOP. The DOP enables AI-assisted development, with the ability to specify a high-level prompt and get back an initial version of your cloud service code, which can then be refined further. The DOP simplifies CI-CD by automatically building and deploying new artifacts to your target environments when you push new code to your source repository, taking care of all dependency management and build tasks. And the DOP pre-provisions properly secured and configured staging and production environments for your application, optimized for security, scaling, and cost. Try the Private Beta! To try the Private Beta, please go to portal.defang.dev and register. We would love to have you kick the tires and give us your feedback! You can also check out our documentation, samples, and our Github repository. Stay Tuned for More While the Private Beta is a start, we have already heard requests for additional features from some of our early adopters and have a lot more in the pipeline! Top of the list is the ability to bring your own cloud accounts (AWS, Azure, GCP). Another frequent request is the ability to access a variety of compute and storage services native to the underlying platform while still maintaining app portability. And we also hear about the need to be able to monitor and optimize an app once deployed. We are already working on all these items and hope to have more to share in the coming months - stay tuned!"
  },
  {
    "id": 19,
    "text": "Defang is aiming to reduce the barriers to entry to cloud application development. With our tooling, we make it really easy to deploy multi-service containerized applications to your own cloud with a single command. We want it to be easy for you to try Defang with as little friction as possible, though, so we have done the work so you can easily get started in a GitHub Codespaces environment, a GitPod Workspace, or even a local Dev Container. If you want to get started with Codespaces, you can just fork this repo. It comes with the Defang CLI pre-installed so you can start playing with it immediately. It's setup using the Defang CLI Dev Container Feature. Dev Containers are a cool way to provision and configure development environments and share that configuration with other people you are working with. It's a spec that is supported by VS Code, Visual Studio, the JetBrains IDEs like IntelliJ and PyCharm, DevPod and others. GitPod is another Cloud IDE, a bit like GitHub Codespaces. If prefer GitPod, you can try Defang in a GitPod environment by using this repo."
  },
  {
    "id": 20,
    "text": "Hey folks! There is a lot going on at Defang and we're excited to share our latest product updates with you. Over the last month, we've been working hard to improve the Defang system and make it even easier for you to deploy your applications. Here's a quick overview of what we've been up to: We know a lot of you are using Defang for the first time. To make it easier to get started, we've added a new way to install the Defang CLI. Now you can use npx to run the CLI without installing it globally. Just run: This will download the latest version of the Defang CLI and run it for you. No need to worry about installing or updating the CLI manually! Previously you could bring your own domain with Defang BYOC... but you had to host the DNS records with AWS Route 53 in the AWS account you were deploying to. Now you can point domains hosted anywhere to your Defang deployment and we'll take care of the rest. We'll help generate a Let's Encrypt certificate for your domain and automatically renew it for you. Some of you use Defang from a Windows PC and previously a few features didn't work correctly on Windows. Some stuff we've fixed: We've made a variety of small tweaks and improvements to the CLI which should make things a little bit cleaner and more stable. Defang is still in Beta and we know we've got to be rock solid by the time we release V1, so we've been working hard to improve the stability and reliability of the Defang architecture. We've been battle-testing different technologies to see how they hold up and have mad a few changes that should make things even better: Hey folks! Today, I'm going to share one of our code samples that will show you how to deploy a simple Slack bot. If you're looking to connect a cloud service to Slack to publish status updates, or something else like that, this should help you get started. We'll walk through a step-by-step process of writing a Go program using the github.com/slack-go/slack library to interact with the Slack API and easily deploy it using Defang. Before we dive into the details, let's make sure you have everything you need to get started: Install Defang CLI: Simplify your deployment process by installing the Defang CLI tool. Follow the instructions here to get it up and running quickly. Slack API Token: Create a Slack App at https://api.slack.com/apps, granting it the necessary permissions, including the\u00a0bot chat:write\u00a0scope.\n Install the app in your workspace: You'll need to install the app in your workspace for it to work. Click the \"Install to Workspace\" button in the Slack admin UI to do this. Mine says \"Reinstall\" because I've already installed it.\n Copy the Bot User OAuth Access Token: This token will authenticate your Slackbot with the Slack API.\n Invite the Bot to a Channel: To enable your Slackbot, invite it to the desired channel using the\u00a0@<botname>\u00a0command. In the screenshot below, my bot's name actually starts with the word invite, but if your bot is called mycoolbot you would invite it with @mycoolbot. This ensures your Slackbot has the required permissions to interact with the channel.\n Clone the Sample Code: Clone the Defang repository and navigate to the\u00a0samples/golang/slackbot\u00a0directory. This directory contains the sample code for the Slackbot. Now that we have everything set up, let's dive into the deployment process. Follow these steps to deploy your Slackbot effortlessly: Set Up Secrets: Prioritize security by configuring environment variables as sensitive config. Use the Defang CLI's\u00a0defang config set\u00a0command to set the\u00a0SLACK_TOKEN\u00a0and SLACK_CHANNEL_ID\u00a0configs.\nReplace\u00a0your_slack_token\u00a0and\u00a0your_slack_channel_id\u00a0with the respective values: Deploy the Slackbot:  Use the Defang CLI's\u00a0defang compose up\u00a0command to deploy. With your Slackbot up and running, let's explore how to make the most of it. Simply send a POST request to the\u00a0/\u00a0endpoint with a JSON body containing the message you want to post to the Slack channel. Popular tools like cURL or Postman can help you send the request: Congratulations! You've successfully deployed a Slackbot using Defang. If you deployed this as an internal service, you could use it to send status updates, alerts, or other important messages to your team. The possibilities are endless! Defang is aiming to reduce the barriers to entry to cloud application development. With our tooling, we make it really easy to deploy multi-service containerized applications to your own cloud with a single command. We want it to be easy for you to try Defang with as little friction as possible, though, so we have done the work so you can easily get started in a GitHub Codespaces environment, a GitPod Workspace, or even a local Dev Container. If you want to get started with Codespaces, you can just fork this repo. It comes with the Defang CLI pre-installed so you can start playing with it immediately. It's setup using the Defang CLI Dev Container Feature. Dev Containers are a cool way to provision and configure development environments and share that configuration with other people you are working with. It's a spec that is supported by VS Code, Visual Studio, the JetBrains IDEs like IntelliJ and PyCharm, DevPod and others. GitPod is another Cloud IDE, a bit like GitHub Codespaces. If prefer GitPod, you can try Defang in a GitPod environment by using this repo. As a student at University of British Columbia, new to the area of web development, I needed to develop and deploy a web application as a course project. It was already a huge challenge to complete the coding part. I could not believe that an even bigger challenge awaited. Picking the right platform and services is tough to start with. Do you know that AWS offers 200 different services? Lucky for me my professors\u2019 instructed us to use ECS. Otherwise, I would have been totally lost. Starting my project, honestly, it felt like I was hitting a brick wall. Diving into AWS with little to no clue was tough. Terms like \"ECS clusters,\" \"task definitions,\" and \"IAM roles\" were flying over my head. I was scared of messing something up, especially when it came to setting up things like ECR and load balancers. It was overwhelming when all these unfamiliar concepts came at me at once. I searched them up on the internet and went straight to a top-rated YouTube tutorial. I spent an hour and a half going through the whole video series. Those tutorials, as helpful as they were, couldn't fully prepare me for the hands-on challenges of real-life implementation. It's one thing to follow along with a guide when everything goes right; it's another to adapt when things don't quite match up to the tutorial\u2019s scenarios. I ran into so many problems with configuring services. Sometimes it is caused by carelessly selecting the wrong options; sometimes it is due to the fact that I have no idea what the buttons mean; sometimes it is just a bug with my code. Those errors triple the time it took to deploy my project. It was indeed extremely frustrating. Then I found Defang (www.defang.io), and it was like someone flipped a switch. Suddenly, all that complicated stuff became way easier. All I needed to do is to install Defang, build a compose.yaml file to describe my application, and run a single command - defang compose up. And Defang even has a Gen-AI assistant to help you write the code and compose file for your application. Defang automatically does all the heavy-lifting behind the scenes - configuring all the necessary services in a secure and optimal way, and automatically building and deploying my application components. No more late nights trying to figure out AWS docs or stressing about getting everything right. Deploying my Django Restaurant Homepage went from being my biggest worry to one of the smoothest parts of my project. With Defang, I could chill a bit and actually enjoy working on my project, focusing on the cool parts without getting bogged down by all the technical stuff. It made cloud deployment feel doable and fun, even for someone like me who was pretty much a beginner. Give it a try yourself - go to www.defang.io to get started. Try it yourself! Sample Code: Restaurant Homepage Defang Docs: Docs"
  },
  {
    "id": 21,
    "text": "Defang is aiming to reduce the barriers to entry to cloud application development. With our tooling, we make it really easy to deploy multi-service containerized applications to your own cloud with a single command. We want it to be easy for you to try Defang with as little friction as possible, though, so we have done the work so you can easily get started in a GitHub Codespaces environment, a GitPod Workspace, or even a local Dev Container. If you want to get started with Codespaces, you can just fork this repo. It comes with the Defang CLI pre-installed so you can start playing with it immediately. It's setup using the Defang CLI Dev Container Feature. Dev Containers are a cool way to provision and configure development environments and share that configuration with other people you are working with. It's a spec that is supported by VS Code, Visual Studio, the JetBrains IDEs like IntelliJ and PyCharm, DevPod and others. GitPod is another Cloud IDE, a bit like GitHub Codespaces. If prefer GitPod, you can try Defang in a GitPod environment by using this repo."
  },
  {
    "id": 22,
    "text": "Hey folks! We\u2019re back with another exciting update about Defang. Our team has been working hard to bring you new features and improvements so you can get deploying faster. Here\u2019s a rundown of what we\u2019ve been up to this month: We've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the Defang homepage. Check out our video about all the new samples and functionality. With all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run defang generate you'll be able to filter through the samples and choose one. You can also filter through the samples on the Defang homepage and clone any of them with a simple command like defang new sveltekit. If you look through our GitHub organization, you'll start seeing loads of repos with the structure sample-<sample_name>-template. If you open them, you can create a new repo by clicking this button:  Not only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately. We\u2019re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy. To help you avoid potential pitfalls, we\u2019ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like postgres:<version>, redis:<version>, minio:<version>, etc. In the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which... Redis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your compose.yaml file and indicate that you want it managed by your cloud provider using x-defang-redis: true in your service definition. To make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly. We\u2019ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications. We\u2019re not stopping here! Here\u2019s a sneak peek at what\u2019s coming soon: Building on the momentum of Managed Redis, we\u2019re introducing Managed Postgres. Soon you\u2019ll be able to easily integrate a managed Postgres database into your deployment! Defang runs your services with ECS, and we're working on making it clearer what's happening under the hood. Stay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! \ud83d\ude80"
  },
  {
    "id": 23,
    "text": "Announcing the Defang Public Beta A radically simpler way for developers to create, deploy, and manage cloud applications. Ever since we shipped our Private Beta in the summer of 2023, we have been working with early adopters and listening to their feedback. While these early customers loved the ease with which they could create, deploy, and manage a cloud application, they had one big request - to deploy their applications to their own cloud (e.g. AWS) account. This was important to them for a number of reasons - to leverage their cloud credits, to enforce their IAM roles and security settings, to integrate new application components with their existing deployments, and more. And so, today with our Public Beta, we are addressing this request. With today\u2019s release of Defang BYOC (Bring-your-own-Cloud), you can now enjoy all the benefits of Defang and deploy applications to your own AWS account! Our Private Beta experience is still available as Defang Playground for you to quickly and easily prototype applications and deploy them to our hosted environment. You can learn more about Defang here. Also check out our tutorials, samples, and FAQ to know more. Try the Public Beta! To try the Public Beta, please go to defang.io and click on Download to download the CLI and get started. We would love to have you kick the tires and give us your feedback! Once you sign up you\u2019ll receive an invitation to our Slack support channel in email. You are also welcome to file Github issues here. Stay Tuned for More While the Public Beta is an important step forward, we have already heard requests for additional features - from support for additional cloud platforms such as Azure and GCP, to the ability to easily write cloud-agnostic applications while leveraging the best of each cloud platform. We are already working on these items and shall have more to share in the coming months - stay tuned! Announcing the Private Beta for the Defang Opinionated Platform: Radically Simplifying and Cloud Application Development, Deployment, and Optimization We're thrilled to announce the release of our Private Beta for the Defang Opinionated Platform (DOP). We started Defang because, as practitioners with experience in both building cloud apps and building cloud platforms, we were unhappy with the state of the art. It was, and remains, too difficult to develop, deploy, and optimize cloud applications. In architecting and building a cloud app, developers need to consider a variety of factors such as performance, scalability, cost, security, flexibility, simplicity, etc. At the same time, they face a bewildering array of choices - from app architecture to choice of cloud platforms and services, to configuration and deployment, CI-CD, security setting, etc. - in topics that they are not experts in. Clearly, we need a better way. We realize that improving on this state of affairs is a long journey. Today, we are taking an initial step with the release of the Private Beta of the DOP. The DOP enables AI-assisted development, with the ability to specify a high-level prompt and get back an initial version of your cloud service code, which can then be refined further. The DOP simplifies CI-CD by automatically building and deploying new artifacts to your target environments when you push new code to your source repository, taking care of all dependency management and build tasks. And the DOP pre-provisions properly secured and configured staging and production environments for your application, optimized for security, scaling, and cost. Try the Private Beta! To try the Private Beta, please go to portal.defang.dev and register. We would love to have you kick the tires and give us your feedback! You can also check out our documentation, samples, and our Github repository. Stay Tuned for More While the Private Beta is a start, we have already heard requests for additional features from some of our early adopters and have a lot more in the pipeline! Top of the list is the ability to bring your own cloud accounts (AWS, Azure, GCP). Another frequent request is the ability to access a variety of compute and storage services native to the underlying platform while still maintaining app portability. And we also hear about the need to be able to monitor and optimize an app once deployed. We are already working on all these items and hope to have more to share in the coming months - stay tuned!"
  },
  {
    "id": 24,
    "text": "Hey folks! We\u2019re back with another exciting update about Defang. Our team has been working hard to bring you new features and improvements so you can get deploying faster. Here\u2019s a rundown of what we\u2019ve been up to this month: We've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the Defang homepage. Check out our video about all the new samples and functionality. With all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run defang generate you'll be able to filter through the samples and choose one. You can also filter through the samples on the Defang homepage and clone any of them with a simple command like defang new sveltekit. If you look through our GitHub organization, you'll start seeing loads of repos with the structure sample-<sample_name>-template. If you open them, you can create a new repo by clicking this button:  Not only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately. We\u2019re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy. To help you avoid potential pitfalls, we\u2019ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like postgres:<version>, redis:<version>, minio:<version>, etc. In the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which... Redis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your compose.yaml file and indicate that you want it managed by your cloud provider using x-defang-redis: true in your service definition. To make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly. We\u2019ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications. We\u2019re not stopping here! Here\u2019s a sneak peek at what\u2019s coming soon: Building on the momentum of Managed Redis, we\u2019re introducing Managed Postgres. Soon you\u2019ll be able to easily integrate a managed Postgres database into your deployment! Defang runs your services with ECS, and we're working on making it clearer what's happening under the hood. Stay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! \ud83d\ude80"
  },
  {
    "id": 25,
    "text": "Hey folks! We\u2019re back with another exciting update about Defang. Our team has been working hard to bring you new features and improvements so you can get deploying faster. Here\u2019s a rundown of what we\u2019ve been up to this month: We've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the Defang homepage. Check out our video about all the new samples and functionality. With all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run defang generate you'll be able to filter through the samples and choose one. You can also filter through the samples on the Defang homepage and clone any of them with a simple command like defang new sveltekit. If you look through our GitHub organization, you'll start seeing loads of repos with the structure sample-<sample_name>-template. If you open them, you can create a new repo by clicking this button:  Not only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately. We\u2019re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy. To help you avoid potential pitfalls, we\u2019ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like postgres:<version>, redis:<version>, minio:<version>, etc. In the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which... Redis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your compose.yaml file and indicate that you want it managed by your cloud provider using x-defang-redis: true in your service definition. To make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly. We\u2019ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications. We\u2019re not stopping here! Here\u2019s a sneak peek at what\u2019s coming soon: Building on the momentum of Managed Redis, we\u2019re introducing Managed Postgres. Soon you\u2019ll be able to easily integrate a managed Postgres database into your deployment! Defang runs your services with ECS, and we're working on making it clearer what's happening under the hood. Stay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! \ud83d\ude80"
  },
  {
    "id": 26,
    "text": "Hey folks! We've got another batch of updates to share with you about what the Defang team has been working on over the past month. We're committed to improving your deployment experience, so let's take a look at what's new. For our Windows users out there, we've made some changes to make your Defang experience even smoother: Deploying your apps from Windows just got a little bit nicer. We've added a new feature that will make it even easier to get started with Defang. We've created a flow where each sample provides a button that allows you to immediately deploy a template with a GitHub action which will automatically deploy the sample to the Defang Playground. That means you can easily make changes by committing them to your brand new repo, and everything automatically updates in the Playground. It's a great way to get started with Defang and start experimenting with your own projects. Try it now from our portal!  We first introduced this last month, but we've since rolled it out to everyone. We also added a sample that showcases the power of managed Redis: BullMQ with Redis. It demonstrates how you can use BullMQ and BullBoard with a managed Redis instance to create a powerful job queue system so you can easily build robust, scalable applications in AWS with Defang. We've updated our sample projects to showcase how to use them with Defang, including: Check them out if you're looking for some inspiration or a starting point for your own projects. We're always looking for ways to enhance the CLI experience. Here's what's new: It's the small refinements that can make a big difference in your workflow. Here are a few more things that didn't quite fit with the rest: Keep an eye out for these updates in the near future. As always, we'd love your help shaping the future of Defang, so let us know what you'd like to see next. Happy deploying! \ud83d\ude80 Hey folks! We\u2019re back with another exciting update about Defang. Our team has been working hard to bring you new features and improvements so you can get deploying faster. Here\u2019s a rundown of what we\u2019ve been up to this month: We've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the Defang homepage. Check out our video about all the new samples and functionality. With all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run defang generate you'll be able to filter through the samples and choose one. You can also filter through the samples on the Defang homepage and clone any of them with a simple command like defang new sveltekit. If you look through our GitHub organization, you'll start seeing loads of repos with the structure sample-<sample_name>-template. If you open them, you can create a new repo by clicking this button:  Not only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately. We\u2019re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy. To help you avoid potential pitfalls, we\u2019ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like postgres:<version>, redis:<version>, minio:<version>, etc. In the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which... Redis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your compose.yaml file and indicate that you want it managed by your cloud provider using x-defang-redis: true in your service definition. To make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly. We\u2019ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications. We\u2019re not stopping here! Here\u2019s a sneak peek at what\u2019s coming soon: Building on the momentum of Managed Redis, we\u2019re introducing Managed Postgres. Soon you\u2019ll be able to easily integrate a managed Postgres database into your deployment! Defang runs your services with ECS, and we're working on making it clearer what's happening under the hood. Stay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! \ud83d\ude80"
  },
  {
    "id": 27,
    "text": "Hey folks! We've got another batch of updates to share with you about what the Defang team has been working on over the past month. We're committed to improving your deployment experience, so let's take a look at what's new. For our Windows users out there, we've made some changes to make your Defang experience even smoother: Deploying your apps from Windows just got a little bit nicer. We've added a new feature that will make it even easier to get started with Defang. We've created a flow where each sample provides a button that allows you to immediately deploy a template with a GitHub action which will automatically deploy the sample to the Defang Playground. That means you can easily make changes by committing them to your brand new repo, and everything automatically updates in the Playground. It's a great way to get started with Defang and start experimenting with your own projects. Try it now from our portal!  We first introduced this last month, but we've since rolled it out to everyone. We also added a sample that showcases the power of managed Redis: BullMQ with Redis. It demonstrates how you can use BullMQ and BullBoard with a managed Redis instance to create a powerful job queue system so you can easily build robust, scalable applications in AWS with Defang. We've updated our sample projects to showcase how to use them with Defang, including: Check them out if you're looking for some inspiration or a starting point for your own projects. We're always looking for ways to enhance the CLI experience. Here's what's new: It's the small refinements that can make a big difference in your workflow. Here are a few more things that didn't quite fit with the rest: Keep an eye out for these updates in the near future. As always, we'd love your help shaping the future of Defang, so let us know what you'd like to see next. Happy deploying! \ud83d\ude80 Hey folks! We\u2019re back with another exciting update about Defang. Our team has been working hard to bring you new features and improvements so you can get deploying faster. Here\u2019s a rundown of what we\u2019ve been up to this month: We've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the Defang homepage. Check out our video about all the new samples and functionality. With all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run defang generate you'll be able to filter through the samples and choose one. You can also filter through the samples on the Defang homepage and clone any of them with a simple command like defang new sveltekit. If you look through our GitHub organization, you'll start seeing loads of repos with the structure sample-<sample_name>-template. If you open them, you can create a new repo by clicking this button:  Not only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately. We\u2019re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy. To help you avoid potential pitfalls, we\u2019ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like postgres:<version>, redis:<version>, minio:<version>, etc. In the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which... Redis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your compose.yaml file and indicate that you want it managed by your cloud provider using x-defang-redis: true in your service definition. To make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly. We\u2019ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications. We\u2019re not stopping here! Here\u2019s a sneak peek at what\u2019s coming soon: Building on the momentum of Managed Redis, we\u2019re introducing Managed Postgres. Soon you\u2019ll be able to easily integrate a managed Postgres database into your deployment! Defang runs your services with ECS, and we're working on making it clearer what's happening under the hood. Stay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! \ud83d\ude80 Hey folks! There is a lot going on at Defang and we're excited to share our latest product updates with you. Over the last month, we've been working hard to improve the Defang system and make it even easier for you to deploy your applications. Here's a quick overview of what we've been up to: We know a lot of you are using Defang for the first time. To make it easier to get started, we've added a new way to install the Defang CLI. Now you can use npx to run the CLI without installing it globally. Just run: This will download the latest version of the Defang CLI and run it for you. No need to worry about installing or updating the CLI manually! Previously you could bring your own domain with Defang BYOC... but you had to host the DNS records with AWS Route 53 in the AWS account you were deploying to. Now you can point domains hosted anywhere to your Defang deployment and we'll take care of the rest. We'll help generate a Let's Encrypt certificate for your domain and automatically renew it for you. Some of you use Defang from a Windows PC and previously a few features didn't work correctly on Windows. Some stuff we've fixed: We've made a variety of small tweaks and improvements to the CLI which should make things a little bit cleaner and more stable. Defang is still in Beta and we know we've got to be rock solid by the time we release V1, so we've been working hard to improve the stability and reliability of the Defang architecture. We've been battle-testing different technologies to see how they hold up and have mad a few changes that should make things even better: Hey folks! Today, I'm going to share one of our code samples that will show you how to deploy a simple Slack bot. If you're looking to connect a cloud service to Slack to publish status updates, or something else like that, this should help you get started. We'll walk through a step-by-step process of writing a Go program using the github.com/slack-go/slack library to interact with the Slack API and easily deploy it using Defang. Before we dive into the details, let's make sure you have everything you need to get started: Install Defang CLI: Simplify your deployment process by installing the Defang CLI tool. Follow the instructions here to get it up and running quickly. Slack API Token: Create a Slack App at https://api.slack.com/apps, granting it the necessary permissions, including the\u00a0bot chat:write\u00a0scope.\n Install the app in your workspace: You'll need to install the app in your workspace for it to work. Click the \"Install to Workspace\" button in the Slack admin UI to do this. Mine says \"Reinstall\" because I've already installed it.\n Copy the Bot User OAuth Access Token: This token will authenticate your Slackbot with the Slack API.\n Invite the Bot to a Channel: To enable your Slackbot, invite it to the desired channel using the\u00a0@<botname>\u00a0command. In the screenshot below, my bot's name actually starts with the word invite, but if your bot is called mycoolbot you would invite it with @mycoolbot. This ensures your Slackbot has the required permissions to interact with the channel.\n Clone the Sample Code: Clone the Defang repository and navigate to the\u00a0samples/golang/slackbot\u00a0directory. This directory contains the sample code for the Slackbot. Now that we have everything set up, let's dive into the deployment process. Follow these steps to deploy your Slackbot effortlessly: Set Up Secrets: Prioritize security by configuring environment variables as sensitive config. Use the Defang CLI's\u00a0defang config set\u00a0command to set the\u00a0SLACK_TOKEN\u00a0and SLACK_CHANNEL_ID\u00a0configs.\nReplace\u00a0your_slack_token\u00a0and\u00a0your_slack_channel_id\u00a0with the respective values: Deploy the Slackbot:  Use the Defang CLI's\u00a0defang compose up\u00a0command to deploy. With your Slackbot up and running, let's explore how to make the most of it. Simply send a POST request to the\u00a0/\u00a0endpoint with a JSON body containing the message you want to post to the Slack channel. Popular tools like cURL or Postman can help you send the request: Congratulations! You've successfully deployed a Slackbot using Defang. If you deployed this as an internal service, you could use it to send status updates, alerts, or other important messages to your team. The possibilities are endless! Defang is aiming to reduce the barriers to entry to cloud application development. With our tooling, we make it really easy to deploy multi-service containerized applications to your own cloud with a single command. We want it to be easy for you to try Defang with as little friction as possible, though, so we have done the work so you can easily get started in a GitHub Codespaces environment, a GitPod Workspace, or even a local Dev Container. If you want to get started with Codespaces, you can just fork this repo. It comes with the Defang CLI pre-installed so you can start playing with it immediately. It's setup using the Defang CLI Dev Container Feature. Dev Containers are a cool way to provision and configure development environments and share that configuration with other people you are working with. It's a spec that is supported by VS Code, Visual Studio, the JetBrains IDEs like IntelliJ and PyCharm, DevPod and others. GitPod is another Cloud IDE, a bit like GitHub Codespaces. If prefer GitPod, you can try Defang in a GitPod environment by using this repo. As a student at University of British Columbia, new to the area of web development, I needed to develop and deploy a web application as a course project. It was already a huge challenge to complete the coding part. I could not believe that an even bigger challenge awaited. Picking the right platform and services is tough to start with. Do you know that AWS offers 200 different services? Lucky for me my professors\u2019 instructed us to use ECS. Otherwise, I would have been totally lost. Starting my project, honestly, it felt like I was hitting a brick wall. Diving into AWS with little to no clue was tough. Terms like \"ECS clusters,\" \"task definitions,\" and \"IAM roles\" were flying over my head. I was scared of messing something up, especially when it came to setting up things like ECR and load balancers. It was overwhelming when all these unfamiliar concepts came at me at once. I searched them up on the internet and went straight to a top-rated YouTube tutorial. I spent an hour and a half going through the whole video series. Those tutorials, as helpful as they were, couldn't fully prepare me for the hands-on challenges of real-life implementation. It's one thing to follow along with a guide when everything goes right; it's another to adapt when things don't quite match up to the tutorial\u2019s scenarios. I ran into so many problems with configuring services. Sometimes it is caused by carelessly selecting the wrong options; sometimes it is due to the fact that I have no idea what the buttons mean; sometimes it is just a bug with my code. Those errors triple the time it took to deploy my project. It was indeed extremely frustrating. Then I found Defang (www.defang.io), and it was like someone flipped a switch. Suddenly, all that complicated stuff became way easier. All I needed to do is to install Defang, build a compose.yaml file to describe my application, and run a single command - defang compose up. And Defang even has a Gen-AI assistant to help you write the code and compose file for your application. Defang automatically does all the heavy-lifting behind the scenes - configuring all the necessary services in a secure and optimal way, and automatically building and deploying my application components. No more late nights trying to figure out AWS docs or stressing about getting everything right. Deploying my Django Restaurant Homepage went from being my biggest worry to one of the smoothest parts of my project. With Defang, I could chill a bit and actually enjoy working on my project, focusing on the cool parts without getting bogged down by all the technical stuff. It made cloud deployment feel doable and fun, even for someone like me who was pretty much a beginner. Give it a try yourself - go to www.defang.io to get started. Try it yourself! Sample Code: Restaurant Homepage Defang Docs: Docs Announcing the Defang Public Beta A radically simpler way for developers to create, deploy, and manage cloud applications. Ever since we shipped our Private Beta in the summer of 2023, we have been working with early adopters and listening to their feedback. While these early customers loved the ease with which they could create, deploy, and manage a cloud application, they had one big request - to deploy their applications to their own cloud (e.g. AWS) account. This was important to them for a number of reasons - to leverage their cloud credits, to enforce their IAM roles and security settings, to integrate new application components with their existing deployments, and more. And so, today with our Public Beta, we are addressing this request. With today\u2019s release of Defang BYOC (Bring-your-own-Cloud), you can now enjoy all the benefits of Defang and deploy applications to your own AWS account! Our Private Beta experience is still available as Defang Playground for you to quickly and easily prototype applications and deploy them to our hosted environment. You can learn more about Defang here. Also check out our tutorials, samples, and FAQ to know more. Try the Public Beta! To try the Public Beta, please go to defang.io and click on Download to download the CLI and get started. We would love to have you kick the tires and give us your feedback! Once you sign up you\u2019ll receive an invitation to our Slack support channel in email. You are also welcome to file Github issues here. Stay Tuned for More While the Public Beta is an important step forward, we have already heard requests for additional features - from support for additional cloud platforms such as Azure and GCP, to the ability to easily write cloud-agnostic applications while leveraging the best of each cloud platform. We are already working on these items and shall have more to share in the coming months - stay tuned! Announcing the Private Beta for the Defang Opinionated Platform: Radically Simplifying and Cloud Application Development, Deployment, and Optimization We're thrilled to announce the release of our Private Beta for the Defang Opinionated Platform (DOP). We started Defang because, as practitioners with experience in both building cloud apps and building cloud platforms, we were unhappy with the state of the art. It was, and remains, too difficult to develop, deploy, and optimize cloud applications. In architecting and building a cloud app, developers need to consider a variety of factors such as performance, scalability, cost, security, flexibility, simplicity, etc. At the same time, they face a bewildering array of choices - from app architecture to choice of cloud platforms and services, to configuration and deployment, CI-CD, security setting, etc. - in topics that they are not experts in. Clearly, we need a better way. We realize that improving on this state of affairs is a long journey. Today, we are taking an initial step with the release of the Private Beta of the DOP. The DOP enables AI-assisted development, with the ability to specify a high-level prompt and get back an initial version of your cloud service code, which can then be refined further. The DOP simplifies CI-CD by automatically building and deploying new artifacts to your target environments when you push new code to your source repository, taking care of all dependency management and build tasks. And the DOP pre-provisions properly secured and configured staging and production environments for your application, optimized for security, scaling, and cost. Try the Private Beta! To try the Private Beta, please go to portal.defang.dev and register. We would love to have you kick the tires and give us your feedback! You can also check out our documentation, samples, and our Github repository. Stay Tuned for More While the Private Beta is a start, we have already heard requests for additional features from some of our early adopters and have a lot more in the pipeline! Top of the list is the ability to bring your own cloud accounts (AWS, Azure, GCP). Another frequent request is the ability to access a variety of compute and storage services native to the underlying platform while still maintaining app portability. And we also hear about the need to be able to monitor and optimize an app once deployed. We are already working on all these items and hope to have more to share in the coming months - stay tuned!"
  },
  {
    "id": 28,
    "text": "Hey folks! We\u2019re back with another exciting update about Defang. Our team has been working hard to bring you new features and improvements so you can get deploying faster. Here\u2019s a rundown of what we\u2019ve been up to this month: We've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the Defang homepage. Check out our video about all the new samples and functionality. With all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run defang generate you'll be able to filter through the samples and choose one. You can also filter through the samples on the Defang homepage and clone any of them with a simple command like defang new sveltekit. If you look through our GitHub organization, you'll start seeing loads of repos with the structure sample-<sample_name>-template. If you open them, you can create a new repo by clicking this button:  Not only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately. We\u2019re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy. To help you avoid potential pitfalls, we\u2019ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like postgres:<version>, redis:<version>, minio:<version>, etc. In the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which... Redis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your compose.yaml file and indicate that you want it managed by your cloud provider using x-defang-redis: true in your service definition. To make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly. We\u2019ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications. We\u2019re not stopping here! Here\u2019s a sneak peek at what\u2019s coming soon: Building on the momentum of Managed Redis, we\u2019re introducing Managed Postgres. Soon you\u2019ll be able to easily integrate a managed Postgres database into your deployment! Defang runs your services with ECS, and we're working on making it clearer what's happening under the hood. Stay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! \ud83d\ude80"
  },
  {
    "id": 29,
    "text": "Hey folks! We\u2019re back with another exciting update about Defang. Our team has been working hard to bring you new features and improvements so you can get deploying faster. Here\u2019s a rundown of what we\u2019ve been up to this month: We've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the Defang homepage. Check out our video about all the new samples and functionality. With all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run defang generate you'll be able to filter through the samples and choose one. You can also filter through the samples on the Defang homepage and clone any of them with a simple command like defang new sveltekit. If you look through our GitHub organization, you'll start seeing loads of repos with the structure sample-<sample_name>-template. If you open them, you can create a new repo by clicking this button:  Not only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately. We\u2019re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy. To help you avoid potential pitfalls, we\u2019ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like postgres:<version>, redis:<version>, minio:<version>, etc. In the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which... Redis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your compose.yaml file and indicate that you want it managed by your cloud provider using x-defang-redis: true in your service definition. To make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly. We\u2019ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications. We\u2019re not stopping here! Here\u2019s a sneak peek at what\u2019s coming soon: Building on the momentum of Managed Redis, we\u2019re introducing Managed Postgres. Soon you\u2019ll be able to easily integrate a managed Postgres database into your deployment! Defang runs your services with ECS, and we're working on making it clearer what's happening under the hood. Stay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! \ud83d\ude80"
  },
  {
    "id": 30,
    "text": "Hey folks! Today, I'm going to share one of our code samples that will show you how to deploy a simple Slack bot. If you're looking to connect a cloud service to Slack to publish status updates, or something else like that, this should help you get started. We'll walk through a step-by-step process of writing a Go program using the github.com/slack-go/slack library to interact with the Slack API and easily deploy it using Defang. Before we dive into the details, let's make sure you have everything you need to get started: Install Defang CLI: Simplify your deployment process by installing the Defang CLI tool. Follow the instructions here to get it up and running quickly. Slack API Token: Create a Slack App at https://api.slack.com/apps, granting it the necessary permissions, including the\u00a0bot chat:write\u00a0scope.\n Install the app in your workspace: You'll need to install the app in your workspace for it to work. Click the \"Install to Workspace\" button in the Slack admin UI to do this. Mine says \"Reinstall\" because I've already installed it.\n Copy the Bot User OAuth Access Token: This token will authenticate your Slackbot with the Slack API.\n Invite the Bot to a Channel: To enable your Slackbot, invite it to the desired channel using the\u00a0@<botname>\u00a0command. In the screenshot below, my bot's name actually starts with the word invite, but if your bot is called mycoolbot you would invite it with @mycoolbot. This ensures your Slackbot has the required permissions to interact with the channel.\n Clone the Sample Code: Clone the Defang repository and navigate to the\u00a0samples/golang/slackbot\u00a0directory. This directory contains the sample code for the Slackbot. Now that we have everything set up, let's dive into the deployment process. Follow these steps to deploy your Slackbot effortlessly: Set Up Secrets: Prioritize security by configuring environment variables as sensitive config. Use the Defang CLI's\u00a0defang config set\u00a0command to set the\u00a0SLACK_TOKEN\u00a0and SLACK_CHANNEL_ID\u00a0configs.\nReplace\u00a0your_slack_token\u00a0and\u00a0your_slack_channel_id\u00a0with the respective values: Deploy the Slackbot:  Use the Defang CLI's\u00a0defang compose up\u00a0command to deploy. With your Slackbot up and running, let's explore how to make the most of it. Simply send a POST request to the\u00a0/\u00a0endpoint with a JSON body containing the message you want to post to the Slack channel. Popular tools like cURL or Postman can help you send the request: Congratulations! You've successfully deployed a Slackbot using Defang. If you deployed this as an internal service, you could use it to send status updates, alerts, or other important messages to your team. The possibilities are endless!"
  },
  {
    "id": 31,
    "text": "Hey folks! We've got another batch of updates to share with you about what the Defang team has been working on over the past month. We're committed to improving your deployment experience, so let's take a look at what's new. For our Windows users out there, we've made some changes to make your Defang experience even smoother: Deploying your apps from Windows just got a little bit nicer. We've added a new feature that will make it even easier to get started with Defang. We've created a flow where each sample provides a button that allows you to immediately deploy a template with a GitHub action which will automatically deploy the sample to the Defang Playground. That means you can easily make changes by committing them to your brand new repo, and everything automatically updates in the Playground. It's a great way to get started with Defang and start experimenting with your own projects. Try it now from our portal!  We first introduced this last month, but we've since rolled it out to everyone. We also added a sample that showcases the power of managed Redis: BullMQ with Redis. It demonstrates how you can use BullMQ and BullBoard with a managed Redis instance to create a powerful job queue system so you can easily build robust, scalable applications in AWS with Defang. We've updated our sample projects to showcase how to use them with Defang, including: Check them out if you're looking for some inspiration or a starting point for your own projects. We're always looking for ways to enhance the CLI experience. Here's what's new: It's the small refinements that can make a big difference in your workflow. Here are a few more things that didn't quite fit with the rest: Keep an eye out for these updates in the near future. As always, we'd love your help shaping the future of Defang, so let us know what you'd like to see next. Happy deploying! \ud83d\ude80"
  },
  {
    "id": 32,
    "text": "Redirecting to the documentation..."
  },
  {
    "id": 33,
    "text": "Documentation of all the CLI commands Defang CLI manages services on the Defang cluster Manually run a command with the CD task (for BYOC only) Cancel the current CD operation Destroy the service stack Refresh and then destroy the service stack List all the projects and stacks in the CD cluster Refresh the service stack Destroy the CD cluster without destroying the services Manage certificates Generate a TLS certificate Work with local Compose files Reads a Compose file and shows the generated config Like 'stop' but also deprovisions the services from the cluster Reads a Compose file and restarts its services Reads a Compose file and deploys services to the cluster Reads a Compose file and stops its services Like 'start' but immediately tracks the progress of the deployment Add, update, or delete service config Adds or updates a sensitive config value List configs Removes one or more config values Generate a sample Defang project in the current folder Authenticate to the Defang cluster Log out Restart one or more services Get list of services on the cluster Tail logs from one or more services Read and/or agree the Defang terms of service Manage personal access tokens Get version information for the CLI and Fabric service Show the current user"
  },
  {
    "id": 34,
    "text": "Some concepts to help explain how the Defang system is organized and tooling that will help you manage your applications. Defang Playground allows you to get a feel for how Defang works without running production workloads in your own cloud accounts. Defang allows you deploy services, defined as containers, to your own cloud accounts. How accounts are organized in Defang. Defang uses AI to help you generate a starting point for your cloud applications. Defang allows you to use the compose.yaml specification to deploy your application to the cloud. Define your Defang services with Pulumi to integrate with other cloud resources. Defang allows you deploy services, defined as containers, to the cloud. Configuring your Defang application, including sensitive config values like API keys, passwords, and other credentials. Defang configures your cloud applications and services with security best practices. Defang helps you provision SSL certificates and expose your services to the internet. Defang helps you safely configure your services' networking. Customize the resources your Defang services use. Defang can help you provision managed storage services. Defang will build your services in the cloud and manage the deployment process for you. Monitor and debug your Defang services with the Defang CLI and portal. Defang uses AI to help you debug your cloud applications. You can log into the Defang portal to view the state of your defang services."
  },
  {
    "id": 35,
    "text": "Defang allows you to use your own cloud accounts to deploy your applications. Click on a link below to read documentation about specific providers. The Defang Playground is a free tier that allows you to experiment with Defang. Defang allows you to easily create and manage full, scalable applications with AWS. Defang will allow you to easily create and manage full, scalable applications with Azure. Defang will allow you to easily create and manage full, scalable applications with GCP."
  },
  {
    "id": 36,
    "text": "Check out these tutorials to learn more about the Defang platform. Defang supports generating new project outlines using integration with an AI model. Using this feature, you can describe what you would like the service to do and the CLI will then generate a project outline with all the files required to make it work. This tutorial assumes that the code normally gets built into a container and has a Dockerfile file in the current folder. This example is useful if you already have a Docker container built manually or through a CI/CD system and have that the resulting image is available in a public or private repository accessible by Defang. Installing Dependencies This tutorial guides you to create and deploy a GPU-powered application on AWS using Defang and Mistral. We will walk you through the whole deployment process based on this Deploying Mistral with vLLM sample. In our latest version of Defang BYOC (Bring Your Own Cloud), you can now use your own domain name. (Currently, this new feature is not applicable to Defang Playground) This tutorial will guide you to set up Defang in both Codespaces and Gitpod."
  },
  {
    "id": 37,
    "text": "Defang CLI manages services on the Defang cluster"
  },
  {
    "id": 38,
    "text": "Manually run a command with the CD task (for BYOC only)"
  },
  {
    "id": 39,
    "text": "Cancel the current CD operation"
  },
  {
    "id": 40,
    "text": "Destroy the service stack"
  },
  {
    "id": 41,
    "text": "Refresh and then destroy the service stack"
  },
  {
    "id": 42,
    "text": "List all the projects and stacks in the CD cluster"
  },
  {
    "id": 43,
    "text": "Refresh the service stack"
  },
  {
    "id": 44,
    "text": "Destroy the CD cluster without destroying the services"
  },
  {
    "id": 45,
    "text": "Manage certificates"
  },
  {
    "id": 46,
    "text": "Generate a TLS certificate"
  },
  {
    "id": 47,
    "text": "Work with local Compose files"
  },
  {
    "id": 48,
    "text": "Reads a Compose file and shows the generated config"
  },
  {
    "id": 49,
    "text": "Like 'stop' but also deprovisions the services from the cluster"
  },
  {
    "id": 50,
    "text": "Reads a Compose file and restarts its services"
  },
  {
    "id": 51,
    "text": "Reads a Compose file and deploys services to the cluster"
  },
  {
    "id": 52,
    "text": "Reads a Compose file and stops its services"
  },
  {
    "id": 53,
    "text": "Like 'start' but immediately tracks the progress of the deployment"
  },
  {
    "id": 54,
    "text": "Add, update, or delete service config"
  },
  {
    "id": 55,
    "text": "Adds or updates a sensitive config value"
  },
  {
    "id": 56,
    "text": "List configs"
  },
  {
    "id": 57,
    "text": "Removes one or more config values"
  },
  {
    "id": 58,
    "text": "Generate a sample Defang project in the current folder"
  },
  {
    "id": 59,
    "text": "Authenticate to the Defang cluster"
  },
  {
    "id": 60,
    "text": "Log out"
  },
  {
    "id": 61,
    "text": "Restart one or more services"
  },
  {
    "id": 62,
    "text": "Get list of services on the cluster"
  },
  {
    "id": 63,
    "text": "Tail logs from one or more services"
  },
  {
    "id": 64,
    "text": "Read and/or agree the Defang terms of service"
  },
  {
    "id": 65,
    "text": "Manage personal access tokens"
  },
  {
    "id": 66,
    "text": "Get version information for the CLI and Fabric service"
  },
  {
    "id": 67,
    "text": "Show the current user"
  },
  {
    "id": 68,
    "text": "In this section, we'll be talking about a couple different topics related to accounts in Defang. First we'll cover authentication and how to create an account, and then we'll talk about how resources are organized within a cloud environment using your account info. Defang requires an account so we can organize your resources and provide you with a way to manage them. We also use your account to authenticate you when you interact with Defang Playground and the Defang Portal. Eventually, billing and payment information will be associated with your account. To create an account, simply login to Defang and accept the terms of service using the CLI. At the moment, the only way to authenticate with Defang is through GitHub. We plan to offer other authentication providers in the future. Your GitHub username will be used as your Defang username and your Defang username is used to group all your services and to generate domains for your services with the following structure: Keep in mind that your Defang account is separate from your cloud provider account. You will need to authenticate with your cloud provider account separately to deploy services to your own cloud account. We plan to introduce a more robust system for managing accounts, permissions, service groups, etc. in the future."
  },
  {
    "id": 69,
    "text": "You might be familiar with docker-compose.yml files, now known as the Compose specification and compose.yaml files. It's a simple way to define and run multi-container Docker applications. Defang allows you to use compose.yaml files to deploy your application to the cloud. You can define your services using a compose.yaml file in the root of your project, or use the defang generate command to generate one (along with other resources). This file is used to define your application's services and how they run. You can edit this file to add more services or change the configuration of existing services. When you run defang compose up, Defang will read your compose.yaml file and deploy the services named in that file to the cloud. One thing to keep in mind is that, at the time of this writing, Defang identifies services by the user/account name and the service name (as defined in the compose.yaml file). This means that if you have multiple Defang projects with the same service name, they will conflict with each other. We plan to provide a more robust system for managing service names and protecting against conflicts in the future. If you have a service that depends on a secret like an api key, you can set that secret using the CLI: and then connect it to the service by specifying it in the compose.yaml: Read more about configuration in the configuration page and about secrets in the secrets page."
  },
  {
    "id": 70,
    "text": "Defang allows you to configure your application using environment variables. You can set environment variables in your compose.yaml file, or in your Pulumi program. Using Pulumi gives you the advantage of being able to manage your environment variables across different environments using Pulumi stacks. You can find a sample of how to set environment variables with Pulumi here. The Defang CLI allows you to securely store sensitive information such as API keys, passwords, and other credentials. You can use sensitive config by specifying them in the environment section of a service in a compose.yaml file without any value, or by specifying an environment key with a null value in your Pulumi code. Use the defang config command of the Defang CLI to manage the values. If you have created a service before a secret you can connect it by running the defang compose start command if using the defang compose workflow. If you are using the Pulumi-based workflow you will need to redeploy using Pulumi. You can find a sample of how to set sensitive config values here. Here are the different ways sensitive config values are stored depending on the provider you are using:"
  },
  {
    "id": 71,
    "text": "Defang includes an AI-driven tool to help you debug your cloud applications. The AI assistant will use your service logs as well as the files in your project to help you identify and resolve issues. The AI debugging assistant is currently in preview and is currently limited in its capabilities. We plan to expand the capabilities of the AI assistant in the future."
  },
  {
    "id": 72,
    "text": "Defang aims to make it easier to deploy your services to the cloud. Specifically, Defang's goal is to make it easier to deploy your workloads to your own cloud accounts. We refer to this as bring-your-own-cloud (BYOC). We also provide Defang Playground, but it is only intended for non-production workloads so you can get a feel for how Defang works. Defang provisions and configures the necessary native managed services from your cloud provider to get your services up and running. For example, on AWS, Defang will configure an ALB, setup ECR, configure CloudWatch, and run your service on ECS and more. The following lists the existing and planned support for cloud providers. Defang does not install or run any Defang or third party services at runtime.\nDefang does run the Defang build service to build your container images, which terminates after every build. Public Beta of the v1 Defang BYOC AWS Provider is released as of Feb 1 2024. Please read the AWS Provider documentation for more details about how the AWS provider works and how to get started. We will be working on Azure support in the future. If you are interested in Azure support, please vote on this issue. We will be working on GCP support in the future. If you are interested in GCP support, please vote on this issue."
  },
  {
    "id": 73,
    "text": "Defang aims to make it easier to deploy your services to the cloud. Specifically, Defang's goal is to make it easier to deploy your workloads to your own cloud accounts. We refer to this as bring-your-own-cloud (BYOC) which you can read about in more depth here. We also provide Defang Playground, but it is only intended for non-production workloads so you can get a feel for how Defang works. Defang Playground is a free tier that allows you to deploy services to a Defang-hosted cloud account without needing to manage your own. It is intended for non-production workloads only. Please note that the Defang Playground is intended for testing/learning purposes only. The environment may be reset at any time. Do not run production workloads in Defang Playground. There are a few limitations to Defang Playground. These limitations are in place to ensure that Defang Playground is only used for non-production workloads. If you are interested in running production workloads, you should use Defang BYOC. When you deploy a service to Defang Playground, it will be assigned a domain under the defang.dev domain. We do not support pointing your own domains to Defang Playground services."
  },
  {
    "id": 74,
    "text": "When you deploy using Defang, whether it's with defang compose up with a compose file or using a Pulumi program, Defang will build your services in the cloud and manage the deployment process for you. If you provide a Dockerfile and build context, Defang will upload the files found within the build context to the cloud (either yours in Defang BYOC or ours in Defang Playground), build the image, and store it in the cloud provider's container registry. When you run a deployment to update one or more services, Defang will also make sure to get your new services up and running before deprovisioning any old services so you don't have to worry about downtime. In Defang BYOC, Defang will use your cloud provider account to build and store your images. In Defang Playground we will build and store your images for you. Workloads with GPUs do not support zero downtime deployments. If you have a workload with a GPU, you will experience downtime during updates. Defang defaults to \"spot\" instances. This is a cost-effective way to run your workloads, but it does mean that your workloads can be interrupted at any time. This is consistent with the 12 Factor principle of disposability. In the future, we may provide a way to use \"on-demand\" instances for workloads that require more stability."
  },
  {
    "id": 75,
    "text": "Defang helps you provision SSL certificates and expose your services to the internet. You can expose your services using Defang-hosted domains or bring your own custom domain with Defang BYOC. This page explains how to configure your services to be accessible from the public internet. To make your service accessible from the public internet with Defang-hosted domains (under defang.app), you simply expose ports in your service definition. Defang-hosted domains use a structure that is based on your username and service name. If you have a publicly accessible service, you will automatically receive a domain to access it. If you're deploying to the Defang Playground, your domain will be structured as follows: If you're using Defang BYOC, your domain will be: As of now, the Pulumi provider does not support Defang BYOC. If you are using Defang BYOC, you can bring your own custom domain to use with your services. There are two main limitations to keep in mind when using Defang BYOC: If you want to use your existing DNS provider for other aspects of your system, you can do so and just point a subdomain to your provider's nameservers using NS records. As of now, the Pulumi provider does not support Defang BYOC and the Defang Playground does not support bringing your own domain, since it is not for production use."
  },
  {
    "id": 76,
    "text": "Defang includes an AI-driven assistant that translates natural language prompts to an outline for your project that you can then refine. The AI assistant is available through the Defang CLI. The AI assistant is currently in preview and only supports a limited set of prompts, varying in complexity. We plan to expand the capabilities of the AI assistant in the future. We are working on expanding the range of supported prompts and improving the accuracy of the AI assistant. If you have any feedback or suggestions, please let us know by opening an issue. Here are some example prompts that the AI assistant can help you with: An example of a more complex prompt"
  },
  {
    "id": 77,
    "text": "Defang helps you provision the infrastructure you need to run your services. That infrastructure is designed to scale in and out without persistent storage, so you can build highly scalable services. But Defang can also help you provision managed services to store and persist your data, like caches, databases* , and object storage*. Redis is an in-memory data structure store widely used for caching, real-time analytics, and session management due to its high performance, low latency, and support for various data types. Defang can help you provision a managed Redis instance. To read more about the specifics of how this works for each provider, see the following: To use managed Redis, in your compose.yaml file, use the x-defang-redis extension to define your Redis service. Adding the annotation will tell Defang to provision a managed instance, rather than running Redis as a service. Here's an example: As of July 22, 2024, managed Postgres is in development. Postgres, or PostgreSQL, is an advanced open-source relational database system known for its robustness, extensibility, and compliance with SQL standards, making it a popular choice for complex applications requiring reliable data integrity and sophisticated querying capabilities. As of July 22, 2024, managed object storage is planned for future development."
  },
  {
    "id": 78,
    "text": "Defang configures Security Groups, deploys applications to a private subnet and uses an Application Load Balancer to route traffic to your services from the public internet only when required. This page is about internal networking only. If you want to configure your services to be accessible from the public internet, check the domains page. You can expose ports in your service definition to allow other services to communicate with it. Similar to public communication, you can use the ports section of your service definition, but set the mode to host instead of ingress to allow other services to communicate with it through the internal network. Internal communication is handled slightly differently between the Defang Playground and Defang BYOC. Internal communication between services in the Defang Playground follows the following pattern: Internal communication between services in Defang BYOC follows the following pattern:"
  },
  {
    "id": 79,
    "text": "You can easily monitor and debug your Defang services at build and runtime using the Defang CLI and portal. When you deploy a service using the defang compose up the CLI will automatically start tailing the build and runtime logs for your service. You can also view the logs for your service in the portal, or by using the defang tail command. Keep in mind that the Defang Portal only displays services deployed to Defang Playground. The defang tail command will tail the logs for all your services by default. You can also specify a service --name to tail the logs for a specific service. If you specify the --etag the CLI will only tail the logs for a specific build of a service. In BYOC, output is logged to the native logging tools within your cloud provider. The CLI then tails the output as needed."
  },
  {
    "id": 80,
    "text": "You can log into the Defang portal at portal.defang.dev using your Defang account to view the state of your Defang services running in the Defang Playground for non-production applications. You can use the portal to get an overview of your services, view the logs for each service, quickly access exposed ports, view environment variables, and more. We will make sure you have access to the tools required to debug your services in production. At the moment we're not entirely sure what that will look like, beyond defang tail to view logs, but we're working on it!"
  },
  {
    "id": 81,
    "text": "Pulumi support is currently only available for Defang Playground. We are working on support for Defang BYOC. You can use Pulumi to define your Defang services. This allows you to integrate your Defang services with other cloud resources. For example, you might define an Aiven PostgreSQL database in your Pulumi code and then use the outputs of that resource to configure the secrets to connect to the database in your Defang service. It also allows you to manage configuration for different environments using Pulumi's config system. To get started with Pulumi and Defang you will need to install the Defang provider in your Pulumi project: The following is a minimal example of a Pulumi program that defines a Defang service:"
  },
  {
    "id": 82,
    "text": "You can configure the resources available to your Defang services as required. You can configure the CPU, memory, and disk space allocated to your services as well as the number of replicas and whether or not your services requires access to GPUs. If you require access to GPUs, you can specify this in the deploy.resources.reservations.devices[0].capabilities section of your service as in the examples above. You can learn more about this in the docker-compose documentation. This is the only supported value in the deploy.resources.reservations.devices section."
  },
  {
    "id": 83,
    "text": "Defang's philosophy is to operate on a principle of \"least-privilege\". This means that we only give your services the permissions they need to operate. Because Defang creates roles, you need to have the appropriate permissions to create roles in your cloud provider account, typically the AdministratorAccess policy in AWS. Best practice is to run the Defang CLI in a CI/CD environment and to restrict deployment permissions at that level. Defang creates roles for your services to use, and attaches policies to those roles. This means that your services only have the permissions they need to operate, and nothing more. Defang configures Security Groups, deploys applictions to a private subnet and uses an Application Load Balancer to route traffic to your services from the public internet only when required. Defang automates the process of obtaining and renewing TLS certificates for your services using AWS Certificate Manager. Secrets are stored in AWS Systems Manager Parameter Store, and are encrypted using a key stored in AWS Key Management Service (KMS)."
  },
  {
    "id": 84,
    "text": "Defang allows you deploy services defined as containers. You can define your services using a compose file or a Pulumi program. Services can be exposed to the internet or kept private, and can communicate between themselves using the following conventions for hostnames: <username>-<service-name> You can learn more about accounts and usernames in the accounts page. Service names are defined in your compose file or your Pulumi program. You can learn more about about how to define services with compose files here and services with Pulumi here. You can learn more about how services are deployed in the deployment page. While this is the current state of the Defang model, we plan to add support for other types of services in the future, including serverless functions."
  },
  {
    "id": 85,
    "text": ""
  },
  {
    "id": 86,
    "text": "First, you'll need to install the Defang CLI. The CLI is the primary way to interact with Defang. It allows you to create, deploy, and manage your services. You can find the different installation methods here. To do pretty much anything with Defang, you'll need to authenticate with the platform. You can do this by running the following command: To learn more about how authentication works in defang, check out the authenticating page. Before you can deploy code you should read and agree to our the terms of service. You can do this by running: Defang supports various ways of creating and deploying services to the cloud. The following tutorials dive into each one in more detail: By default, all the output (stdout and stderr) from your app is logged. You can view these logs in real-time. You can view logs for all your services, one service, or even one specific deployment of a service. From the CLI: From the Defang Portal: https://portal.defang.dev/ To update your app (for example, updating the base image of your container, or making changes to your code) you can run the defang compose up command and it will build and deploy a new version with zero downtime. Your current version of the service will keep running and handling traffic while the new version is being built and deployed. Only after the new version passes the health checks and accepts traffic will the older version be stopped. If you are using compose files to define your services, you can add/remove services, make changes to code, etc. When you run defang compose up, the update will be diffed against the current state and any necessary changes will be applied to make the current state match the desired state."
  },
  {
    "id": 87,
    "text": "To do pretty much anything with Defang, you'll need to authenticate with the platform. You can do this by running the following command: This will prompt you to open a browser and log into your Defang account. For now, the only way to login is with GitHub, though we will offer other providers to authenticate in the future. Once you've logged in, you can close the browser and return to the terminal. You should see a message that you've successfully logged in. Keep in mind that your Defang account is separate from your cloud provider account. You will need to authenticate with your cloud provider account separately to deploy services to your own cloud account."
  },
  {
    "id": 88,
    "text": "Defang supports various ways of creating and deploying services to the cloud. The following tutorials dive into each one in more detail:"
  },
  {
    "id": 89,
    "text": "Defang doesn't require installing anything in your cloud, but you will need to install the open source Defang command line interface (CLI) to interact with your Defang resources and account. We offer a few different ways to install the Defang CLI. You can use Homebrew, a bash script, Winget, or download the binary directly. You can easily install the Defang CLI using Homebrew. Run the following command in your terminal: You can install the Defang CLI using a bash script. Run the following command in your terminal: The script will try to download the appropriate binary for your operating system and architecture, add it to ~/.local/bin, and add ~/.local/bin to your PATH if it's not already there, with your permission. If you do not provide permission it will print an appropriate instruction for you to follow to add it manually. You can also customize the installation directory by setting the INSTALL_DIR environment variable before running the script. On Windows, you can install the Defang CLI using winget. Run the following command in your terminal: You can find the latest version of the Defang CLI on the releases page. Just download the appropriate binary for your operating system and architecture, and put it somewhere in your PATH."
  },
  {
    "id": 90,
    "text": "By default, all the output (stdout and stderr) from your app is logged. You can view these logs in real-time. You can view logs for all your services, one service, or even one specific deployment of a service. From the CLI: From the Defang Portal: https://portal.defang.dev/"
  },
  {
    "id": 91,
    "text": "To update your app (for example, updating the base image of your container, or making changes to your code) you can run the defang compose up command and it will build and deploy a new version with zero downtime. Your current version of the service will keep running and handling traffic while the new version is being built and deployed. Only after the new version passes the health checks and accepts traffic will the older version be stopped. If you are using compose files to define your services, you can add/remove services, make changes to code, etc. When you run defang compose up, the update will be diffed against the current state and any necessary changes will be applied to make the current state match the desired state."
  },
  {
    "id": 92,
    "text": "Defang is a radically simpler way for developers to develop, deploy, and debug their cloud applications. Defang enables you to easily author cloud application in any language, build and deploy to the cloud with a single command, and iterate quickly with AI-assisted tooling. Defang provides a streamlined experience to develop, deploy, observe, and update your cloud applications. Defang includes the following features:"
  },
  {
    "id": 93,
    "text": "Public Beta of the v1 Defang BYOC AWS Provider is released as of Feb 1 2024. Why should you use Defang with AWS? Defang allows you to easily create and manage full, scalable applications with AWS. Defang aims to make it easier to deploy your services to the cloud. Don't waste your time learning the ins and outs of AWS, deciding which of the 200+ services to use, and then writing the infrastructure code to deploy your services, and making sure they are properly secured. Defang does all of that for you. Getting started with the Defang BYOC AWS Provider is easy. First, make sure you install the latest version of the Defang CLI. Then, make sure you have properly authenticated your AWS account. The Defang CLI will automatically check for environment variables like AWS_PROFILE, AWS_REGION, AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. If they are set, the CLI will automatically use the Defang BYOC AWS Provider using the appropriate credentials. If you have credentials in the ~/.aws/credentials file, but nothing configured in environment variables, you can use the --provider=aws flag to tell the Defang CLI to use the AWS Provider. If you have the aws CLI installed, you should be able to successfully run aws sts get-caller-identity and see your account ID. The Defang CLI does not depend on the AWS CLI. It uses the AWS SDK for Go to interact with your AWS account. In most cases, if you can run the aws sts get-caller-identity from the tip above, you should be good to go. However, due to a difference between the AWS CLI and the AWS SDK for Go, there is at least one case where they behave differently: if you are using aws sso login and have clashing profiles in your .aws/config and .aws/credentials files, the AWS CLI will prioritize SSO profiles and caches over regular profiles, but the AWS SDK for Go will prioritize the credentials file, and it may fail. The Defang BYOC AWS Provider will use the region specified in the AWS_REGION environment variable, or a profile in the ~/.aws/config file exactly as the AWS CLI would. Defang uses resources that are native to the cloud provider you are using. The following describes the current state of Defang's support for AWS, the specific resources that Defang uses, and the roadmap for future support. Defang allows you to configure your services with sensitive config values. Sensitive values are stored in AWS Systems Manager Parameter Store, and are encrypted. To deploy your services, the Defang CLI packages your code and uploads it to an S3 bucket in your account. The CLI then deploys an ECS task that uses Pulumi to build your container image and run your service. The provider runs your workloads using ECS using Fargate. It provisions a VPC with public and private subnets, and deploys your services to the private subnets. It then provisions an Application Load Balancer (ALB) and routes traffic to your services. When using Managed Redis, the Defang CLI provisions an ElastiCache Redis cluster in your account."
  },
  {
    "id": 94,
    "text": "We will be working on Azure support in the future. If you are interested in Azure support, please vote on this issue."
  },
  {
    "id": 95,
    "text": "We will be working on GCP support in the future. If you are interested in GCP support, please vote on this issue."
  },
  {
    "id": 96,
    "text": "The Defang Playground is a free tier that allows you to experiment with Defang. The Playground is a shared that cannot be used to run production workloads. The Playground is a great way to get started with Defang and to experiment with the Defang CLI. This page highlights architectural considerations when deploying to the playground and any differences you might encounter when deploying to the playground versus deploying to your own cloud account. Overall, the Defang Playground is very similar to deploying to your own cloud account. The Playground runs on a Defang-managed AWS account, so you can expect it to work similarly to deploying to AWS. The playground supports Managed Redis. Fundamentally, this works the same as it does in AWS."
  },
  {
    "id": 97,
    "text": "Check out our sample projects here to get some inspiration and get a sense of how defang works. Loading samples..."
  },
  {
    "id": 98,
    "text": "This tutorial assumes that the code normally gets built into a container and has a Dockerfile file in the current folder. If you already have a Docker Compose file for your service(s) you can use it directly. Here is a tutorial that shows you a simple example of how to deploy a node.js service using a Docker Compose file and a single js file. Let's create a simple node.js service which listens on port 3000 and returns a welcome message. Create a file called main.js with the following content: Let's create a Dockerfile to build the node.js service. We'll use the official Node runtime based on Alpine as a parent image. Create a file called Dockerfile with the following content: Let's create a Compose file to deploy the node.js service. We'll call the service minimal and expose port 3000. Create a file called compose.yaml with the following content: Now that we have the code and the Docker Compose file, we can deploy the service using the defang compose up command. This will bundle the code into a container and deploy it with Defang. If you have cloud credentials configured, the service will be deployed to AWS. If you don't have AWS credentials set up, the service will be deployed to Defang Playground."
  },
  {
    "id": 99,
    "text": "This example is useful if you already have a Docker container built manually or through a CI/CD system and have that the resulting image is available in a public or private repository accessible by Defang. If you already have a Docker Compose file for your service(s) you can use it directly. Else you can create one like this:"
  },
  {
    "id": 100,
    "text": "Make sure to install the Pulumi CLI and the Defang CLI. Make sure you are logged into the Defang CLI. Don't worry about the Pulumi CLI for now. Create a new directory for your project and navigate to it. If you're familiar with Pulumi and/or are already logged in with the Pulumi CLI, you can skip the next step. If you are new to pulumi and/or don't have an account, you can \"login\" to the filesystem by running the following command: This will make the Pulumi CLI store the state of your infrastructure in the current directory. Run the following command to set your encryption passphrase for this terminal session: Now let's initialize the Pulumi project: This will create a new Pulumi project in the current directory and will create a Pulumi stack called dev by default. We use the --force flag because the directory isn't empty (we created a folder when we logged in with the Pulumi CLI). Run the following command to add to the .gitignore file: Run the following command to install the Defang provider: Your index.ts file should look like this: At the time of writing, the Defang Pulumi Provider only works with Defang Playground. We are working on BYOC support. Run the following command to deploy your service: You can monitor the deployment by running the following command: The Defang Playground will give you a domain, which you can obtain by running the following command: If you navigate to the domain in your browser, you will be prompted to log in. Use the username minio and the password minio123. To clean up the deployment, run the following command:"
  },
  {
    "id": 101,
    "text": "This tutorial guides you to create and deploy a GPU-powered application on AWS using Defang and Mistral. We will walk you through the whole deployment process based on this Deploying Mistral with vLLM sample. For any of this to work, you'll need to have access to GPU instances in your AWS account. To do that you'll need to go to the \"Service Quotas\" console in your AWS account. From there you can request access to spot GPU instances. You'll need to request 8 or more because the value is per vCPU and the smallest GPU instance has 8 vCPUs. The instance types you're requesting are \"All G and VT spot instances\". This process can take a few days for AWS to approve.  This sample requires a HugoingFace token to download the model. You can get a token by signing up at HuggingFace and then going to your settings to get your token. You'll need to clone this sample to go through this tutorial. If you use the AWS CLI, you can verify that your are authenticated against AWS using the following command (note that the AWS CLI itself is not required to use the defang cli in BYOC mode): Configuration stores your sensitive information such as API keys, passwords, and other credentials for you. The compose.yml file is where you define your services and their configurations. In there you'll see the configuration we're using to deploy the Mistral model. We've highlighted some of the key aspects. Let's break it down. We start with the latest vLLM docker image provided by Mistral AI. We specify that we require a GPU to run our application. The Mistral model will be downloaded from HuggingFace. We need to have a HuggingFace Token to enable the installation, so we specify that we need to get the HF_TOKEN configuration value from Defang. Specifying the HF_TOKEN in the environment section of the service in the compose.yml file tells Defang to fetch the value from the encrypted configuration store. In this sample we also provide a simple UI to interact with the endpoint created by vLLM. The UI service is a Next.js application that runs on port 3000. You can see here how Defang's networking works. The mistral service is available at http://mistral:8000, exactly as it would be in a local docker-compose environment. Run the following command to deploy your service:"
  },
  {
    "id": 102,
    "text": "Defang supports generating new project outlines using integration with an AI model. Using this feature, you can describe what you would like the service to do and the CLI will then generate a project outline with all the files required to make it work. In this tutorial we'll use the following prompt: A basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { \"status\": \"OK\" }. The /echo endpoint will echo back all request parameters in the response. This will generate the different files required to start your project based on your prompt and the language selected. Change into the new project folder: You can open the files in a code editor to review or make changes as needed before deploying the service."
  },
  {
    "id": 103,
    "text": "In our latest version of Defang BYOC (Bring Your Own Cloud), you can now use your own domain name. (Currently, this new feature is not applicable to Defang Playground) If you use the AWS CLI, you can verify that your are authenticated against AWS using the following command (note that the AWS CLI itself is not required to use the defang cli in BYOC mode): If you purchased your domain with AWS, you can skip this step. For Defang to be able to manage your domain, you need to create a public hosted zone in AWS Route 53. It should list four AWS nameservers and should look like this: If you purchased your domain with AWS, you can skip this step. You'll need to create NS records in your domain registrar that point to the AWS Route 53 name servers which we got in the previous step. For example, in CloudFlare, the NS records would look like this:  In your compose file, specify the domain name you want to use, for example Run the following command to deploy your service: This will deploy your service and set up the necessary DNS records in Route 53 as seen in the screenshot below as well as provision SSL certificates. You can now access your service at the domain you specified in your compose file."
  },
  {
    "id": 104,
    "text": "This tutorial will guide you to set up Defang in both Codespaces and Gitpod. Start by cloning the Defang Github-Codespace repo and pushing it to your own account. This repository is configured with a Codespace that has Defang pre-installed. Once you've pushed to your own GitHub repo, you'll be able to create a Codespace by clicking the Code button, selecting the Codespaces tab, and clicking the + icon. This will set up a development environment with Defang already installed, which might take a few minutes.  For the defang login command to work correctly, you must open the Codespace in VS Code desktop. This is required because the login process is designed to run on localhost.  Within a VS Code desktop terminal, execute the following command. Although it may initially refuse to connect on your localhost, going back will show a \"successfully logged in\" message, confirming that you're logged into Defang. Now that you're logged in, you can use Defang commands. You can test that everything is working properly by running defang ls to list your running services. Start by cloning the Defang Gitpod-Workspace repo and pushing it to your own GitHub, GitLab, or BitBucket account. This repository includes a Workspace configuration that pre-installs Defang. Navigate https://gitpod.io/#<your-repo-url> to create your new workspace.\nIn the repository, we have a yaml file indicating that we are using a pre-built dockerfile which installs Defang CLI for you. Open VS Code from GitPod, you will likely need to have the GitPod VS Code extension installed.   Within a VS Code desktop terminal, execute the following command. Now that you're logged in, you can use Defang commands. You can test that everything is working properly by running defang ls to list your running services."
  },
  {
    "id": 105,
    "text": "Defang can be used for a wide variety of use cases, generally in line with the 12 Factor architecture. In this section we'll document some examples. At the end of this section we will also cover use cases that are not supported by Defang. Defang can be used to deploy web services and APIs. You can use any programming language you like, and you can use the built-in AI assistant to help you get started. Defang is a great choice for stateless web services and APIs because it takes care of all the heavy lifting such as configuring networking, security, and observability, and will give you a nice, horizontally scalable deployment. If you are using Defang BYOC, you can easily connect to databases, storage, and other services that you have running in your cloud account. A mobile app backend is a web service or API that is used by a mobile app. Defang is a great choice for mobile app backends because it helps you deploy horizontally scalable web services and APIs. It's also particularly useful for mobile app developers who aren't familiar with cloud infrastructure: you don't need to be a cloud expert, or even a web expert to use Defang and properly provision all the necessary infrastructure for your app's backend. LLMs (Large Language Models) are a type of AI model that can be used for a wide variety of tasks such as text generation, translation, summarization, and more. Defang can be used to host LLMs and provide an API for them. Configuring cloud providers like AWS to easily run containerized workloads that depend on GPUs can be quite challenging, but Defang makes it easy. While Defang is great for a wide variety of use cases, there are some use cases that are not a good fit for Defang. Generally, the use-cases that are Defang anti-patterns are the same as the ones that are 12 Factor anti-patterns. Here are some examples: Some applications are designed to run in stateful environments. For example, a CMS like WordPress can be coerced to work in a stateless environment, but most of the tooling for it expects to have a long-lived filesystem and a database. Defang is not a good fit for these types of applications, because containers are ephemeral and can be replaced at any time. Defang is not a good fit for data stores like databases, caches, and message queues. These types of services are designed to be long-lived and to store data. Defang is primarily designed for stateless workloads, and it's not a good fit for stateful workloads: if a container is replaced, all the data in it is lost. You could probably coerce a data store to work in a stateless environment with certain replication strategies, but it's not a good fit."
  },
  {
    "id": 106,
    "text": ""
  }
]
