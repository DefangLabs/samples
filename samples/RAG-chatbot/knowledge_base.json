[
  {
    "id": 1,
    "about": "\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0087\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000Ilocblob\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0004\u0000b\u0000l\u0000o\u0000gIlocblob\u0000\u0000\u0000\u0010\u0000\u0000\u0000A\u0000\u0000\u0000.\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u0000\u0000\u0000\u0000\u0000\u0004\u0000d\u0000o\u0000c\u0000sIlocblob\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u00af\u0000\u0000\u0000.\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0080\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0080\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0080\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0000\u0087\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0080\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0080\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000",
    "text": ""
  },
  {
    "id": 2,
    "about": "---",
    "text": "title: Samples description: Sample projects to help you launch services faster with Defang. sidebar_position: 500 ---  import {Button, ButtonGroup, FormGroup, FormLabel} from \"@mui/material\""
  },
  {
    "id": 3,
    "about": "Samples",
    "text": "Check out our sample projects here to get some inspiration and get a sense of how defang works.  import Samples from \"../src/components/Samples\";  <Samples />"
  },
  {
    "id": 4,
    "about": "---",
    "text": "sidebar_position: 100 title: Overview description: Overview of Defang, a radically simpler way to build, deploy, and optimize production-ready cloud apps. ---"
  },
  {
    "id": 5,
    "about": "What is Defang?",
    "text": "Defang is a radically simpler way for developers to build, deploy their apps to the cloud. Defang enables you to easily author cloud application in any language, build and deploy to the cloud with a single command, and iterate quickly.  - The [Defang CLI](./getting-started/installing.md) includes an AI-driven assistant that translates natural language prompts to an outline for your project that you can then refine. - Defang can automatically build and deploy your project with a single command.   - If you\u00e2\u0080\u0099re new to Defang, you can try deploying to the [Defang Playground](./concepts/defang-playground.md), a hosted environment to learn to use Defang with non-production workloads.   - Once you\u00e2\u0080\u0099re ready, you can [deploy](./concepts/deployments.md) it to your own cloud account - we call this [Defang BYOC](./concepts/defang-byoc.md). Defang takes care of all the heavy lifting such as configuring networking, security, [observability](./concepts/observability.md) and all the other details that usually slow down the average cloud developer. - You can also use Defang to easily [publish updates](./concepts/deployments.md#deploying-updates) to your deployed application with zero downtime."
  },
  {
    "id": 6,
    "about": "Features",
    "text": "ud applications. Defang includes the following features:  - Support for [various types of applications](./use-cases/use-cases.md): Web services and APIs, mobile app backends, ML services, hosting LLMs, etc. - Support for your programming [language of choice](./samples.md): Node.js, Python, Golang, or anything else you can package in a Dockerfile. - Built-in [AI assistant](./concepts/ai.md) to go from natural language prompt to an outline project - Automated [Dockerfile builds](./concepts/deployments.md) - Support for [pre-built Docker containers](./tutorials/deploy-container-using-the-cli.mdx), from public or private image registries - Ability to express your project configuration using a [Docker Compose YAML](./concepts/compose.md) file - Ability to manage [encrypted configuration values](./concepts/configuration.md) - Pre-configured environments with built-in [security](./concepts/security.md), [networking](./concepts/networking.mdx), and [observability](./concepts/observability.md) - [One-command deployments](./getting-started/installing.md) - Support for [GPUs](./concepts/resources.md) - Support for Infra-as-Code via the [Defang Pulumi provider](./concepts/pulumi.md)"
  },
  {
    "id": 7,
    "about": "---",
    "text": "sidebar_position: 600 title: FAQ description: Frequently asked questions about Defang. ---"
  },
  {
    "id": 8,
    "about": "FAQ",
    "text": ""
  },
  {
    "id": 9,
    "about": "Which cloud/region is the app being deployed to?",
    "text": "- In the [Defang Playground](./concepts/defang-playground.md) the app is deployed to AWS `us-west-2`. In the [Defang BYOC](./concepts/defang-byoc.md) model, the region is determined by your [Defang BYOC Provider](/docs/category/providers) settings."
  },
  {
    "id": 10,
    "about": "Can I bring my own AWS or other cloud account?",
    "text": "- Yes! Please check out the [Defang BYOC](./concepts/defang-byoc.md) documentation for more information."
  },
  {
    "id": 11,
    "about": "On AWS, can I deploy to services such as EC2, EKS, or Lambda?",
    "text": "- The current release includes support for containers only, deployed to ECS. We are still exploring how to support additional execution models such as VMs and functions-as-a-service. However, using our Pulumi provider, it is possible to combine Defang services with other native AWS resources."
  },
  {
    "id": 12,
    "about": "Can I access AWS storage services such as S3 or database services such as RDS? How?",
    "text": "- Yes, you can access whatever other resources exist in the cloud account you are using as a [Defang BYOC](./concepts/defang-byoc.md) Provider."
  },
  {
    "id": 13,
    "about": "Do you plan to support other clouds?",
    "text": "- While we currently support AWS as a [Defang BYOC](./concepts/defang-byoc.md) Provider, we plan to support other clouds in future releases, such as [Azure](./providers/azure.md) and [GCP](./providers/gcp.md)."
  },
  {
    "id": 14,
    "about": "Can I run production apps with Defang?",
    "text": "- The [Defang Playground](./concepts/defang-playground.md) is meant for testing and trial purposes only. Deployment of productions apps with [Defang BYOC](./concepts/defang-byoc.md) is not yet supported and disallowed by the [Terms of Service](https://defang.io/terms-service.html). If you are interested in running production apps, please [contact us](https://defang.io/#Contact-us)."
  },
  {
    "id": 15,
    "about": "I'm having trouble running the binary on my Mac. What should I do?",
    "text": "- MacOS users will need to allow the binary to run due to security settings:   1. Attempt to run the binary. You'll see a security prompt preventing you from running it.   2. Go to System Preferences > Privacy & Security > General.   3. In the 'Allow applications downloaded from:' section, you should see a message about Defang being blocked. Click 'Open Anyway'.   4. Alternatively, select the option \"App Store and identified developers\" to allow all applications from the App Store and identified developers to run."
  },
  {
    "id": 16,
    "about": "Warnings",
    "text": ""
  },
  {
    "id": 17,
    "about": "\"The folder is not empty. Files may be overwritten.\"",
    "text": "- This message is displayed when you run `defang generate` and the target folder is not empty. If you proceed, Defang will overwrite any existing files with the same name. If you want to keep the existing files, you should move them to a different folder before running `defang generate` or pick a different target folder."
  },
  {
    "id": 18,
    "about": "\"environment variable not found\"",
    "text": "- This message is displayed when you run `defang compose up` and the Compose file references an environment variable that is not set. If you proceed, the environment variable will be empty in the container. If you want to set the environment variable, you should set it in the environment where you run `defang compose up`."
  },
  {
    "id": 19,
    "about": "\"Unsupported platform\"",
    "text": "- This message is displayed when you run `defang compose up` and the Compose file references a platform that is not supported by Defang. Defang Beta only supports Linux operating systems."
  },
  {
    "id": 20,
    "about": "\"not logged in\"",
    "text": "- This message is displayed when you run `defang compose config` but you are not logged in. The displayed configuration will be incomplete. If you want to see the complete configuration, you should log in first using `defang login`."
  },
  {
    "id": 21,
    "about": "\"No port mode was specified; assuming 'host'\"",
    "text": "- This message is displayed when you run `defang compose up` and the Compose file declares a `port` that does not specify a port `mode`. By default, Defang will keep the port private. If you want to expose the port to the public internet, you should specify the `mode` as `ingress`:  ``` services:   service1:     \u00e2\u0080\u00a6     ports:       - target: 80         mode: ingress ```"
  },
  {
    "id": 22,
    "about": "\"Published ports are not supported in ingress mode; assuming 'host'\"",
    "text": "- This message is displayed when you run `defang compose up` and the Compose file declares a `port` with `mode` set to `ingress` and `published` set to a port number. Defang does not support published ports in ingress mode. If you want to expose the port to the public internet, you should specify the `mode` as `ingress` and remove the `published` setting."
  },
  {
    "id": 23,
    "about": "\"TCP ingress is not supported; assuming HTTP\"",
    "text": "- This message is displayed when you run `defang compose up` and the Compose file declares a `port` with `mode` set to `ingress` and `protocol` set to `tcp`. Defang does not support arbitrary TCP ingress and will assume the port is used for HTTP traffic. To silence the warning, remove the `protocol` setting."
  },
  {
    "id": 24,
    "about": "\"unsupported compose directive\"",
    "text": "- This message is displayed when you run `defang compose up` and the Compose file declares a directive that is not supported by Defang. The deployment will continue, but the unsupported directive will be ignored, which may cause unexpected behavior."
  },
  {
    "id": 25,
    "about": "\"no reservations specified; using limits as reservations\"",
    "text": "- This message is displayed when you run `defang compose up` and the Compose file declares a `resource` with `limits` but no `reservations`. Defang will use the `limits` as `reservations` to ensure the container has enough resources. Specify `reservations` if you want to silence the warning or reserve a different amount of resources:  ``` services:   service1:     \u00e2\u0080\u00a6     deploy:       resources:         reservations:           cpus: 0.5           memory: 512MB ```"
  },
  {
    "id": 26,
    "about": "\"ingress port without healthcheck defaults to GET / HTTP/1.1\"",
    "text": "- This message is displayed when you run `defang compose up` and the Compose file declares an `ingress` with a `port` but no `healthcheck`. Defang will assume the default healthcheck of `GET / HTTP/1.1` to ensure the port is healthy. Specify a `healthcheck` if you want to silence the warning or use a different healthcheck:  ``` services:   service1:     \u00e2\u0080\u00a6     deploy:       healthcheck:         test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:80/health\"] ```"
  },
  {
    "id": 27,
    "about": "\"missing memory reservation; specify deploy.resources.reservations.memory to avoid out-of-memory errors\"",
    "text": "- This message is displayed when you run `defang compose up` and the Compose file doesn't specify a `memory` reservation. If available, Defang will use the `memory` limit as the `memory` reservation. Specify a `memory` reservation if you want to silence the warning or reserve a different amount of memory:  ``` services:   service1:     \u00e2\u0080\u00a6     deploy:       resources:         reservations:           memory: 512MB ```"
  },
  {
    "id": 28,
    "about": "\"The build context contains more than 10 files\"",
    "text": "- This message is displayed when you run `defang compose up` and the Compose file declares a `build` with a `context` that contains more than 10 files. Ensure the context refers to the correct folder. Defang will use the `context` as is, but you may experience slow build times. If you want to speed up the build, you should reduce the number of files in the `context`."
  },
  {
    "id": 29,
    "about": "\"AWS provider was selected, but AWS environment variables are not set\"",
    "text": "- This message is displayed when you run `defang compose up` with the `--provider=aws` but none of the AWS environment variables were not set. If you proceed, the deployment might fail."
  },
  {
    "id": 30,
    "about": "\"Using Defang provider, but AWS environment variables were detected\"",
    "text": "- This message is displayed when you run `defang compose up` with the `--provider=defang` but AWS environment variables were detected. The AWS environment variables will be ignored."
  },
  {
    "id": 31,
    "about": "\"secret \u00e2\u0080\u00a6 is not defined in the top-level secrets section\"",
    "text": "- This message is displayed when you run `defang compose up` and the Compose file declares a `secret` that is not defined in the top-level `secrets` section. To silence the warning, define the secret in the top-level `secrets` section:  ``` services:   service1:     \u00e2\u0080\u00a6     secrets:       - my_secret secrets:   my_secret:     external: true ```"
  },
  {
    "id": 32,
    "about": "\"unsupported secret \u00e2\u0080\u00a6: not marked external:true\"",
    "text": "- This message is displayed when you run `defang compose up` and the Compose file declares a `secret` that is not marked `external:true`. Defang only supports external secrets, managed by the `defang config` command. To silence the warning, mark the secret as `external:true` in the top-level `secrets` section:  ``` \u00e2\u0080\u00a6 secrets:   my_secret:     external: true ```"
  },
  {
    "id": 33,
    "about": "Errors",
    "text": ""
  },
  {
    "id": 34,
    "about": "\"Stack:\u00e2\u0080\u00a6 is in UPDATE_COMPLETE_CLEANUP_IN_PROGRESS state and cannot be updated\"",
    "text": "- This happens if different version of the Defang CLI are used with the same AWS account. Each version one will try to update the CD stack to its version, back and forth. Make sure that all users have the same version of the CLI. Check the CLI version using `defang version`."
  },
  {
    "id": 35,
    "about": "---",
    "text": "title: GCP description: Defang will allow you to easily create and manage full, scalable applications with GCP. sidebar_position: 200 ---"
  },
  {
    "id": 36,
    "about": "GCP",
    "text": ":::info We will be working on GCP support in the future. If you are interested in GCP support, please vote on [this issue](https://github.com/DefangLabs/defang/issues/58). :::"
  },
  {
    "id": 37,
    "about": "---",
    "text": "title: AWS description: Defang allows you to easily create and manage full, scalable applications with AWS. sidebar_position: 000 ---"
  },
  {
    "id": 38,
    "about": "AWS",
    "text": ":::info Public Beta of the v1 Defang BYOC AWS Provider is released as of Feb 1 2024. :::  Why should you use Defang with AWS? Defang allows you to easily create and manage full, scalable applications with AWS. Defang aims to make it easier to deploy your services to the cloud. Don't waste your time learning the ins and outs of AWS, deciding which of the 200+ services to use, and then writing the infrastructure code to deploy your services, and making sure they are properly secured. Defang does all of that for you."
  },
  {
    "id": 39,
    "about": "Getting Started",
    "text": "Getting started with the Defang BYOC AWS Provider is easy. First, make sure you [install the latest version of the Defang CLI](../getting-started#authenticate-with-defang). Then, make sure you have properly [authenticated your AWS account](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html). The Defang CLI will automatically check for environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`. If they are set, the CLI will automatically use the Defang BYOC AWS Provider using the appropriate credentials. If you have credentials in the `~/.aws/credentials` file, but nothing configured in environment variables, you can use the `--provider=aws` flag to tell the Defang CLI to use the AWS Provider.  :::tip If you have the aws CLI installed, you should be able to successfully run `aws sts get-caller-identity` and see your account ID. :::  :::warning The Defang CLI does not depend on the AWS CLI. It uses the [AWS SDK for Go](https://aws.amazon.com/sdk-for-go/) to interact with your AWS account. In most cases, if you can run the `aws sts get-caller-identity` from the tip above, you should be good to go. However, due to a difference between the AWS CLI and the AWS SDK for Go, there is at least one case where they behave differently: if you are using `aws sso login` and have clashing profiles in your `.aws/config` and `.aws/credentials` files, the AWS CLI will prioritize SSO profiles and caches over regular profiles, but the AWS SDK for Go will prioritize the credentials file, and it may fail. :::"
  },
  {
    "id": 40,
    "about": "Region",
    "text": "The Defang BYOC AWS Provider will use the region specified in the `AWS_REGION` environment variable, or a profile in the `~/.aws/config` file exactly as the AWS CLI would."
  },
  {
    "id": 41,
    "about": "Architecture",
    "text": "Defang uses resources that are native to the cloud provider you are using. The following describes the current state of Defang's support for AWS, the specific resources that Defang uses, and the roadmap for future support."
  },
  {
    "id": 42,
    "about": "Secrets",
    "text": "Defang allows you to configure your services with sensitive config values. Sensitive values are stored in AWS Systems Manager Parameter Store, and are encrypted."
  },
  {
    "id": 43,
    "about": "Deployment",
    "text": "To deploy your services, the Defang CLI packages your code and uploads it to an S3 bucket in your account. The CLI then deploys an ECS task that uses Pulumi to build your container image and run your service."
  },
  {
    "id": 44,
    "about": "Runtime",
    "text": "The provider runs your workloads using ECS using Fargate. It provisions a VPC with public and private subnets, and deploys your services to the private subnets. It then provisions an Application Load Balancer (ALB) and routes traffic to your services."
  },
  {
    "id": 45,
    "about": "---",
    "text": "title: Azure description: Defang will allow you to easily create and manage full, scalable applications with Azure. sidebar_position: 100 ---"
  },
  {
    "id": 46,
    "about": "Azure",
    "text": ":::info We will be working on Azure support in the future. If you are interested in Azure support, please vote on [this issue](https://github.com/DefangLabs/defang/issues/57). :::"
  },
  {
    "id": 47,
    "about": "Manage personal access tokens",
    "text": "The command to Manage personal access tokens is ```defang token```.  ``` defang token [flags] ```  ### Options  ``` --expires duration   validity duration of the token (default 24h0m0s) -h, --help               help for token --scope string       scope of the token; one of [admin read tail] (required) ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang](defang.md)\t - Defang CLI manages services on the Defang cluster "
  },
  {
    "id": 48,
    "about": "o",
    "text": "The command to o is ```defang cd cancel```.  ``` defang cd cancel [flags] ```  ### Options  ``` -h, --help   help for cancel ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  - [defang cd](defang_cd.md) - Manually run a command with the CD task (for BYOC only) "
  },
  {
    "id": 49,
    "about": "Like 'start' but immediately tracks the progress of the deployment",
    "text": "The command to Like 'start' but immediately tracks the progress of the deployment is ```defang compose up```.  ``` defang compose up [flags] ```  ### Options  ``` -d, --detach   run in detached mode --force    force a build of the image even if nothing has changed -h, --help     help for up ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang compose](defang_compose.md)\t - Work with local Compose files "
  },
  {
    "id": 50,
    "about": "List all the projects and stacks in the CD cluster",
    "text": "The command to List all the projects and stacks in the CD cluster is ```defang cd ls```.  ``` defang cd ls [flags] ```  ### Options  ``` -h, --help     help for ls --remote   invoke the command on the remote cluster ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang cd](defang_cd.md)\t - Manually run a command with the CD task (for BYOC only) "
  },
  {
    "id": 51,
    "about": "Reads a Compose file and shows the generated config",
    "text": "The command to Reads a Compose file and shows the generated config is ```defang compose config```.  ``` defang compose config [flags] ```  ### Options  ``` -h, --help   help for config ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang compose](defang_compose.md)\t - Work with local Compose files "
  },
  {
    "id": 52,
    "about": "Read and/or agree the Defang terms of service",
    "text": "The command to Read and/or agree the Defang terms of service is ```defang terms```.  ``` defang terms [flags] ```  ### Options  ``` --agree-tos   agree to the Defang terms of service -h, --help        help for terms ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang](defang.md)\t - Defang CLI manages services on the Defang cluster "
  },
  {
    "id": 53,
    "about": "Generate a TLS certificate",
    "text": "The command to Generate a TLS certificate is ```defang cert generate```.  ``` defang cert generate [flags] ```  ### Options  ``` -h, --help   help for generate ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang cert](defang_cert.md)\t - Manage certificates "
  },
  {
    "id": 54,
    "about": "Work with local Compose files",
    "text": "The command to Work with local Compose files is ```defang compose```.  ### Options  ``` -h, --help   help for compose ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang](defang.md)\t - Defang CLI manages services on the Defang cluster * [defang compose config](defang_compose_config.md)\t - Reads a Compose file and shows the generated config * [defang compose down](defang_compose_down.md)\t - Like 'stop' but also deprovisions the services from the cluster * [defang compose restart](defang_compose_restart.md)\t - Reads a Compose file and restarts its services * [defang compose start](defang_compose_start.md)\t - Reads a Compose file and deploys services to the cluster * [defang compose stop](defang_compose_stop.md)\t - Reads a Compose file and stops its services * [defang compose up](defang_compose_up.md)\t - Like 'start' but immediately tracks the progress of the deployment "
  },
  {
    "id": 55,
    "about": "Add, update, or delete service config",
    "text": "The command to Add, update, or delete service config is ```defang config```.  ### Options  ``` -h, --help   help for config ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang](defang.md)\t - Defang CLI manages services on the Defang cluster * [defang config create](defang_config_create.md)\t - Adds or updates a sensitive config value * [defang config ls](defang_config_ls.md)\t - List configs * [defang config rm](defang_config_rm.md)\t - Removes one or more config values "
  },
  {
    "id": 56,
    "about": "Adds or updates a sensitive config value",
    "text": "The command to Adds or updates a sensitive config value is ```defang config create```.  ``` defang config create CONFIG [file] [flags] ```  ### Options  ``` -h, --help   help for create ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang config](defang_config.md)\t - Add, update, or delete service config "
  },
  {
    "id": 57,
    "about": "Destroy the service stack",
    "text": "The command to Destroy the service stack is ```defang cd destroy```.  ``` defang cd destroy [flags] ```  ### Options  ``` -h, --help   help for destroy ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang cd](defang_cd.md)\t - Manually run a command with the CD task (for BYOC only) "
  },
  {
    "id": 58,
    "about": "Get version information for the CLI and Fabric service",
    "text": "The command to Get version information for the CLI and Fabric service is ```defang version```.  ``` defang version [flags] ```  ### Options  ``` -h, --help   help for version ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang](defang.md)\t - Defang CLI manages services on the Defang cluster "
  },
  {
    "id": 59,
    "about": "Tail logs from one or more services",
    "text": "The command to Tail logs from one or more services is ```defang tail```.  ``` defang tail [flags] ```  ### Options  ``` --etag string    deployment ID (ETag) of the service -h, --help           help for tail -n, --name string    name of the service -r, --raw            show raw (unparsed) logs -S, --since string   show logs since duration/time --utc            show logs in UTC timezone (ie. TZ=UTC) ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang](defang.md)\t - Defang CLI manages services on the Defang cluster "
  },
  {
    "id": 60,
    "about": "Log out",
    "text": "The command to Log out is ```defang logout```.  ``` defang logout [flags] ```  ### Options  ``` -h, --help   help for logout ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang](defang.md)\t - Defang CLI manages services on the Defang cluster "
  },
  {
    "id": 61,
    "about": "Reads a Compose file and deploys services to the cluster",
    "text": "The command to Reads a Compose file and deploys services to the cluster is ```defang compose start```.  ``` defang compose start [flags] ```  ### Options  ``` --force   force a build of the image even if nothing has changed -h, --help    help for start ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang compose](defang_compose.md)\t - Work with local Compose files "
  },
  {
    "id": 62,
    "about": "Generate a sample Defang project in the current folder",
    "text": "The command to Generate a sample Defang project in the current folder is ```defang generate```.  ``` defang generate [SAMPLE] [flags] ```  ### Options  ``` -h, --help   help for generate ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang](defang.md)\t - Defang CLI manages services on the Defang cluster "
  },
  {
    "id": 63,
    "about": "Destroy the CD cluster without destroying the services",
    "text": "The command to Destroy the CD cluster without destroying the services is ```defang cd teardown```.  ``` defang cd teardown [flags] ```  ### Options  ``` --force   force the teardown of the CD stack -h, --help    help for teardown ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang cd](defang_cd.md)\t - Manually run a command with the CD task (for BYOC only) "
  },
  {
    "id": 64,
    "about": "Get list of services on the cluster",
    "text": "The command to Get list of services on the cluster is ```defang services```.  ``` defang services [flags] ```  ### Options  ``` -h, --help   help for services -l, --long   show more details ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang](defang.md)\t - Defang CLI manages services on the Defang cluster "
  },
  {
    "id": 65,
    "about": "Defang CLI manages services on the Defang cluster",
    "text": "The command to Defang CLI manages services on the Defang cluster is ```defang```.  ### Options  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -h, --help                help for defang -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang cd](defang_cd.md)\t - Manually run a command with the CD task (for BYOC only) * [defang cert](defang_cert.md)\t - Manage certificates * [defang compose](defang_compose.md)\t - Work with local Compose files * [defang config](defang_config.md)\t - Add, update, or delete service config * [defang generate](defang_generate.md)\t - Generate a sample Defang project in the current folder * [defang login](defang_login.md)\t - Authenticate to the Defang cluster * [defang logout](defang_logout.md)\t - Log out * [defang restart](defang_restart.md)\t - Restart one or more services * [defang services](defang_services.md)\t - Get list of services on the cluster * [defang tail](defang_tail.md)\t - Tail logs from one or more services * [defang terms](defang_terms.md)\t - Read and/or agree the Defang terms of service * [defang token](defang_token.md)\t - Manage personal access tokens * [defang version](defang_version.md)\t - Get version information for the CLI and Fabric service * [defang whoami](defang_whoami.md)\t - Show the current user "
  },
  {
    "id": 66,
    "about": "Manually run a command with the CD task (for BYOC only)",
    "text": "The command to Manually run a command with the CD task (for BYOC only) is ```defang cd```.  ### Options  ``` -h, --help   help for cd ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang](defang.md)\t - Defang CLI manages services on the Defang cluster * [defang cd cancel](defang_cd_cancel.md)\t - Cancel the current CD operation * [defang cd destroy](defang_cd_destroy.md)\t - Destroy the service stack * [defang cd down](defang_cd_down.md)\t - Refresh and then destroy the service stack * [defang cd ls](defang_cd_ls.md)\t - List all the projects and stacks in the CD cluster * [defang cd refresh](defang_cd_refresh.md)\t - Refresh the service stack * [defang cd teardown](defang_cd_teardown.md)\t - Destroy the CD cluster without destroying the services "
  },
  {
    "id": 67,
    "about": "Refresh the service stack",
    "text": "The command to Refresh the service stack is ```defang cd refresh```.  ``` defang cd refresh [flags] ```  ### Options  ``` -h, --help   help for refresh ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang cd](defang_cd.md)\t - Manually run a command with the CD task (for BYOC only) "
  },
  {
    "id": 68,
    "about": "Refresh and then destroy the service stack",
    "text": "The command to Refresh and then destroy the service stack is ```defang cd down```.  ``` defang cd down [flags] ```  ### Options  ``` -h, --help   help for down ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang cd](defang_cd.md)\t - Manually run a command with the CD task (for BYOC only) "
  },
  {
    "id": 69,
    "about": "Reads a Compose file and restarts its services",
    "text": "The command to Reads a Compose file and restarts its services is ```defang compose restart```.  ``` defang compose restart [flags] ```  ### Options  ``` -h, --help   help for restart ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang compose](defang_compose.md)\t - Work with local Compose files "
  },
  {
    "id": 70,
    "about": "Restart one or more services",
    "text": "The command to Restart one or more services is ```defang restart```.  ``` defang restart SERVICE... [flags] ```  ### Options  ``` -h, --help   help for restart ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang](defang.md)\t - Defang CLI manages services on the Defang cluster "
  },
  {
    "id": 71,
    "about": "Like 'stop' but also deprovisions the services from the cluster",
    "text": "The command to Like 'stop' but also deprovisions the services from the cluster is ```defang compose down```.  ``` defang compose down [flags] ```  ### Options  ``` -d, --detach   run in detached mode -h, --help     help for down ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang compose](defang_compose.md)\t - Work with local Compose files "
  },
  {
    "id": 72,
    "about": "Authenticate to the Defang cluster",
    "text": "The command to Authenticate to the Defang cluster is ```defang login```.  ``` defang login [flags] ```  ### Options  ``` -h, --help   help for login ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang](defang.md)\t - Defang CLI manages services on the Defang cluster "
  },
  {
    "id": 73,
    "about": "Reads a Compose file and stops its services",
    "text": "The command to Reads a Compose file and stops its services is ```defang compose stop```.  ``` defang compose stop [flags] ```  ### Options  ``` -h, --help   help for stop ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang compose](defang_compose.md)\t - Work with local Compose files "
  },
  {
    "id": 74,
    "about": "Show the current user",
    "text": "The command to Show the current user is ```defang whoami```.  ``` defang whoami [flags] ```  ### Options  ``` -h, --help   help for whoami ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang](defang.md)\t - Defang CLI manages services on the Defang cluster "
  },
  {
    "id": 75,
    "about": "List configs",
    "text": "The command to List configs is ```defang config ls```.  ``` defang config ls [flags] ```  ### Options  ``` -h, --help   help for ls ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang config](defang_config.md)\t - Add, update, or delete service config "
  },
  {
    "id": 76,
    "about": "Manage certificates",
    "text": "The command to Manage certificates is ```defang cert```.  ### Options  ``` -h, --help   help for cert ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang](defang.md)\t - Defang CLI manages services on the Defang cluster * [defang cert generate](defang_cert_generate.md)\t - Generate a TLS certificate "
  },
  {
    "id": 77,
    "about": "Removes one or more config values",
    "text": "The command to Removes one or more config values is ```defang config rm```.  ``` defang config rm CONFIG... [flags] ```  ### Options  ``` -h, --help   help for rm ```  ### Options inherited from parent commands  ``` -s, --cluster string      Defang cluster to connect to (default \"fabric-prod1.defang.dev\") --color color-mode    colorize output; \"auto\", \"always\" or \"never\" (default auto) -C, --cwd string          change directory before running the command --debug               debug logging for troubleshooting the CLI --dry-run             dry run (don't actually change anything) -f, --file string         compose file path -T, --non-interactive     disable interactive prompts / no TTY -P, --provider provider   cloud provider to use; use \"aws\" for bring-your-own-cloud (default auto) -v, --verbose             verbose logging ```  ### SEE ALSO  * [defang config](defang_config.md)\t - Add, update, or delete service config "
  },
  {
    "id": 78,
    "about": "---",
    "text": "sidebar_position: 100 title: Use Cases description: Use cases for Defang. ---"
  },
  {
    "id": 79,
    "about": "Use Cases",
    "text": "Defang can be used for a wide variety of use cases, generally in line with the [12 Factor architecture](https://12factor.net/). In this section we'll document some examples. At the end of this section we will also cover use cases that are not supported by Defang."
  },
  {
    "id": 80,
    "about": "Web Services and APIs",
    "text": "Defang can be used to deploy web services and APIs. You can use any programming language you like, and you can use the built-in AI assistant to help you get started.  Defang is a great choice for stateless web services and APIs because it takes care of all the heavy lifting such as configuring [networking](../concepts/networking.mdx), [security](../concepts/security.md), and [observability](../concepts/observability.md), and will give you a nice, [horizontally scalable](https://12factor.net/concurrency) deployment.  If you are using [Defang BYOC](../concepts/defang-byoc.md), you can easily connect to databases, storage, and other services that you have running in your cloud account."
  },
  {
    "id": 81,
    "about": "Mobile App Backends",
    "text": "A mobile app backend is a web service or API that is used by a mobile app. Defang is a great choice for mobile app backends because it helps you deploy horizontally scalable web services and APIs. It's also particularly useful for mobile app developers who aren't familiar with cloud infrastructure: you don't need to be a cloud expert, or even a web expert to use Defang and properly provision all the necessary infrastructure for your app's backend."
  },
  {
    "id": 82,
    "about": "Hosting LLMs",
    "text": "LLMs (Large Language Models) are a type of AI model that can be used for a wide variety of tasks such as text generation, translation, summarization, and more. Defang can be used to host LLMs and provide an API for them. Configuring cloud providers like AWS to easily run containerized workloads that depend on GPUs can be quite challenging, but Defang makes it easy."
  },
  {
    "id": 83,
    "about": "Anti-patterns",
    "text": "While Defang is great for a wide variety of use cases, there are some use cases that are not a good fit for Defang. Generally, the use-cases that are Defang anti-patterns are the same as the ones that are [12 Factor](https://12factor.net/) anti-patterns. Here are some examples:"
  },
  {
    "id": 84,
    "about": "Stateful Services",
    "text": "Some applications are designed to run in stateful environments. For example, a CMS like WordPress can be coerced to work in a stateless environment, but most of the tooling for it expects to have a long-lived filesystem and a database. Defang is not a good fit for these types of applications, because [containers are ephemeral and can be replaced at any time](https://12factor.net/processes)."
  },
  {
    "id": 85,
    "about": "Data Stores",
    "text": "Defang is not a good fit for data stores like databases, caches, and message queues. These types of services are designed to be long-lived and to store data. Defang is primarily designed for stateless workloads, and it's not a good fit for stateful workloads: if a container is replaced, all the data in it is lost. You could probably coerce a data store to work in a stateless environment with certain replication strategies, but it's not a good fit."
  },
  {
    "id": 86,
    "about": "---",
    "text": "sidebar_position: 100 title: Installing description: How to install Defang. ---"
  },
  {
    "id": 87,
    "about": "Installing",
    "text": "Defang doesn't require installing anything in your cloud, but you will need to install the [open source](https://github.com/DefangLabs/defang) Defang command line interface (CLI) to interact with your Defang resources and account.  We offer a few different ways to install the Defang CLI. You can use Homebrew, a bash script, Winget, or download the binary directly."
  },
  {
    "id": 88,
    "about": "Using Homebrew",
    "text": "You can easily install the Defang CLI using [Homebrew](https://brew.sh/). Run the following command in your terminal:  ```bash brew install DefangLabs/defang/defang ```"
  },
  {
    "id": 89,
    "about": "Using a Bash Script",
    "text": "You can install the Defang CLI using a bash script. Run the following command in your terminal:  ```bash . <(curl -Ls s.defang.io/install) ```  The script will try to download the appropriate binary for your operating system and architecture, add it to `~/.local/bin`, and add `~/.local/bin` to your `PATH` if it's not already there, with your permission. If you do not provide permission it will print an appropriate instruction for you to follow to add it manually. You can also customize the installation directory by setting the `INSTALL_DIR` environment variable before running the script."
  },
  {
    "id": 90,
    "about": "Using Winget",
    "text": "On Windows, you can install the Defang CLI using `winget`. Run the following command in your terminal:  ```powershell winget install defang ```"
  },
  {
    "id": 91,
    "about": "Direct Download",
    "text": "You can find the latest version of the Defang CLI on the [releases page](https://github.com/DefangLabs/defang/releases). Just download the appropriate binary for your operating system and architecture, and put it somewhere in your `PATH`."
  },
  {
    "id": 92,
    "about": "---",
    "text": "sidebar_position: 200 title: Getting Started description: Get started with Defang. ---"
  },
  {
    "id": 93,
    "about": "Getting Started",
    "text": ""
  },
  {
    "id": 94,
    "about": "Install the CLI",
    "text": "First, you'll need to install the Defang CLI. The CLI is the primary way to interact with Defang. It allows you to create, deploy, and manage your services. You can find the [different installation methods here](./installing.md)."
  },
  {
    "id": 95,
    "about": "Authenticate with Defang",
    "text": "To do pretty much anything with Defang, you'll need to authenticate with the platform. You can do this by running the following command:  ```bash defang login ```  :::info To learn more about how authentication works in defang, check out the [authenticating page](./authenticating.md). :::"
  },
  {
    "id": 96,
    "about": "Agree to the terms of service",
    "text": "Before you can deploy code you should read and agree to our the terms of service. You can do this by running:  ```bash defang terms ```"
  },
  {
    "id": 97,
    "about": "Build and Deploy Services",
    "text": "Defang supports various ways of creating and deploying services to the cloud. The following tutorials dive into each one in more detail:  1. [Deploy an outline using AI](../tutorials/generate-new-code-using-ai.mdx) 2. [Build and deploy your code](../tutorials/deploy-code-compose.mdx) 3. [Deploy existing containers](../tutorials/deploy-container-using-the-cli.mdx) 4. [Deploy using Pulumi](../tutorials/deploy-using-pulumi.mdx)"
  },
  {
    "id": 98,
    "about": "Monitor Services",
    "text": "By default, all the output (stdout and stderr) from your app is logged. You can view these logs in real-time. You can view logs for all your services, one service, or even one specific deployment of a service.  - From the CLI:          ```tsx     defang tail --name service1     ```      - From the Defang Portal:          [https://portal.defang.dev/](https://portal.defang.dev/)    :::info * To learn more about observability in Defang, check out the [observability page](../concepts/observability.md). * Note that the Defang Portal only displays services deployed to Defang Playground. :::"
  },
  {
    "id": 99,
    "about": "Update Services",
    "text": "To update your app (for example, updating the base image of your container, or making changes to your code) you can run the `defang compose up` command and it will build and deploy a new version with zero downtime. Your current version of the service will keep running and handling traffic while the new version is being built and deployed. Only after the new version passes the health checks and accepts traffic will the older version be stopped.  :::info If you are using [compose files](../concepts/compose.md) to define your services, you can add/remove services, make changes to code, etc. When you run `defang compose up`, the update will be diffed against the current state and any necessary changes will be applied to make the current state match the desired state. :::"
  },
  {
    "id": 100,
    "about": "---",
    "text": "sidebar_position: 400 title: Monitor Services description: Monitor services with Defang. ---"
  },
  {
    "id": 101,
    "about": "Monitor a Service",
    "text": "By default, all the output (stdout and stderr) from your app is logged. You can view these logs in real-time. You can view logs for all your services, one service, or even one specific deployment of a service.  - From the CLI:          ```tsx     defang tail --name service1     ```      - From the Defang Portal:          [https://portal.defang.dev/](https://portal.defang.dev/)    :::info * To learn more about observability in Defang, check out the [observability page](../concepts/observability.md). * Note that the Defang Portal only displays services deployed to Defang Playground. :::"
  },
  {
    "id": 102,
    "about": "---",
    "text": "sidebar_position: 200 title: Authenticating description: Authenticate with Defang. ---"
  },
  {
    "id": 103,
    "about": "Authenticating",
    "text": "To do pretty much anything with Defang, you'll need to authenticate with the platform. You can do this by running the following command:  ```bash defang login ```  This will prompt you to open a browser and log into your Defang account. For now, the only way to login is with GitHub, though we will offer other providers to authenticate in the future. Once you've logged in, you can close the browser and return to the terminal. You should see a message that you've successfully logged in.  :::warning Keep in mind that your Defang account is separate from your [cloud provider account](../concepts/defang-byoc.md). You will need to authenticate with your cloud provider account separately to deploy services to your own cloud account. :::"
  },
  {
    "id": 104,
    "about": "---",
    "text": "sidebar_position: 500 title: Update Services description: Update services with Defang. ---"
  },
  {
    "id": 105,
    "about": "Update Services",
    "text": "To update your app (for example, updating the base image of your container, or making changes to your code) you can run the `defang compose up` command and it will build and deploy a new version with zero downtime. Your current version of the service will keep running and handling traffic while the new version is being built and deployed. Only after the new version passes the health checks and accepts traffic will the older version be stopped.  :::info If you are using [compose files](../concepts/compose.md) to define your services, you can add/remove services, make changes to code, etc. When you run `defang compose up`, the update will be diffed against the current state and any necessary changes will be applied to make the current state match the desired state. :::"
  },
  {
    "id": 106,
    "about": "---",
    "text": "sidebar_position: 300 title: Build & Deploy Services description: Build and deploy services with Defang. ---"
  },
  {
    "id": 107,
    "about": "Build and Deploy Services",
    "text": "Defang supports various ways of creating and deploying services to the cloud. The following tutorials dive into each one in more detail:  1. [Create an outline using AI](../tutorials/generate-new-code-using-ai.mdx) 2. [Build and deploy your code](../tutorials/deploy-code-compose.mdx) 3. [Deploy an existing container](../tutorials/deploy-container-using-the-cli.mdx) 4. [Deploy using Pulumi](../tutorials/deploy-using-pulumi.mdx)"
  },
  {
    "id": 108,
    "about": "---",
    "text": "title: Resources description: Customize the resources your Defang services use. sidebar_position: 350 ---"
  },
  {
    "id": 109,
    "about": "Resources",
    "text": "You can configure the resources available to your Defang services as required. You can configure the CPU, memory, and disk space allocated to your services as well as the number of replicas and whether or not your services requires access to GPUs."
  },
  {
    "id": 110,
    "about": "Examples",
    "text": ""
  },
  {
    "id": 111,
    "about": "Docker Compose",
    "text": "```yaml services:   gpu-service:     deploy:       replicas: 3       resources:         reservations:           cpus: '1.0'           memory: 2048M           devices:             - capabilities: [\"gpu\"] ```"
  },
  {
    "id": 112,
    "about": "Pulumi",
    "text": "```typescript const service = new defang.DefangService(\"gpu-service\", {   deploy: {     replicas: 3,     resources: {         reservations: {             cpu: 1.0,             memory: 2048,             devices: [{capabilities: ['gpu']}]         }     }   } }); ```  :::info GPUs If you require access to GPUs, you can specify this in the `deploy.resources.reservations.devices[0].capabilities` section of your service as in the examples above. You can learn more about this in the [docker-compose documentation](https://docs.docker.com/compose/gpu-support/). This is the only supported value in the `deploy.resources.reservations.devices` section. :::"
  },
  {
    "id": 113,
    "about": "---",
    "text": "title: Deployment description: Defang will build your services in the cloud and manage the deployment process for you. sidebar_position: 500 ---"
  },
  {
    "id": 114,
    "about": "Deployment",
    "text": "When you deploy using Defang, whether it's with `defang compose up` with a [compose file](./compose.md) or using a [Pulumi program](./pulumi.md), Defang will build your services in the cloud and manage the deployment process for you. If you provide a Dockerfile and build context, Defang will upload the files found within the build context to the cloud (either yours in [Defang BYOC](./defang-byoc.md) or ours in [Defang Playground](./defang-playground.md)), build the image, and store it in the cloud provider's container registry."
  },
  {
    "id": 115,
    "about": "Deploying Updates",
    "text": "When you run a deployment to update one or more services, Defang will also make sure to get your new services up and running before deprovisioning any old services so you don't have to worry about downtime.  :::info In [Defang BYOC](./defang-byoc.md), Defang will use your cloud provider account to build and store your images. In [Defang Playground](./defang-playground.md) we will build and store your images for you. :::  :::warning Workloads with GPUs do not support zero downtime deployments. If you have a workload with a GPU, you will experience downtime during updates. :::"
  },
  {
    "id": 116,
    "about": "Instance Types",
    "text": "Defang defaults to \"spot\" instances. This is a cost-effective way to run your workloads, but it does mean that your workloads can be interrupted at any time. This is consistent with the [12 Factor](https://12factor.net/) principle of [disposability](https://12factor.net/disposability).   :::info In the future, we may provide a way to use \"on-demand\" instances for workloads that require more stability. :::"
  },
  {
    "id": 117,
    "about": "---",
    "text": "title: Pulumi description: Define your Defang services with Pulumi to integrate with other cloud resources. sidebar_position: 175 ---  import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem';"
  },
  {
    "id": 118,
    "about": "Pulumi",
    "text": ":::warning Pulumi support is currently only available for Defang Playground. We are working on support for Defang BYOC. :::  You can use Pulumi to define your Defang services. This allows you to integrate your Defang services with other cloud resources.  For example, you might define an Aiven PostgreSQL database in your Pulumi code and then use the outputs of that resource to configure the secrets to connect to the database in your Defang service.  It also allows you to manage configuration for different environments using Pulumi's config system."
  },
  {
    "id": 119,
    "about": "Defang Pulumi Provider",
    "text": "To get started with Pulumi and Defang you will need to install the Defang provider in [your Pulumi project](https://www.pulumi.com/learn/pulumi-fundamentals/create-a-pulumi-project/):  <Tabs>   <TabItem value=\"npm\" label=\"npm\" default>  ```bash npm i @defang-io/pulumi-defang ```    </TabItem>   <TabItem value=\"pnpm\" label=\"pnpm\">  ```bash pnpm i @defang-io/pulumi-defang ```    </TabItem>   <TabItem value=\"yarn\" label=\"yarn\">  ```bash yarn add @defang-io/pulumi-defang ```    </TabItem> </Tabs>"
  },
  {
    "id": 120,
    "about": "Sample",
    "text": "The following is a minimal example of a Pulumi program that defines a Defang service:  ```typescript import * as defang from \"@defang-io/pulumi-defang/lib\";  const service = new defang.DefangService(\"my-service\", {     image: \"strm/helloworld-http:latest\",     ports: [{         target: 80,         mode: \"ingress\",         protocol: \"http\",     }], }); ```"
  },
  {
    "id": 121,
    "about": "---",
    "text": "title: Networking     description: Defang helps you safely configure your services' networking. sidebar_position: 300 --- import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem';"
  },
  {
    "id": 122,
    "about": "Networking",
    "text": "Defang configures Security Groups, deploys applications to a private subnet and uses an Application Load Balancer to route traffic to your services from the public internet only when required.  :::tip This page is about internal networking only. If you want to configure your services to be accessible from the public internet, check the [domains page](./domains.mdx). :::"
  },
  {
    "id": 123,
    "about": "Internal Communication",
    "text": "You can expose ports in your service definition to allow other services to communicate with it. Similar to public communication, you can use the `ports` section of your service definition, but set the `mode` to `host` instead of `ingress` to allow other services to communicate with it through the internal network."
  },
  {
    "id": 124,
    "about": "Sample Configuration",
    "text": "<Tabs>   <TabItem value=\"compose\" label=\"Compose\" default> ```yaml services:     # [...]     service1:         ports:         - mode: host           target: 3000\t           protocol: http ```   </TabItem>   <TabItem value=\"pulumi\" label=\"Pulumi\"> ```typescript const service = new defang.DefangService(\"service1\", {     // [...]     ports: [{         target: 3000,         mode: \"host\",         protocol: \"http\",     }], }); ```   </TabItem> </Tabs>"
  },
  {
    "id": 125,
    "about": "Internal DNS",
    "text": "Internal communication is handled slightly differently between the Defang Playground and Defang BYOC.  <Tabs>   <TabItem value=\"playground\" label=\"Playground\" default> Internal communication between services in the Defang Playground follows the following pattern:  ``` http://<username>-<service-name>:<port> ```   </TabItem>   <TabItem value=\"byoc\" label=\"BYOC\"> Internal communication between services in Defang BYOC follows the following pattern:    ``` http://<service-name>:<port> ```   </TabItem> </Tabs>"
  },
  {
    "id": 126,
    "about": "---",
    "text": "title: Domains     description: Defang helps you provision SSL certificates and expose your services to the internet. sidebar_position: 280 --- import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem';"
  },
  {
    "id": 127,
    "about": "Domains",
    "text": "Defang helps you provision SSL certificates and expose your services to the internet. You can expose your services using Defang-hosted domains or bring your own custom domain with [Defang BYOC](./defang-byoc.md). This page explains how to configure your services to be accessible from the public internet."
  },
  {
    "id": 128,
    "about": "Defang-hosted Domains",
    "text": "To make your service accessible from the public internet with Defang-hosted domains (under `defang.app`), you simply expose ports in your service definition."
  },
  {
    "id": 129,
    "about": "Structure",
    "text": "Defang-hosted domains use a structure that is based on your username and service name.   <Tabs>   <TabItem value=\"playground\" label=\"Playground\" default> If you have a publicly accessible service, you will automatically receive a domain to access it. If you're deploying to the [Defang Playground](./defang-playground.md), your domain will be structured as follows:  ``` https://<username>-<service-name>--<port>.defang.dev ```   </TabItem>   <TabItem value=\"byoc\" label=\"BYOC\"> If you're using [Defang BYOC](./defang-byoc.md), your domain will be:  ``` https://<service-name>--<port>.username.defang.app ```   </TabItem> </Tabs>"
  },
  {
    "id": 130,
    "about": "Sample Configuration",
    "text": "<Tabs>   <TabItem value=\"compose\" label=\"Compose\" default> ```yaml services:     # [...]     serviceName:         ports:         // highlight-start         - mode: ingress           target: 3000\t           protocol: http         // highlight-end ```   </TabItem>   <TabItem value=\"pulumi\" label=\"Pulumi\"> :::warning As of now, the Pulumi provider does not support [Defang BYOC](./defang-byoc.md). ::: ```typescript const service = new defang.DefangService(\"serviceName\", {     // [...]     ports: [{         target: 3000,         mode: \"ingress\",         protocol: \"http\",     }], }); ```   </TabItem> </Tabs>"
  },
  {
    "id": 131,
    "about": "Bring Your Own Domain",
    "text": "If you are using [Defang BYOC](./defang-byoc.md), you can bring your own custom domain to use with your services.   There are two main limitations to keep in mind when using Defang BYOC:   1. You can only use one domain per service.   2. Currently you must host your domain's DNS with the [provider](./defang-byoc.md) you are using.       * [AWS documentation on public hosted zones](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/AboutHZWorkingWith.html)  :::tip NS Records If you want to use your existing DNS provider for other aspects of your system, you can do so and just point a subdomain to your [provider's](./defang-byoc.md) nameservers using NS records. :::"
  },
  {
    "id": 132,
    "about": "Sample Configuration",
    "text": "<Tabs>   <TabItem value=\"compose\" label=\"Compose\" default> ```yaml services:     # [...]     serviceName:         // highlight-next-line         domainname: example.com         ports:         // highlight-start         - mode: ingress           target: 3000\t           protocol: http         // highlight-end ```   </TabItem>   <TabItem value=\"pulumi\" label=\"Pulumi\"> :::warning As of now, the Pulumi provider does not support [Defang BYOC](./defang-byoc.md) and the [Defang Playground](./defang-playground.md) does not support bringing your own domain, since it is not for production use. :::   </TabItem> </Tabs>"
  },
  {
    "id": 133,
    "about": "---",
    "text": "title: Portal description: You can log into the Defang portal to view the state of your defang services. sidebar_position: 700 ---"
  },
  {
    "id": 134,
    "about": "Portal",
    "text": "You can log into the Defang portal at [portal.defang.dev](https://portal.defang.dev) using your [Defang account](./accounts.md) to view the state of your Defang services running in the Defang Playground for non-production applications.  You can use the portal to get an overview of your services, view the logs for each service, quickly access exposed ports, view environment variables, and more.  :::info We will make sure you have access to the tools required to debug your services in production. At the moment we're not entirely sure what that will look like, beyond `defang tail` to view logs, but we're working on it! :::"
  },
  {
    "id": 135,
    "about": "---",
    "text": "title: Accounts description: How accounts are organized in Defang. sidebar_position: 100 ---"
  },
  {
    "id": 136,
    "about": "Accounts",
    "text": "In this section, we'll be talking about a couple different topics related to accounts in Defang. First we'll cover authentication and how to create an account, and then we'll talk about how resources are organized within a cloud environment using your account info.  :::tip Why do I need an account? Defang requires an account so we can organize your resources and provide you with a way to manage them. We also use your account to authenticate you when you interact with [Defang Playground](./defang-playground.md) and the [Defang Portal](./portal.md).  Eventually, billing and payment information will be associated with your account. :::"
  },
  {
    "id": 137,
    "about": "Creating an Account",
    "text": "To create an account, simply login to Defang and accept the [terms of service](https://defang.io/terms-service.html) using the [CLI](../getting-started/authenticating.md).  At the moment, the only way to authenticate with Defang is through GitHub. We plan to offer other authentication providers in the future."
  },
  {
    "id": 138,
    "about": "Structure",
    "text": "Your GitHub username will be used as your Defang username and your Defang username is used to group all your services and to generate domains for your services with the following structure:  ``` <username>-<servicename>--<port>.prod1.defang.dev ```  :::warning Keep in mind that your Defang account is separate from your [cloud provider account](./defang-byoc.md). You will need to authenticate with your cloud provider account separately to deploy services to your own cloud account. :::  :::info We plan to introduce a more robust system for managing accounts, permissions, service groups, etc. in the future. :::"
  },
  {
    "id": 139,
    "about": "---",
    "text": "title: Compose description: Defang allows you to use the compose.yaml specification to deploy your application to the cloud. sidebar_position: 150 ---"
  },
  {
    "id": 140,
    "about": "Compose",
    "text": "You might be familiar with `docker-compose.yml` files, now known as the [Compose specification](https://docs.docker.com/compose/compose-file/) and `compose.yaml` files. It's a simple way to define and run multi-container Docker applications. Defang allows you to use `compose.yaml` files to deploy your application to the cloud."
  },
  {
    "id": 141,
    "about": "How it works",
    "text": "You can define your [services](./services.md) using a `compose.yaml` file in the root of your project, or use the [`defang generate` command](../tutorials/generate-new-code-using-ai.mdx) to generate one (along with other resources). This file is used to define your application's services and how they run. You can edit this file to add more services or change the configuration of existing services.  When you run `defang up`, Defang will read your `compose.yaml` file and [deploy](./deployments.md) the services named in that file to the cloud."
  },
  {
    "id": 142,
    "about": "Service Name Resolution",
    "text": "One thing to keep in mind is that, at the time of this writing, Defang identifies services by the [user/account name](./accounts.md) and the service name (as defined in the `compose.yaml` file). This means that if you have multiple Defang projects with the same service name, they will conflict with each other. We plan to provide a more robust system for managing service names and protecting against conflicts in the future."
  },
  {
    "id": 143,
    "about": "Configuration",
    "text": "If you have a service that depends on a secret like an api key, you can set that [secret](./configuration.md) using the CLI:  ``` defang config set --name MY_API_KEY ```  and then connect it to the service by specifying it in the `compose.yaml`:  ```yaml services:   my-service:     secrets:       - MY_API_KEY  secrets:   MY_API_KEY:     external: true ```  :::info Configuration & Secrets Read more about configuration in the [configuration page](./configuration.md) and about secrets in the [secrets page](./configuration.md). :::"
  },
  {
    "id": 144,
    "about": "---",
    "text": "title: Configuration description: Configuring your Defang application, including sensitive config values like API keys, passwords, and other credentials. sidebar_position: 225 ---"
  },
  {
    "id": 145,
    "about": "Configuration",
    "text": "Defang allows you to configure your application using environment variables. You can set environment variables in your [`compose.yaml` file](./compose.md), or in your [Pulumi program](./pulumi.md). Using Pulumi gives you the advantage of being able to manage your environment variables across different environments using Pulumi stacks.  :::tip Sample You can find a sample of how to set environment variables with Pulumi [here](https://github.com/DefangLabs/defang/tree/main/samples/nodejs/remix-aiven-postgres). :::"
  },
  {
    "id": 146,
    "about": "Sensitive Config aka Secrets",
    "text": "The Defang CLI allows you to securely store sensitive information such as API keys, passwords, and other credentials.  You can use sensitive config by specifying them in the `environment` section of a service in a `compose.yaml` file without any value, or by specifying an environment key with a `null` value in your Pulumi code.  ```ts services:   service1:     image: image1:latest     environment:       - API_KEY ```  Use the `defang config` command of the Defang CLI to manage the values."
  },
  {
    "id": 147,
    "about": "Connecting Services",
    "text": "If you have created a service before a secret you can connect it by running the `defang compose start` command if using the [`defang compose` workflow](./compose.md). If you are using the [Pulumi-based workflow](./pulumi.md) you will need to redeploy using Pulumi.  :::tip Sample You can find a sample of how to set sensitive config values [here](https://github.com/DefangLabs/defang/tree/main/samples/nodejs/ChatGPT%20API). :::"
  },
  {
    "id": 148,
    "about": "Providers",
    "text": "Here are the different ways sensitive config values are stored depending on the provider you are using:      * [AWS](../providers/aws.md#secrets)"
  },
  {
    "id": 149,
    "about": "---",
    "text": "title: Defang Playground description: Defang Playground allows you to get a feel for how Defang works without running production workloads in your own cloud accounts. sidebar_position: 00 ---"
  },
  {
    "id": 150,
    "about": "Defang Playground",
    "text": "Defang aims to make it easier to deploy your services to the cloud. Specifically, Defang's goal is to make it easier to deploy your workloads to your *own* cloud accounts. We refer to this as bring-your-own-cloud (BYOC) which you can read about in more depth [here](./defang-byoc). We also provide Defang Playground, but it is only intended for non-production workloads so you can get a feel for how Defang works.   Defang Playground is a free tier that allows you to deploy services to a Defang-hosted cloud account without needing to manage your own. It is intended for non-production workloads only.  :::warning Please note that the Defang Playground is intended for testing/learning purposes only. The environment may be reset at any time. Do not run production workloads in Defang Playground. :::"
  },
  {
    "id": 151,
    "about": "Limitations",
    "text": "There are a few limitations to Defang Playground. These limitations are in place to ensure that Defang Playground is only used for non-production workloads. If you are interested in running production workloads, you should use Defang BYOC."
  },
  {
    "id": 152,
    "about": "No Custom Domain Support",
    "text": "When you deploy a service to Defang Playground, it will be assigned a domain under the `defang.dev` domain. We do not support pointing your own domains to Defang Playground services."
  },
  {
    "id": 153,
    "about": "Max Resources",
    "text": "* Services: 5 * CPUs: 2 * Memory: 8GB * Replicas: 2"
  },
  {
    "id": 154,
    "about": "---",
    "text": "title: Services description: Defang allows you deploy services, defined as containers, to the cloud. sidebar_position: 200 ---"
  },
  {
    "id": 155,
    "about": "Services",
    "text": "Defang allows you deploy services defined as containers. You can define your services using a [compose file](./compose.md) or a [Pulumi program](./pulumi.md). Services can be exposed to the internet or kept private, and can communicate between themselves using the following conventions for hostnames:  `<username>-<service-name>`  You can learn more about accounts and usernames in the [accounts page](./accounts.md).  :::tip Service Names Service names are defined in your compose file or your Pulumi program. :::  You can learn more about about how to define [services with compose files here](./compose.md) and [services with Pulumi here](./pulumi.md). You can learn more about how services are deployed in the [deployment page](./deployments.md).  :::info While this is the current state of the Defang model, we plan to add support for other types of services in the future, including serverless functions. :::"
  },
  {
    "id": 156,
    "about": "---",
    "text": "title: Defang BYOC description: Defang allows you deploy services, defined as containers, to your own cloud accounts. sidebar_position: 50 ---"
  },
  {
    "id": 157,
    "about": "Defang BYOC",
    "text": "Defang aims to make it easier to deploy your services to the cloud. Specifically, Defang's goal is to make it easier to deploy your workloads to your *own* cloud accounts. We refer to this as bring-your-own-cloud (BYOC). We also provide Defang Playground, but it is only intended for non-production workloads so you can get a feel for how Defang works.  Defang provisions and configures the necessary native managed services from your cloud provider to get your services up and running. For example, on AWS, Defang will configure an [ALB](https://aws.amazon.com/elasticloadbalancing/application-load-balancer/), setup [ECR](https://aws.amazon.com/ecr/), configure [CloudWatch](https://aws.amazon.com/cloudwatch/?nc2=type_a), and run your service on [ECS](https://aws.amazon.com/ecs/?nc2=type_a) and more. The following lists the existing and planned support for cloud providers.  :::info Defang does not install or run any Defang or third party services at runtime. Defang does run the Defang build service to build your container images, which terminates after every build. :::"
  },
  {
    "id": 158,
    "about": "AWS",
    "text": ":::info Public Beta of the v1 Defang BYOC AWS Provider is released as of Feb 1 2024. :::  Please read the [AWS Provider](../providers/aws.md) documentation for more details about how the AWS provider works and how to get started."
  },
  {
    "id": 159,
    "about": "Azure",
    "text": ":::info We will be working on Azure support in the future. If you are interested in Azure support, please vote on [this issue](https://github.com/DefangLabs/defang/issues/57). :::"
  },
  {
    "id": 160,
    "about": "GCP",
    "text": ":::info We will be working on GCP support in the future. If you are interested in GCP support, please vote on [this issue](https://github.com/DefangLabs/defang/issues/58). :::"
  },
  {
    "id": 161,
    "about": "---",
    "text": "title: Observability     description: Monitor and debug your Defang services with the Defang CLI and portal. sidebar_position: 600 ---"
  },
  {
    "id": 162,
    "about": "Observability",
    "text": "You can easily monitor and debug your Defang services at build and runtime using the Defang CLI and portal.   When you deploy a service using the `defang up` the CLI will automatically start tailing the build and runtime logs for your service. You can also view the logs for your service in the portal, or by using the `defang tail` command.  :::warning Keep in mind that the Defang Portal only displays services deployed to Defang Playground. :::"
  },
  {
    "id": 163,
    "about": "Tail",
    "text": "The `defang tail` command will tail the logs for all your services by default. You can also specify a service `--name` to tail the logs for a specific service. If you specify the `--etag` the CLI will only tail the logs for a specific build of a service.  ``` defang tail --name my-service defang tail --etag ua119053ehi2 ```"
  },
  {
    "id": 164,
    "about": "Architecture",
    "text": "In [BYOC](./defang-byoc.md), output is logged to the native logging tools within your cloud provider. The CLI then tails the output as needed."
  },
  {
    "id": 165,
    "about": "---",
    "text": "title: Security     description: Defang configures your cloud applications and services with security best practices. sidebar_position: 275 ---"
  },
  {
    "id": 166,
    "about": "Security",
    "text": "Defang's philosophy is to operate on a principle of \"least-privilege\". This means that we only give your services the permissions they need to operate.  Because Defang creates roles, you need to have the appropriate permissions to create roles in your cloud provider account, typically the `AdministratorAccess` policy in AWS.  :::tip Best practice is to run the Defang CLI in a CI/CD environment and to restrict deployment permissions at that level. :::"
  },
  {
    "id": 167,
    "about": "Roles & Permissions",
    "text": "Defang creates roles for your services to use, and attaches policies to those roles. This means that your services only have the permissions they need to operate, and nothing more."
  },
  {
    "id": 168,
    "about": "Networking",
    "text": "Defang configures Security Groups, deploys applictions to a private subnet and uses an Application Load Balancer to route traffic to your services from the public internet only when required."
  },
  {
    "id": 169,
    "about": "TLS",
    "text": "Defang automates the process of obtaining and renewing TLS certificates for your services using AWS Certificate Manager."
  },
  {
    "id": 170,
    "about": "Secrets",
    "text": "Secrets are stored in AWS Systems Manager Parameter Store, and are encrypted using a key stored in AWS Key Management Service (KMS)."
  },
  {
    "id": 171,
    "about": "---",
    "text": "title: AI description: How Defang uses AI to help you build and deploy your cloud applications. sidebar_position: 100 ---"
  },
  {
    "id": 172,
    "about": "AI",
    "text": "Defang includes an AI-driven assistant that translates natural language prompts to an outline for your project that you can then refine. The AI assistant is available through the [Defang CLI](../getting-started/installing.md).  :::info The AI assistant is currently in beta and only supports a limited set of prompts. We plan to expand the capabilities of the AI assistant in the future. :::  We are working on expanding the range of supported prompts and improving the accuracy of the AI assistant. If you have any feedback or suggestions, please let us know by [opening an issue](https://github.com/DefangLabs/defang/issues/new)."
  },
  {
    "id": 173,
    "about": "Example Prompts",
    "text": "Here are some example prompts that the AI assistant can help you with:  ``` A basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { \"status\": \"OK\" }. The /echo endpoint will echo back all request parameters in the response. ```  ``` A simple service that runs in the cloud and serves a web page ```  ``` A simple flask app with one route that responds with a json object ```  ``` A simple next.js app that serves a static page ```  ``` A simple api with a single route built on express ```"
  },
  {
    "id": 174,
    "about": "---",
    "text": "title: Build and deploy using Pulumi sidebar_position: 400 ---"
  },
  {
    "id": 175,
    "about": "Deploy using Pulumi",
    "text": "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/A4uiP5FIgg0?si=BHZLOxN4noJ56f7x\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>"
  },
  {
    "id": 176,
    "about": "Installing Dependencies",
    "text": "Make sure to install the [Pulumi CLI](https://www.pulumi.com/docs/install/) and the [Defang CLI](../getting-started/installing.md).  Make sure you are logged into the [Defang CLI](../getting-started/authenticating.md). Don't worry about the Pulumi CLI for now."
  },
  {
    "id": 177,
    "about": "Project Directory Setup",
    "text": "Create a new directory for your project and navigate to it.  ```bash mkdir project && cd project ```  If you're familiar with Pulumi and/or are already logged in with the Pulumi CLI, you can skip the next step.  If you are new to pulumi and/or don't have an account, you can \"login\" to the filesystem by running the following command:  ```bash pulumi login file://./ ```  This will make the Pulumi CLI store the state of your infrastructure in the current directory."
  },
  {
    "id": 178,
    "about": "Initialize the Project",
    "text": "Run the following command to set your encryption passphrase for this terminal session:  ```bash export PULUMI_CONFIG_PASSPHRASE=\"super-secure-passphrase\" ```  Now let's initialize the Pulumi project:  ```bash pulumi new typescript -y --force ```  This will create a new Pulumi project in the current directory and will create a Pulumi stack called `dev` by default. We use the `--force` flag because the directory isn't empty (we created a folder when we logged in with the Pulumi CLI).  Run the following command to add to the `.gitignore` file:  ```bash echo \".pulumi\" >> .gitignore ```"
  },
  {
    "id": 179,
    "about": "Install the Defang Provider",
    "text": "Run the following command to install the Defang provider:  ```bash npm install @defang-io/pulumi-defang ```"
  },
  {
    "id": 180,
    "about": "Write the Pulumi Code",
    "text": "Your `index.ts` file should look like this:  ```typescript import * as defang from '@defang-io/pulumi-defang/lib';  export const service = new defang.DefangService('minio', {     name: 'minio',     image: 'quay.io/minio/minio',     // starts the server with the console address set to :9001     command: ['server', '--console-address', ':9001', '/data'],     // Set the root username     environment: {         MINIO_ROOT_USER: 'minio',     },     secrets: [         // Set the root password as a secret which will be encrypted at rest         {             source: 'MINIO_ROOT_PASSWORD',             value: 'minio123',         },     ],     // Run a healthcheck every 30 seconds     healthcheck: {         test: ['CMD', 'curl', 'http://localhost:9000/minio/health/live'],         interval: 30,         timeout: 5,         retries: 3,     },     // Expose the server on port 9000 and the console on port 9001     ports: [         {             target: 9000,             protocol: 'http',             mode: 'ingress',         },         {             target: 9001,             protocol: 'http',             mode: 'ingress',         },     ], }); ```"
  },
  {
    "id": 181,
    "about": "Deploy to Defang",
    "text": ":::warning At the time of writing, the Defang Pulumi Provider only works with [Defang Playground](../concepts/defang-playground.md). We are working on [BYOC](../concepts/defang-byoc.md) support. :::  Run the following command to deploy your service:  ```bash pulumi up --stack=dev ```"
  },
  {
    "id": 182,
    "about": "Monitor the Deployment",
    "text": "You can monitor the deployment by running the following command:  ```bash defang tail --name minio ```"
  },
  {
    "id": 183,
    "about": "Logging Into Minio",
    "text": "The [Defang Playground](../concepts/defang-playground.md) will give you a domain, which you can obtain by running the following command:  ```bash defang ls | grep 'minio.*9001' ```  If you navigate to the domain in your browser, you will be prompted to log in. Use the username `minio` and the password `minio123`."
  },
  {
    "id": 184,
    "about": "Clean Up",
    "text": "To clean up the deployment, run the following command:  ```bash pulumi destroy --stack=dev ```"
  },
  {
    "id": 185,
    "about": "---",
    "text": "title: Build and deploy code sidebar_position: 100 ---"
  },
  {
    "id": 186,
    "about": "Deploy Code Using a Docker Compose File",
    "text": "This tutorial assumes that the code normally gets built into a container and has a Dockerfile file in the current folder.  If you already have a Docker Compose file for your service(s) you can use it directly. Here is a tutorial that shows you a simple example of how to deploy a node.js service using a Docker Compose file and a single js file."
  },
  {
    "id": 187,
    "about": "Step 1 - Create main.js",
    "text": "Let's create a simple node.js service which listens on port 3000 and returns a welcome message. Create a file called `main.js` with the following content:  ```javascript const http = require('http');  const server = http.createServer((req, res) => {     res.statusCode = 200;     res.setHeader('Content-Type', 'text/plain');     res.end('Welcome to Defang\\n'); });  server.listen(3000, '0.0.0.0', () => {     console.log('Server running at http://127.0.0.1:3000/'); }); ```"
  },
  {
    "id": 188,
    "about": "Step 2 - Create Dockerfile",
    "text": "Let's create a Dockerfile to build the node.js service. We'll use the official Node runtime based on Alpine as a parent image. Create a file called `Dockerfile` with the following content:  ```dockerfile"
  },
  {
    "id": 189,
    "about": "Use an official Node runtime based on Alpine as a parent image",
    "text": "FROM node:18-alpine"
  },
  {
    "id": 190,
    "about": "Set the working directory to /app",
    "text": "WORKDIR /app"
  },
  {
    "id": 191,
    "about": "Copy the current directory contents into the container at /app",
    "text": "COPY . ."
  },
  {
    "id": 192,
    "about": "Run the app when the container launches",
    "text": "ENTRYPOINT [ \"node\", \"main.js\" ] ```"
  },
  {
    "id": 193,
    "about": "Step 3 - Create compose.yaml",
    "text": "Let's create a Compose file to deploy the node.js service. We'll call the service minimal and expose port 3000. Create a file called `compose.yaml` with the following content:  ```yaml version: '3.9' services:   minimal:     build:       context: .       dockerfile: Dockerfile     ports:       - mode: ingress         target: 3000\t\t ```"
  },
  {
    "id": 194,
    "about": "Step 4 - Deploy",
    "text": "Now that we have the code and the Docker Compose file, we can deploy the service using the `defang compose up` command. This will bundle the code into a container and deploy it with Defang. If you have [cloud credentials configured](../concepts/defang-byoc), the service will be deployed to AWS. If you don't have AWS credentials set up, the service will be deployed to [Defang Playground](../concepts/defang-playground).  ```sh defang compose up ```"
  },
  {
    "id": 195,
    "about": "---",
    "text": "title: Deploy a GPU-powered application sidebar_position: 500 ---"
  },
  {
    "id": 196,
    "about": "Deploy a GPU-powered application with Defang",
    "text": "This tutorial guides you to create and deploy a GPU-powered application on AWS using Defang and Mistral. We will walk you through the whole deployment process based on this [Deploying Mistral with vLLM](https://github.com/DefangLabs/defang/tree/main/samples/other/vllm) sample.  <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kynFa2zU7hQ?si=qdV0xa6vkhMFJ6qv\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>"
  },
  {
    "id": 197,
    "about": "Prerequisites",
    "text": ""
  },
  {
    "id": 198,
    "about": "AWS Account with GPU Access",
    "text": "For any of this to work, you'll need to have access to GPU instances in your AWS account. To do that you'll need to go to the \"[Service Quotas](https://console.aws.amazon.com/servicequotas/home)\" console in your AWS account. From there you can request access to spot GPU instances. You'll need to request 8 or more because the value is per vCPU and the smallest GPU instance has 8 vCPUs. The instance types you're requesting are \"All G and VT spot instances\".  :::warning Timing This process can take a few days for AWS to approve. :::  ![Service Quotas console screenshot](/img/gpu-tutorial/quotas.png)"
  },
  {
    "id": 199,
    "about": "HuggingFace Token",
    "text": "This sample requires a HugoingFace token to download the model. You can get a token by signing up at [HuggingFace](https://huggingface.co/join) and then going to [your settings](https://huggingface.co/settings/tokens) to get your token."
  },
  {
    "id": 200,
    "about": "Step 1: Clone the sample project",
    "text": "You'll need to clone [this sample](https://github.com/DefangLabs/defang/tree/main/samples/other/vllm) to go through this tutorial."
  },
  {
    "id": 201,
    "about": "Step 2: Check your [Defang BYOC](../concepts/defang-byoc.md) settings",
    "text": "* Make sure you [install the latest version of the Defang CLI](../getting-started/installing.md) * Then, make sure you have properly [authenticated your AWS account](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html). The Defang CLI makes use of AWS environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`, so make sure the correct values are set for those.  If you use the AWS CLI, you can verify that your are authenticated against AWS using the following command (note that the AWS CLI itself is not required to use the defang cli in BYOC mode): ```bash aws sts get-caller-identity ```"
  },
  {
    "id": 202,
    "about": "Step 2: Prepare your Environment",
    "text": "* Log into your Defang account ```bash defang login ```  * Set the HuggingFace token using the `defang config` command ```bash defang config set --name HF_TOKEN ```  [Configuration](../concepts/configuration.md) stores your sensitive information such as API keys, passwords, and other credentials for you."
  },
  {
    "id": 203,
    "about": "Step 3: Explore the Compose File",
    "text": "The `compose.yml` file is where you define your services and their configurations."
  },
  {
    "id": 204,
    "about": "The Mistral Service",
    "text": "In there you'll see the configuration we're using to deploy the Mistral model. We've highlighted some of the key aspects.  ```yaml services:     mistral:         // highlight-next-line         image: ghcr.io/mistralai/mistral-src/vllm:latest         ports:             - mode: host               target: 8000         // highlight-next-line         command: [\"--host\",\"0.0.0.0\",\"--model\",\"TheBloke/Mistral-7B-Instruct-v0.2-AWQ\",\"--quantization\",\"awq\",\"--dtype\",\"auto\",\"--tensor-parallel-size\",\"1\",\"--gpu-memory-utilization\",\".95\",\"--max-model-len\",\"8000\"]         deploy:             resources:                 reservations:                     cpus: '2.0'                     memory: 8192M                     devices:                     // highlight-next-line                         - capabilities: [\"gpu\"]             healthcheck:                 test: [\"CMD\",\"curl\",\"http://localhost:8000/v1/models\"]                 interval: 5m                 timeout: 30s                 retries: 10             // highlight-start             environment:               - HF_TOKEN             // highlight-end ```  **Let's break it down.**  We start with the latest vLLM docker image provided by [Mistral AI](https://docs.mistral.ai/self-deployment/vllm/).  ```yaml mistral:     image: ghcr.io/mistralai/mistral-src/vllm:latest ```  We specify that we require a GPU to run our application.  ```yaml deploy:     resources:         reservations:             cpus: '2.0'             memory: 8192M             devices:                 - capabilities: [\"gpu\"] ```  The Mistral model will be downloaded from HuggingFace. We need to have a HuggingFace Token to enable the installation, so we specify that we need to get the `HF_TOKEN` configuration value from Defang.  Specifying the `HF_TOKEN` in the `environment` section of the service in the `compose.yml` file tells Defang to fetch the value from the encrypted configuration store.  ```yaml environment:     - HF_TOKEN ```"
  },
  {
    "id": 205,
    "about": "The UI Service",
    "text": "In this sample we also provide a simple UI to interact with the endpoint created by vLLM. The UI service is a Next.js application that runs on port 3000.  :::tip Networking You can see here how Defang's [networking](../concepts//networking.mdx) works. The `mistral` service is available at `http://mistral:8000`, exactly as it would be in a local `docker-compose` environment. :::  ```yaml   ui:     restart: unless-stopped     build:       context: ui       dockerfile: Dockerfile     ports:       - mode: ingress         target: 3000     deploy:       resources:         reservations:           memory: 256M     healthcheck:       test: [\"CMD\",\"wget\",\"--spider\",\"http://localhost:3000\"]       interval: 10s       timeout: 2s       retries: 10     environment:       // highlight-next-line       - OPENAI_BASE_URL=http://mistral:8000/v1/ ```"
  },
  {
    "id": 206,
    "about": "Step 4: Deploy to Your Own AWS Account with Defang",
    "text": "Run the following command to deploy your service:  ```bash defang compose up ```"
  },
  {
    "id": 207,
    "about": "---",
    "text": "title: Using Codespaces and Gitpod sidebar_position: 700 ---"
  },
  {
    "id": 208,
    "about": "Defang with Codespaces and GitPod",
    "text": "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/71pmCfLdxTg?si=Q9YIESYEUNTBFBIy\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>  This tutorial will guide you to set up Defang in both Codespaces and Gitpod."
  },
  {
    "id": 209,
    "about": "Getting Started with Github Codespaces and Defang",
    "text": ""
  },
  {
    "id": 210,
    "about": "Step 1: Clone the Defang Codespace Project",
    "text": "Start by cloning the [Defang Github-Codespace](https://github.com/DefangLabs/github-codespace) repo and pushing it to your own account. This repository is configured with a Codespace that has Defang pre-installed."
  },
  {
    "id": 211,
    "about": "Step 2: Create a Codespace",
    "text": "Once you've pushed to your own GitHub repo, you'll be able to create a Codespace by clicking the Code button, selecting the Codespaces tab, and clicking the + icon. This will set up a development environment with Defang already installed, which might take a few minutes.  ![Create Codespace button screenshot](/img/codespace-tutorial/new-codespace.png)"
  },
  {
    "id": 212,
    "about": "Step 3: Open in VS Code Desktop",
    "text": "For the `defang login` command to work correctly, you must open the Codespace in VS Code desktop. This is required because the login process is designed to run on localhost.  ![Open in vs code desktop button screenshot](/img/codespace-tutorial/desktop.png)"
  },
  {
    "id": 213,
    "about": "Step 4: Run Defang Login",
    "text": "Within a VS Code desktop terminal, execute the following command.  ```bash defang login ```  Although it may initially refuse to connect on your localhost, going back will show a \"successfully logged in\" message, confirming that you're logged into Defang."
  },
  {
    "id": 214,
    "about": "Step 5: Verify Running Services",
    "text": "Now that you're logged in, you can use Defang commands. You can test that everything is working properly by running `defang ls` to list your running services."
  },
  {
    "id": 215,
    "about": "Getting Started with GitPod Workspace with Defang",
    "text": ""
  },
  {
    "id": 216,
    "about": "Step 1: Clone the Defang GitPod Workspace Project",
    "text": "Start by cloning the [Defang Gitpod-Workspace](https://github.com/DefangLabs/gitpod-workspace) repo and pushing it to your own GitHub, GitLab, or BitBucket account. This repository includes a Workspace configuration that pre-installs Defang."
  },
  {
    "id": 217,
    "about": "Step 2: Initialize GitPod Workspace",
    "text": "Navigate `https://gitpod.io/#<your-repo-url>` to create your new workspace. In the repository, we have a yaml file indicating that we are using a pre-built dockerfile which installs Defang CLI for you."
  },
  {
    "id": 218,
    "about": "Step 3: Lauch VS Code from GitPod",
    "text": "Open VS Code from GitPod, you will likely need to have the GitPod VS Code extension installed.  ![Open in vs code desktop button screenshot](/img/codespace-tutorial/gitpod-desktop.png)  ![Screenshot of GitPod extension](/img/codespace-tutorial/gitpod-ext.png)"
  },
  {
    "id": 219,
    "about": "Step 4: Run Defang Login",
    "text": "Within a VS Code desktop terminal, execute the following command.  ```bash defang login ```"
  },
  {
    "id": 220,
    "about": "Step 5: Verify Running Services",
    "text": "Now that you're logged in, you can use Defang commands. You can test that everything is working properly by running `defang ls` to list your running services."
  },
  {
    "id": 221,
    "about": "---",
    "text": "title: Deploy pre-built container sidebar_position: 200 ---"
  },
  {
    "id": 222,
    "about": "Deploy container using the CLI",
    "text": "This example is useful if you already have a Docker container built manually or through a CI/CD system and have that the resulting image is available in a public or private repository accessible by Defang."
  },
  {
    "id": 223,
    "about": "Step 1 - Docker Compose",
    "text": "If you already have a Docker Compose file for your service(s) you can use it directly. Else you can create one like this:  ```yaml version: '3.9' services:   service1:     # This is just an example, replace with the image you want     image: \"docker.io/nginx:latest\"     ports:       - mode: ingress         target: 3000\t\t ```"
  },
  {
    "id": 224,
    "about": "Step 2 - Deploy",
    "text": "```text defang compose up ```"
  },
  {
    "id": 225,
    "about": "---",
    "text": "title: Deploy an outline using AI sidebar_position: 50 ---"
  },
  {
    "id": 226,
    "about": "Deploy an outline using AI",
    "text": "Defang supports generating new project outlines using integration with an AI model. Using this feature, you can describe what you would like the service to do and the CLI will then generate a project outline with all the files required to make it work. <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/afglsBYieuc?si=GCvHhBu3H9ktMDHA\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>   In this tutorial we'll use the following prompt:  A basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: `{ \"status\": \"OK\" }`. The /echo endpoint will echo back all request parameters in the response."
  },
  {
    "id": 227,
    "about": "Step 1 - Use the CLI generate command",
    "text": "```text defang generate  ? Choose the language you'd like to use:  [Use arrows to move, type to filter, ? for more help] > Nodejs   Golang   Python  ? Choose a sample service: Generate with AI  ? Please describe the service you'd like to build: [? for help]  A basic service with 2 REST endpoints. The default endpoint will be for health check and should return a JSON object like this: { \"status\": \"OK\" }. The /echo endpoint will echo back all request parameters in the response.  ? What folder would you like to create the service in? [? for help] (service1) project1 ```  This will generate the different files required to start your project based on your prompt and the language selected."
  },
  {
    "id": 228,
    "about": "Step 2 - Review the Code",
    "text": "Change into the new project folder: ```shell cd project1 ```  You can open the files in a code editor to review or make changes as needed before deploying the service."
  },
  {
    "id": 229,
    "about": "Step 3 - Build and Deploy",
    "text": "```bash defang compose up ```"
  },
  {
    "id": 230,
    "about": "---",
    "text": "title: How to use your own domain sidebar_position: 600 ---"
  },
  {
    "id": 231,
    "about": "How to Use Your Own Domain",
    "text": "In our latest version of [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc) (Bring Your Own Cloud), you can now use your own domain name. (Currently, this new feature is not applicable to [Defang Playground](https://docs.defang.io/docs/concepts/defang-playground))  <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/n4RlMpsdTbs?si=_Ru6tobSbi9LT4Q1\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>"
  },
  {
    "id": 232,
    "about": "Step 1 : Check your [Defang BYOC](../concepts/defang-byoc.md) settings",
    "text": "* Make sure you [install the latest version of the Defang CLI](../getting-started/installing.md) * Then, make sure you have properly [authenticated your AWS account](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html). The Defang CLI makes use of AWS environment variables like `AWS_PROFILE`, `AWS_REGION`, `AWS_ACCESS_KEY_ID`, and `AWS_SECRET_ACCESS_KEY`, so make sure the correct values are set for those.  If you use the AWS CLI, you can verify that your are authenticated against AWS using the following command (note that the AWS CLI itself is not required to use the defang cli in BYOC mode): ```bash aws sts get-caller-identity ```"
  },
  {
    "id": 233,
    "about": "Step 2: Setup a Hosted Zone in AWS Route 53",
    "text": ":::info **If you purchased your domain with AWS, you can skip this step.** :::  For Defang to be able to manage your domain, you need to create a [public hosted zone](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/CreatingHostedZone.html) in AWS Route 53. It should list four AWS nameservers and should look like this:  <img src=\"/img/domains-tutorial/zone.png\" alt=\"Hosted Zone UI Screenshot\" style={{maxWidth: 650}} />"
  },
  {
    "id": 234,
    "about": "Step 3: Configure your DNS settings in your domain registrar",
    "text": ":::info **If you purchased your domain with AWS, you can skip this step.** :::  You'll need to create NS records in your domain registrar that point to the AWS Route 53 name servers which we got in the previous step. For example, in CloudFlare, the NS records would look like this:  ![CloudFlare NS Records Screenshot](/img/domains-tutorial/ns-records.png)"
  },
  {
    "id": 235,
    "about": "Step 4: Set up Your Compose File",
    "text": "In your compose file, specify the domain name you want to use, for example  ```yaml services:     web:         domainname: nextjs.defang.chewydemos.com         build:             context: ./web             dockerfile: Dockerfile         ports:             target: 3000             mode: ingress ```"
  },
  {
    "id": 236,
    "about": "Step 5: Deploy",
    "text": "Run the following command to deploy your service: ```bash defang compose up ```  This will deploy your service and set up the necessary DNS records in Route 53 as seen in the screenshot below as well as provision SSL certificates. You can now access your service at the domain you specified in your compose file.  <img src=\"/img/domains-tutorial/route53-records.png\" alt=\"Route 53 DNS Records Screenshot\" />"
  },
  {
    "id": 237,
    "about": "---",
    "text": "slug: july-2024-product-update title: July 2024 Product Update  tags: [Cloud, NoDevOps, BYOC, Windows, Managed Redis, CLI] author: Defang Team ---  Hey folks! We've got another batch of updates to share with you about what the Defang team has been working on over the past month. We're committed to improving your deployment experience, so let's take a look at what's new."
  },
  {
    "id": 238,
    "about": "Windows Experience Improvements",
    "text": "For our Windows users out there, we've made some changes to make your Defang experience even smoother:  * You can now install Defang using `winget`, the Windows Package Manager, for a streamlined setup * We've introduced a signed binary for added security and peace of mind  Deploying your apps from Windows just got a little bit nicer."
  },
  {
    "id": 239,
    "about": "One-click Deploy",
    "text": "We've added a new feature that will make it even easier to get started with Defang. We've created a flow where each sample provides a button that allows you to immediately deploy a template with a GitHub action which will automatically deploy the sample to the Defang Playground. That means you can easily make changes by committing them to your brand new repo, and everything automatically updates in the Playground. It's a great way to get started with Defang and start experimenting with your own projects.  Try it now [from our portal](https://portal.defang.dev/sample)!  ![screenshot of 1-click deploy UI in portal](/img/july-update/1-click-deploy.png)"
  },
  {
    "id": 240,
    "about": "Managed Redis Updates",
    "text": "We first introduced this last month, but we've since rolled it out to everyone. We also added a sample that showcases the power of managed Redis: [BullMQ with Redis](https://github.com/DefangSamples/sample-bullmq-bullboard-redis-template). It demonstrates how you can use BullMQ and BullBoard with a managed Redis instance to create a powerful job queue system so you can easily build robust, scalable applications in AWS with Defang."
  },
  {
    "id": 241,
    "about": "Updated Samples",
    "text": "We've updated our sample projects to showcase how to use them with Defang, including:  * [ASP.NET Core](https://github.com/DefangSamples/sample-csharp-dotnet-template) * [Feathers.js](https://github.com/DefangSamples/sample-feathersjs-template) * [Flask & LangChain](https://github.com/DefangSamples/sample-langchain-template) * [BullMQ with Redis](https://github.com/DefangSamples/sample-bullmq-bullboard-redis-template)  Check them out if you're looking for some inspiration or a starting point for your own projects."
  },
  {
    "id": 242,
    "about": "CLI Updates",
    "text": "We're always looking for ways to enhance the CLI experience. Here's what's new:  * `npx defang` automatically checks to always have the latest version of the CLI * The output during `defang compose up` has been streamlined to focus on the most important information * `defang tail` now supports listening to specific services, making it easier to troubleshoot issues * We've improved hints and error messages to better guide you when something goes wrong * The CLI now has improved color support for light theme terminals, making it easier on the eyes  It's the small refinements that can make a big difference in your workflow."
  },
  {
    "id": 243,
    "about": "Other Updates",
    "text": "Here are a few more things that didn't quite fit with the rest:  * Visibility into ECS deployment events in BYOC tail logs * Improvements to ACME certificate generation  Keep an eye out for these updates in the near future.  ---  As always, we'd love your help shaping the future of Defang, so let us know what you'd like to see next. Happy deploying! \u00f0\u009f\u009a\u0080"
  },
  {
    "id": 244,
    "about": "---",
    "text": "slug: june-2024-product-update title: June 2024 Product Update tags:   [     Cloud,     NoDevOps,     BYOC,     Playground,     Load Testing,     ACME,     Managed Redis,     Kaniko,     Postgres,     ECS,   ] author: Defang Team ---  Hey folks! We\u00e2\u0080\u0099re back with another exciting update about Defang. Our team has been working hard to bring you new features and improvements so you can get deploying faster. Here\u00e2\u0080\u0099s a rundown of what we\u00e2\u0080\u0099ve been up to this month:"
  },
  {
    "id": 245,
    "about": "Samples, samples, samples!",
    "text": "We've been cranking out samples like there's no tomorrow. We've published samples to get you up and running with FastAPI, Elysia, Angular, React, Svelte, Sveltekit, Sails.js, Phoenix, and more. You can filter through them on the [Defang homepage](https://defang.io/#deploy). Check out our video about all the [new samples and functionality](https://www.youtube.com/watch?v=8wIU_af-sX8)."
  },
  {
    "id": 246,
    "about": "Start from a sample in seconds",
    "text": "With all this work we've been putting into samples, we realized it would be pretty awesome if you could clone a sample faster. So we updated the CLI. Now, if you run `defang generate` you'll be able to filter through the samples and choose one. You can also filter through the samples on the [Defang homepage](https://defang.io/#deploy) and clone any of them with a simple command like `defang new sveltekit`."
  },
  {
    "id": 247,
    "about": "Sample templates",
    "text": "If you look through our [GitHub organization](https://github.com/DefangLabs), you'll start seeing loads of repos with the structure `sample-<sample_name>-template`. If you open them, you can create a new repo by clicking this button:  ![screenshot of github UI pointing towards template button](https://github.com/DefangLabs/defang-docs/assets/910895/97d33d90-43b9-499a-b139-e114b701adcb)  Not only will that create a new repo based on the sample in your account, but if you've used Defang before (and accepted the Terms and Conditions) it will automatically deploy it to the playground so you can start playing with Defang immediately."
  },
  {
    "id": 248,
    "about": "ACME for BYOD",
    "text": "We\u00e2\u0080\u0099re excited to announce that ACME support is now available for Bring Your Own Domain (BYOD) in both Bring Your Own Cloud (BYOC) and Playground. This means you can easily add Let's Encrypt certificates to your custom domains, regardless of where your DNS is hosted. Defang will handle the certificate generation and automatic renewal for you. Nice and easy."
  },
  {
    "id": 249,
    "about": "Warnings for Stateful Services",
    "text": "To help you avoid potential pitfalls, we\u00e2\u0080\u0099ve added warnings against deploying stateful services with Defang, since you shouldn't actually be deploying anything stateful with Defang. For example, we'll warn you if you try to deploy services with images like `postgres:<version>`, `redis:<version>`, `minio:<version>`, etc.  In the near future we will be offering ways to run some stateful services using cloud providers' managed offerings. For example Redis, Postgres, and S3. Speaking of which..."
  },
  {
    "id": 250,
    "about": "Managed Redis!",
    "text": "Redis is such a versatile tool that can help with so many different use cases. So we've introduced Managed Redis! You can now specify the Redis image in your `compose.yaml` file and indicate that you want it managed by your cloud provider using `x-defang-redis: true` in your service definition."
  },
  {
    "id": 251,
    "about": "Load Testing",
    "text": "To make sure Defang is ready for loads of new users, we've been doing a lot of load testing. This is going to help us identify and address potential bottlenecks so we can make sure that Defang scales efficiently and handles all you new users smoothly."
  },
  {
    "id": 252,
    "about": "Upgraded Kaniko",
    "text": "We\u00e2\u0080\u0099ve upgraded our Kaniko integration to version 1.23.0 to improve your container build experience. The new version comes with several bug fixes that enhance stability and performance. This means faster and more reliable builds for your applications."
  },
  {
    "id": 253,
    "about": "Upcoming Features",
    "text": "We\u00e2\u0080\u0099re not stopping here! Here\u00e2\u0080\u0099s a sneak peek at what\u00e2\u0080\u0099s coming soon:"
  },
  {
    "id": 254,
    "about": "Managed Postgres",
    "text": "Building on the momentum of Managed Redis, we\u00e2\u0080\u0099re introducing Managed Postgres. Soon you\u00e2\u0080\u0099ll be able to easily integrate a managed Postgres database into your deployment!"
  },
  {
    "id": 255,
    "about": "BYOC ECS Lifecycle Events",
    "text": "Defang runs your services with ECS, and we're working on making it clearer what's happening under the hood.  ---  Stay tuned for more updates and improvements. As always, we appreciate your feedback and are committed to making Defang the easiest way to deploy your applications to the cloud. Go deploy something awesome! \u00f0\u009f\u009a\u0080"
  },
  {
    "id": 256,
    "about": "---",
    "text": "slug: announcing-defang-public-beta title: Announcing the Defang Public Beta tags: [Cloud, GenerativeAI, NoDevOps, BYOC, AWS] ---  **Announcing the Defang Public Beta**  **A radically simpler way for developers to create, deploy, and manage cloud applications.**  Ever since we shipped our Private Beta in the summer of 2023, we have been working with early adopters and listening to their feedback. While these early customers loved the ease with which they could create, deploy, and manage a cloud application, they had one big request - to deploy their applications to their own cloud (e.g. AWS) account. This was important to them for a number of reasons - to leverage their cloud credits, to enforce their IAM roles and security settings, to integrate new application components with their existing deployments, and more.  And so, today with our Public Beta, we are addressing this request. With today\u00e2\u0080\u0099s release of [Defang BYOC](https://docs.defang.io/docs/concepts/defang-byoc) (Bring-your-own-Cloud), you can now enjoy all the benefits of Defang **and** deploy applications to your own AWS account! Our Private Beta experience is still available as [Defang Playground](https://docs.defang.io/docs/concepts/defang-playground) for you to quickly and easily prototype applications and deploy them to our hosted environment.  You can learn more about Defang [here](https://docs.defang.io/docs/intro). Also check out our [tutorials](https://docs.defang.io/docs/category/tutorials), [samples](https://docs.defang.io/docs/samples), and [FAQ](https://docs.defang.io/docs/faq) to know more.  **Try the Public Beta!**  To try the Public Beta, please go to [defang.io](http://defang.io) and click on [Download](https://github.com/DefangLabs/defang/releases/latest) to download the CLI and [get started](https://docs.defang.io/docs/getting-started). We would love to have you kick the tires and give us your feedback! Once you sign up you\u00e2\u0080\u0099ll receive an invitation to our Slack support channel in email. You are also welcome to file [Github issues here](https://github.com/DefangLabs/defang/issues).  **Stay Tuned for More**  While the Public Beta is an important step forward, we have already heard requests for additional features - from support for additional cloud platforms such as Azure and GCP, to the ability to easily write cloud-agnostic applications while leveraging the best of each cloud platform. We are already working on these items and shall have more to share in the coming months - stay tuned!"
  },
  {
    "id": 257,
    "about": "---",
    "text": "slug: announcement title: \"Announcing the Private Beta for the Defang Opinionated Platform\" tags: [Cloud, GenerativeAI, NoDevOps] ---  **Announcing the Private Beta for the Defang Opinionated Platform: Radically Simplifying and Cloud Application Development, Deployment, and Optimization**  We're thrilled to announce the release of our Private Beta for the Defang Opinionated Platform (DOP). We started Defang because, as practitioners with experience in both building cloud apps and building cloud platforms, we were unhappy with the state of the art. It was, and remains, too difficult to develop, deploy, and optimize cloud applications. In architecting and building a cloud app, developers need to consider a variety of factors such as performance, scalability, cost, security, flexibility, simplicity, etc. At the same time, they face a bewildering array of choices - from app architecture to choice of cloud platforms and services, to configuration and deployment, CI-CD, security setting, etc. - in topics that they are not experts in. Clearly, we need a better way.  We realize that improving on this state of affairs is a long journey. Today, we are taking an initial step with the release of the Private Beta of the DOP. The DOP enables **AI-assisted development**, with the ability to specify a high-level prompt and get back an initial version of your cloud service code, which can then be refined further. The DOP **simplifies CI-CD** by automatically building and deploying new artifacts to your target environments when you push new code to your source repository, taking care of all dependency management and build tasks. And the **DOP pre-provisions properly secured and configured staging and production environments** for your application, optimized for security, scaling, and cost.  **Try the Private Beta!**  To try the Private Beta, please go to [portal.defang.dev](https://portal.defang.dev) and register. We would love to have you kick the tires and give us your feedback! You can also check out our [documentation](https://docs.defang.io/docs/intro), [samples](https://docs.defang.io/docs/intro), and our [Github repository](https://github.com/DefangLabs).  **Stay Tuned for More**  While the Private Beta is a start, we have already heard requests for additional features from some of our early adopters and have a lot more in the pipeline! Top of the list is the ability to bring your own cloud accounts (AWS, Azure, GCP). Another frequent request is the ability to access a variety of compute and storage services native to the underlying platform while still maintaining app portability. And we also hear about the need to be able to monitor and optimize an app once deployed. We are already working on all these items and hope to have more to share in the coming months - stay tuned!"
  },
  {
    "id": 258,
    "about": "---",
    "text": "slug: may-2024-product-update title: May 2024 Product Update tags: [Cloud, NoDevOps, BYOC, AWS ECS, defang compose up] author: Defang Team ---  Hey folks! There is a lot going on at Defang and we're excited to share our latest product updates with you. Over the last month, we've been working hard to improve the Defang system and make it even easier for you to deploy your applications. Here's a quick overview of what we've been up to:"
  },
  {
    "id": 259,
    "about": "npx defang",
    "text": "We know a lot of you are using Defang for the first time. To make it easier to get started, we've added a new way to install the Defang CLI. Now you can use npx to run the CLI without installing it globally. Just run:  ```bash npx defang@latest ```  This will download the latest version of the Defang CLI and run it for you. No need to worry about installing or updating the CLI manually!"
  },
  {
    "id": 260,
    "about": "(coming soon) Bring Your Own Domain with Let's Encrypt",
    "text": "Previously you could bring your own domain with <a href=\"/docs/concepts/defang-byoc\">Defang BYOC</a>... but you had to host the DNS records with AWS Route 53 in the AWS account you were deploying to. Now you can point domains hosted anywhere to your Defang deployment and we'll take care of the rest. We'll help generate a Let's Encrypt certificate for your domain and automatically renew it for you."
  },
  {
    "id": 261,
    "about": "Windows Support",
    "text": "Some of you use Defang from a Windows PC and previously a few features didn't work correctly on Windows. Some stuff we've fixed: * ansi color codes in logs * handle ctrl-c when tailing logs"
  },
  {
    "id": 262,
    "about": "Improved CLI",
    "text": "We've made a variety of small tweaks and improvements to the CLI which should make things a little bit cleaner and more stable. * log messages have been made more clear * adding more progress information during compose up"
  },
  {
    "id": 263,
    "about": "Stability and Reliability",
    "text": "Defang is still in Beta and we know we've got to be rock solid by the time we release V1, so we've been working hard to improve the stability and reliability of the Defang architecture. We've been battle-testing different technologies to see how they hold up and have mad a few changes that should make things even better: * capacity improvements in build queues * improvements in log availability"
  },
  {
    "id": 264,
    "about": "---",
    "text": "slug: about-my-journey-deploying-my-first-web-application title: About my Journey Deploying my First Web Application tags: [Cloud, NoDevOps, BYOC, AWS ECS, defang compose up] --- <div align=\"center\">     <em>About the author: Aaron Yu is currently an intern at Defang Software Labs with a keen interest in the area of web development. He wrote this blog post after trying to deploy an application by himself directly on AWS first, and then using Defang.</em> </div> <br/>  As a student at University of British Columbia, new to the area of web development, I needed to develop and deploy a web application as a course project. It was already a huge challenge to complete the coding part. I could not believe that an even bigger challenge awaited. Picking the right platform and services is tough to start with. Do you know that AWS offers 200 different services? Lucky for me my professors\u00e2\u0080\u0099 instructed us to use ECS. Otherwise, I would have been totally lost.  Starting my project, honestly, it felt like I was hitting a brick wall. Diving into AWS with little to no clue was tough. Terms like \"ECS clusters,\" \"task definitions,\" and \"IAM roles\" were flying over my head. I was scared of messing something up, especially when it came to setting up things like ECR and load balancers.  It was overwhelming when all these unfamiliar concepts came at me at once. I searched them up on the internet and went straight to a top-rated YouTube tutorial. I spent an hour and a half going through the whole video series. Those tutorials, as helpful as they were, couldn't fully prepare me for the hands-on challenges of real-life implementation. It's one thing to follow along with a guide when everything goes right; it's another to adapt when things don't quite match up to the tutorial\u00e2\u0080\u0099s scenarios.   <div align=\"center\">     <img src=\"/img/how-AWS-looks.png\" alt=\"Example banner\" width=\"550px\"/> </div>  <div align=\"center\">    <em>It could be confusing if you are new to this area</em> </div> <br/>  I ran into so many problems with configuring services. Sometimes it is caused by carelessly selecting the wrong options; sometimes it is due to the fact that I have no idea what the buttons mean; sometimes it is just a bug with my code. Those errors triple the time it took to deploy my project. It was indeed extremely frustrating.  <div align=\"center\">     <img src=\"/img/error-AWS.png\" alt=\"error-AWS\" width=\"550px\"/> </div>  <div align=\"center\">     <em>I have this scary screen when trying to delete the service I created; this is merely one of the many errors I faced</em> </div> <br/>  Then I found Defang (www.defang.io), and it was like someone flipped a switch. Suddenly, all that complicated stuff became way easier. All I needed to do is to install Defang, build a compose.yaml file to describe my application, and run a single command - defang compose up. And Defang even has a Gen-AI assistant to help you write the code and compose file for your application. Defang automatically does all the heavy-lifting behind the scenes - configuring all the necessary services in a secure and optimal way, and automatically building and deploying my application components. No more late nights trying to figure out AWS docs or stressing about getting everything right. Deploying my Django Restaurant Homepage went from being my biggest worry to one of the smoothest parts of my project.   <div align=\"center\">     <img src=\"/img/defang-compose-up.png\" alt=\"defang-compose-up\" width=\"550px\"/> </div>  <div align=\"center\">     <em>with just a single command in the CLI</em> </div> <br/>  With Defang, I could chill a bit and actually enjoy working on my project, focusing on the cool parts without getting bogged down by all the technical stuff. It made cloud deployment feel doable and fun, even for someone like me who was pretty much a beginner. Give it a try yourself - go to www.defang.io to get started.   <div align=\"center\">     <img src=\"/img/sample-result.png\" alt=\"sample-result\" width=\"550px\"/> </div>  <div align=\"center\">    <em>It is deployed to the internet! (arorschach is my username)</em> </div> <br/>  Try it yourself!  Sample Code: [Restaurant Homepage](https://github.com/HongchenY/Sample-Restaurant-Homepage)  Defang Docs: [Docs](https://docs.defang.io/docs/intro)"
  },
  {
    "id": 265,
    "about": "---",
    "text": "slug: dev-environments title: Add Defang to your developer environments instantly tags: [Cloud, NoDevOps, BYOC, AWS ECS, defang compose up, developer environments, Cloud IDEs, CDE] ---  Defang is aiming to reduce the barriers to entry to cloud application development. With our tooling, we make it really easy to deploy multi-service containerized applications [to your own cloud](https://docs.defang.io/docs/concepts/defang-byoc) with a single command.  We want it to be easy for you to try Defang with as little friction as possible, though, so we have done the work so you can easily get started in a GitHub Codespaces environment, a GitPod Workspace, or even a local Dev Container.  <iframe style={{     width: '100%',     aspectRatio: '560/315', }} src=\"https://www.youtube.com/embed/71pmCfLdxTg?si=7hRL-4uyTDANLe78\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>"
  },
  {
    "id": 266,
    "about": "Codespaces",
    "text": "If you want to get started with Codespaces, you can just fork [this repo](https://github.com/DefangLabs/github-codespace). It comes with the Defang CLI pre-installed so you can start playing with it immediately. It's setup using the Defang CLI [Dev Container Feature](https://github.com/DefangLabs/devcontainer-feature/pkgs/container/devcontainer-feature%2Fdefang-cli)."
  },
  {
    "id": 267,
    "about": "Dev Containers",
    "text": "[Dev Containers](https://code.visualstudio.com/docs/devcontainers/containers) are a cool way to provision and configure development environments and share that configuration with other people you are working with. It's a spec that is supported by [VS Code](https://code.visualstudio.com/docs/devcontainers/containers), [Visual Studio](https://devblogs.microsoft.com/cppblog/dev-containers-for-c-in-visual-studio/), the JetBrains IDEs like [IntelliJ](https://www.jetbrains.com/help/idea/connect-to-devcontainer.html) and [PyCharm](https://www.jetbrains.com/help/pycharm/connect-to-devcontainer.html), [DevPod](https://devpod.sh/docs/developing-in-workspaces/devcontainer-json) and others."
  },
  {
    "id": 268,
    "about": "GitPod",
    "text": "GitPod is another Cloud IDE, a bit like GitHub Codespaces. If prefer GitPod, you can try Defang in a GitPod environment by using [this repo](https://github.com/DefangLabs/gitpod-workspace/tree/main)."
  },
  {
    "id": 269,
    "about": "---",
    "text": "slug: slackbot-sample title: Deploy a Go-powered slackbot with Defang tags: [Cloud, NoDevOps, BYOC, AWS ECS, defang compose up, Slack API] author: Rapha\u00c3\u00abl Titsworth-Morin ---  Hey folks! Today, I'm going to share one of our code samples that will show you how to deploy a simple Slack bot. If you're looking to connect a cloud service to Slack to publish status updates, or something else like that, this should help you get started. We'll walk through a step-by-step process of writing a Go program using the [github.com/slack-go/slack](github.com/slack-go/slack) library to interact with the Slack API and easily deploy it using Defang."
  },
  {
    "id": 270,
    "about": "Prerequisites",
    "text": "Before we dive into the details, let's make sure you have everything you need to get started:  1.  **Install Defang CLI:** Simplify your deployment process by installing the Defang CLI tool. Follow the instructions [here](https://docs.defang.io/docs/getting-started/installing) to get it up and running quickly.  2.  **Slack API Token:** Create a Slack App at https://api.slack.com/apps, granting it the necessary permissions, including the\u00c2\u00a0bot `chat:write`\u00c2\u00a0scope. ![screenshot of the slack admin UI showing the bot scopes](/img/slackbot-sample/scopes.png)  3. **Install the app in your workspace:** You'll need to install the app in your workspace for it to work. Click the \"Install to Workspace\" button in the Slack admin UI to do this. Mine says \"Reinstall\" because I've already installed it. ![screenshot of the slack admin UI showing the install button](/img/slackbot-sample/install-app.png)  4. **Copy the Bot User OAuth Access Token:** This token will authenticate your Slackbot with the Slack API. ![screenshot of the slack admin UI showing the auth token field](/img/slackbot-sample/token.png)  5. **Invite the Bot to a Channel:** To enable your Slackbot, invite it to the desired channel using the\u00c2\u00a0`@<botname>`\u00c2\u00a0command. In the screenshot below, my bot's name actually starts with the word invite, but if your bot is called `mycoolbot` you would invite it with `@mycoolbot`. This ensures your Slackbot has the required permissions to interact with the channel. ![screenshot of the slack chat UI showing me inviting my bot](/img/slackbot-sample/invite.png)  6. **Clone the Sample Code:** Clone the Defang repository and navigate to the\u00c2\u00a0`samples/golang/slackbot`\u00c2\u00a0directory. This directory contains the sample code for the Slackbot.  ```bash git clone https://github.com/DefangLabs/defang cd defang/samples/golang/slackbot ```"
  },
  {
    "id": 271,
    "about": "Deployment Steps",
    "text": "Now that we have everything set up, let's dive into the deployment process. Follow these steps to deploy your Slackbot effortlessly:  1.  **Set Up Secrets:** Prioritize security by configuring environment variables as sensitive config. Use the Defang CLI's\u00c2\u00a0`defang config set`\u00c2\u00a0command to set the\u00c2\u00a0`SLACK_TOKEN`\u00c2\u00a0and `SLACK_CHANNEL_ID`\u00c2\u00a0configs.     Replace\u00c2\u00a0`your_slack_token`\u00c2\u00a0and\u00c2\u00a0`your_slack_channel_id`\u00c2\u00a0with the respective values:      ```bash     defang config set --name SLACK_TOKEN --value your_slack_token     defang config set --name SLACK_CHANNEL_ID --value your_slack_channel_id     ```  2.  **Deploy the Slackbot:**  Use the Defang CLI's\u00c2\u00a0`defang compose up`\u00c2\u00a0command to deploy."
  },
  {
    "id": 272,
    "about": "Usage",
    "text": "With your Slackbot up and running, let's explore how to make the most of it. Simply send a POST request to the\u00c2\u00a0`/`\u00c2\u00a0endpoint with a JSON body containing the message you want to post to the Slack channel. Popular tools like cURL or Postman can help you send the request:  ```bash curl 'https://raphaeltm-bot--8080.prod1.defang.dev/' \\   -H 'content-type: application/json' \\   --data-raw $'{\"message\":\"This is your bot speaking. We\\'ll be landing in 10 minutes. Please fasten your seatbelts.\"}' ```"
  },
  {
    "id": 273,
    "about": "Takeaways",
    "text": "Congratulations! You've successfully deployed a Slackbot using Defang. If you deployed this as an internal service, you could use it to send status updates, alerts, or other important messages to your team. The possibilities are endless!"
  },
  {
    "id": 273,
    "about": "BYOD - Bring Your Own Domain",
    "text": ""
  }
]
